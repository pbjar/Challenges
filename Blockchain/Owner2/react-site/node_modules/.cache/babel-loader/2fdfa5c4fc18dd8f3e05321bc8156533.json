{"ast":null,"code":"import { isObject, runIfFn } from \"@chakra-ui/utils\";\n/**\n * Expands an array or object syntax responsive style.\n *\n * @example\n * expandResponsive({ mx: [1, 2] })\n * // or\n * expandResponsive({ mx: { base: 1, sm: 2 } })\n *\n * // => { mx: 1, \"@media(min-width:<sm>)\": { mx: 2 } }\n */\n\nexport var expandResponsive = styles => theme => {\n  /**\n   * Before any style can be processed, the user needs to call `toCSSVar`\n   * which analyzes the theme's breakpoint and appends a `__breakpoints` property\n   * to the theme with more details of the breakpoints.\n   *\n   * To learn more, go here: packages/utils/src/responsive.ts #analyzeBreakpoints\n   */\n  if (!theme.__breakpoints) return styles;\n  var {\n    isResponsive,\n    toArrayValue,\n    media: medias\n  } = theme.__breakpoints;\n  var computedStyles = {};\n\n  for (var key in styles) {\n    var value = runIfFn(styles[key], theme);\n    if (value == null) continue; // converts the object responsive syntax to array syntax\n\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value;\n      continue;\n    }\n\n    var queries = value.slice(0, medias.length).length;\n\n    for (var index = 0; index < queries; index += 1) {\n      var media = medias == null ? void 0 : medias[index];\n\n      if (!media) {\n        computedStyles[key] = value[index];\n        continue;\n      }\n\n      computedStyles[media] = computedStyles[media] || {};\n\n      if (value[index] == null) {\n        continue;\n      }\n\n      computedStyles[media][key] = value[index];\n    }\n  }\n\n  return computedStyles;\n};","map":{"version":3,"sources":["../../../src/utils/expand-responsive.ts"],"names":["expandResponsive","styles","theme","media","medias","computedStyles","value","runIfFn","isObject","isResponsive","toArrayValue","Array","queries","index"],"mappings":"AAAA,SAAA,QAAA,EAAA,OAAA,QAAA,kBAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMA,gBAAgB,GAAIC,MAAD,IAAmBC,KAAD,IAAiB;AACjE;AACF;AACA;AACA;AACA;AACA;AACA;AACE,MAAI,CAACA,KAAK,CAAV,aAAA,EAA0B,OAAA,MAAA;AAC1B,MAAM;AAAA,IAAA,YAAA;AAAA,IAAA,YAAA;AAA8BC,IAAAA,KAAK,EAAEC;AAArC,MAAgDF,KAAK,CAA3D,aAAA;AAEA,MAAMG,cAAoB,GAA1B,EAAA;;AAEA,OAAK,IAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,QAAIC,KAAK,GAAGC,OAAO,CAACN,MAAM,CAAP,GAAO,CAAP,EAAnB,KAAmB,CAAnB;AAEA,QAAIK,KAAK,IAAT,IAAA,EAHwB,SAAA,CAKxB;;AACAA,IAAAA,KAAK,GAAGE,QAAQ,CAARA,KAAQ,CAARA,IAAmBC,YAAY,CAA/BD,KAA+B,CAA/BA,GAAyCE,YAAY,CAArDF,KAAqD,CAArDA,GAARF,KAAAA;;AAEA,QAAI,CAACK,KAAK,CAALA,OAAAA,CAAL,KAAKA,CAAL,EAA2B;AACzBN,MAAAA,cAAc,CAAdA,GAAc,CAAdA,GAAAA,KAAAA;AACA;AACD;;AAED,QAAMO,OAAO,GAAGN,KAAK,CAALA,KAAAA,CAAAA,CAAAA,EAAeF,MAAM,CAArBE,MAAAA,EAAhB,MAAA;;AAEA,SAAK,IAAIO,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAzB,OAAA,EAAqCA,KAAK,IAA1C,CAAA,EAAiD;AAC/C,UAAMV,KAAK,GAAGC,MAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,MAAM,CAApB,KAAoB,CAApB;;AAEA,UAAI,CAAJ,KAAA,EAAY;AACVC,QAAAA,cAAc,CAAdA,GAAc,CAAdA,GAAsBC,KAAK,CAA3BD,KAA2B,CAA3BA;AACA;AACD;;AAEDA,MAAAA,cAAc,CAAdA,KAAc,CAAdA,GAAwBA,cAAc,CAAdA,KAAc,CAAdA,IAAxBA,EAAAA;;AAEA,UAAIC,KAAK,CAALA,KAAK,CAALA,IAAJ,IAAA,EAA0B;AACxB;AACD;;AAEDD,MAAAA,cAAc,CAAdA,KAAc,CAAdA,CAAAA,GAAAA,IAA6BC,KAAK,CAAlCD,KAAkC,CAAlCA;AACD;AACF;;AAED,SAAA,cAAA;AA9CK,CAAA","sourcesContent":["import { Dict, isObject, runIfFn } from \"@chakra-ui/utils\"\n\n/**\n * Expands an array or object syntax responsive style.\n *\n * @example\n * expandResponsive({ mx: [1, 2] })\n * // or\n * expandResponsive({ mx: { base: 1, sm: 2 } })\n *\n * // => { mx: 1, \"@media(min-width:<sm>)\": { mx: 2 } }\n */\nexport const expandResponsive = (styles: Dict) => (theme: Dict) => {\n  /**\n   * Before any style can be processed, the user needs to call `toCSSVar`\n   * which analyzes the theme's breakpoint and appends a `__breakpoints` property\n   * to the theme with more details of the breakpoints.\n   *\n   * To learn more, go here: packages/utils/src/responsive.ts #analyzeBreakpoints\n   */\n  if (!theme.__breakpoints) return styles\n  const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints\n\n  const computedStyles: Dict = {}\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) continue\n\n    // converts the object responsive syntax to array syntax\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, medias.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = medias?.[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n"]},"metadata":{},"sourceType":"module"}