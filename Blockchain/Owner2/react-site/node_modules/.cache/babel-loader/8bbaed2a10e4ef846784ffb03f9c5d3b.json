{"ast":null,"code":"import { getPointerEventName, wrapPointerEventHandler } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport function useEventListenerMap() {\n  var listeners = React.useRef(new Map());\n  var currentListeners = listeners.current;\n  var add = React.useCallback((el, type, listener, options) => {\n    var pointerEventListener = wrapPointerEventHandler(listener, type === \"pointerdown\");\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options\n    });\n    el.addEventListener(type, pointerEventListener, options);\n  }, []);\n  var remove = React.useCallback((el, type, listener, options) => {\n    var {\n      __listener: pointerEventListener\n    } = listeners.current.get(listener);\n    el.removeEventListener(type, pointerEventListener, options);\n    listeners.current.delete(pointerEventListener);\n  }, []);\n  React.useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}","map":{"version":3,"sources":["../../src/use-event-listener-map.ts"],"names":["listeners","React","currentListeners","add","pointerEventListener","wrapPointerEventHandler","type","__listener","getPointerEventName","options","el","remove","value"],"mappings":"AAAA,SAAA,mBAAA,EAAA,uBAAA,QAAA,kBAAA;AAMA,OAAO,KAAP,KAAA,MAAA,OAAA;AA6BA,OAAO,SAAA,mBAAA,GAA+C;AACpD,MAAMA,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAAa,IAA/B,GAA+B,EAAbA,CAAlB;AACA,MAAMC,gBAAgB,GAAGF,SAAS,CAAlC,OAAA;AAEA,MAAMG,GAAG,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;AAC7D,QAAMC,oBAAoB,GAAGC,uBAAuB,CAAA,QAAA,EAElDC,IAAI,KAFN,aAAoD,CAApD;AAIAN,IAAAA,SAAS,CAATA,OAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAAgC;AAC9BO,MAAAA,UAAU,EADoB,oBAAA;AAE9BD,MAAAA,IAAI,EAAEE,mBAAmB,CAFK,IAEL,CAFK;AAAA,MAAA,EAAA;AAI9BC,MAAAA;AAJ8B,KAAhCT;AAMAU,IAAAA,EAAE,CAAFA,gBAAAA,CAAAA,IAAAA,EAAAA,oBAAAA,EAAAA,OAAAA;AAXU,GAAA,EAAZ,EAAY,CAAZ;AAcA,MAAMC,MAAM,GAAG,KAAK,CAAL,WAAA,CAAkB,CAAA,EAAA,EAAA,IAAA,EAAA,QAAA,EAAA,OAAA,KAAiC;AAChE,QAAM;AAAEJ,MAAAA,UAAU,EAAEH;AAAd,QAAuCJ,SAAS,CAATA,OAAAA,CAAAA,GAAAA,CAA7C,QAA6CA,CAA7C;AACAU,IAAAA,EAAE,CAAFA,mBAAAA,CAAAA,IAAAA,EAAAA,oBAAAA,EAAAA,OAAAA;AACAV,IAAAA,SAAS,CAATA,OAAAA,CAAAA,MAAAA,CAAAA,oBAAAA;AAHa,GAAA,EAAf,EAAe,CAAf;AAMAC,EAAAA,KAAK,CAALA,SAAAA,CACE,MAAM,MAAM;AACVC,IAAAA,gBAAgB,CAAhBA,OAAAA,CAAyB,CAAA,KAAA,EAAA,GAAA,KAAgB;AACvCS,MAAAA,MAAM,CAACC,KAAK,CAAN,EAAA,EAAWA,KAAK,CAAhB,IAAA,EAAA,GAAA,EAA4BA,KAAK,CAAvCD,OAAM,CAANA;AADFT,KAAAA;AAFJD,GAAAA,EAME,CAAA,MAAA,EANFA,gBAME,CANFA;AASA,SAAO;AAAA,IAAA,GAAA;AAAOU,IAAAA;AAAP,GAAP;AACD","sourcesContent":["import {\n  PointerEventInfo,\n  getPointerEventName,\n  wrapPointerEventHandler,\n  EventListenerWithPointInfo,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (ev: DocumentEventMap[K], info: PointerEventInfo) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerWithPointInfo,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListenerMap(): EventListeners {\n  const listeners = React.useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = React.useCallback((el, type, listener, options) => {\n    const pointerEventListener = wrapPointerEventHandler(\n      listener,\n      type === \"pointerdown\",\n    )\n    listeners.current.set(listener, {\n      __listener: pointerEventListener,\n      type: getPointerEventName(type),\n      el,\n      options,\n    })\n    el.addEventListener(type, pointerEventListener, options)\n  }, [])\n\n  const remove = React.useCallback((el, type, listener, options) => {\n    const { __listener: pointerEventListener } = listeners.current.get(listener)\n    el.removeEventListener(type, pointerEventListener, options)\n    listeners.current.delete(pointerEventListener)\n  }, [])\n\n  React.useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}