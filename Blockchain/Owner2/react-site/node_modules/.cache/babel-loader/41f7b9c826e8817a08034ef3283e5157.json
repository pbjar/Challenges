{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { MULTICALL_ADDRESSES } from '../constants';\nimport { ConfigProvider } from '../providers/config/provider';\nimport { BlockNumberProvider } from './blockNumber/provider';\nimport { ChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { EthersProvider } from './EthersProvider';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nexport function DAppProvider({\n  config,\n  children\n}) {\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    }, void 0)\n  }), void 0);\n}\n\nfunction DAppProviderWithConfig({\n  children\n}) {\n  const {\n    multicallAddresses\n  } = useConfig();\n  const multicallAddressesMerged = Object.assign(Object.assign({}, MULTICALL_ADDRESSES), multicallAddresses);\n  return _jsx(EthersProvider, {\n    children: _jsxs(BlockNumberProvider, {\n      children: [_jsx(NetworkActivator, {}, void 0), _jsx(LocalMulticallProvider, {\n        children: _jsx(ChainStateProvider, Object.assign({\n          multicallAddresses: multicallAddressesMerged\n        }, {\n          children: _jsx(NotificationsProvider, {\n            children: _jsx(TransactionProvider, {\n              children: children\n            }, void 0)\n          }, void 0)\n        }), void 0)\n      }, void 0)]\n    }, void 0)\n  }, void 0);\n}","map":{"version":3,"sources":["../../../../src/providers/DAppProvider.tsx"],"names":[],"mappings":";AACA,SAAS,mBAAT,QAAoC,cAApC;AAEA,SAAS,cAAT,QAA+B,8BAA/B;AACA,SAAS,mBAAT,QAAoC,wBAApC;AACA,SAAS,kBAAT,QAAmC,cAAnC;AACA,SAAS,SAAT,QAA0B,kBAA1B;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,qBAAT,QAAsC,0BAAtC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AAOA,OAAM,SAAU,YAAV,CAAuB;AAAE,EAAA,MAAF;AAAU,EAAA;AAAV,CAAvB,EAA8D;AAClE,SACE,IAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,MAAM,EAAE;AAAT,GAAA,EAAe;AAAA,IAAA,QAAA,EAC5B,IAAA,CAAC,sBAAD,EAAuB;AAAA,MAAA,QAAA,EAAE;AAAF,KAAvB,EAAiC,KAAA,CAAjC;AAD4B,GAAf,CAAf,EAC6D,KAAA,CAD7D,CADF;AAKD;;AAMD,SAAS,sBAAT,CAAgC;AAAE,EAAA;AAAF,CAAhC,EAA6D;AAC3D,QAAM;AAAE,IAAA;AAAF,MAAyB,SAAS,EAAxC;AACA,QAAM,wBAAwB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,mBAAR,CAAA,EAAgC,kBAAhC,CAA9B;AAEA,SACE,IAAA,CAAC,cAAD,EAAe;AAAA,IAAA,QAAA,EACb,KAAA,CAAC,mBAAD,EAAoB;AAAA,MAAA,QAAA,EAAA,CAClB,IAAA,CAAC,gBAAD,EAAiB,EAAjB,EAAiB,KAAA,CAAjB,CADkB,EAElB,IAAA,CAAC,sBAAD,EAAuB;AAAA,QAAA,QAAA,EACrB,IAAA,CAAC,kBAAD,EAAmB,MAAA,CAAA,MAAA,CAAA;AAAC,UAAA,kBAAkB,EAAE;AAArB,SAAA,EAA6C;AAAA,UAAA,QAAA,EAC9D,IAAA,CAAC,qBAAD,EAAsB;AAAA,YAAA,QAAA,EACpB,IAAA,CAAC,mBAAD,EAAoB;AAAA,cAAA,QAAA,EAAE;AAAF,aAApB,EAA8B,KAAA,CAA9B;AADoB,WAAtB,EACuD,KAAA,CADvD;AAD8D,SAA7C,CAAnB,EAG0B,KAAA,CAH1B;AADqB,OAAvB,EAKuB,KAAA,CALvB,CAFkB;AAAA,KAApB,EAQ2B,KAAA,CAR3B;AADa,GAAf,EAUwB,KAAA,CAVxB,CADF;AAcD","sourceRoot":"","sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { MULTICALL_ADDRESSES } from '../constants';\nimport { ConfigProvider } from '../providers/config/provider';\nimport { BlockNumberProvider } from './blockNumber/provider';\nimport { ChainStateProvider } from './chainState';\nimport { useConfig } from './config/context';\nimport { EthersProvider } from './EthersProvider';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nexport function DAppProvider({ config, children }) {\n    return (_jsx(ConfigProvider, Object.assign({ config: config }, { children: _jsx(DAppProviderWithConfig, { children: children }, void 0) }), void 0));\n}\nfunction DAppProviderWithConfig({ children }) {\n    const { multicallAddresses } = useConfig();\n    const multicallAddressesMerged = Object.assign(Object.assign({}, MULTICALL_ADDRESSES), multicallAddresses);\n    return (_jsx(EthersProvider, { children: _jsxs(BlockNumberProvider, { children: [_jsx(NetworkActivator, {}, void 0),\n                _jsx(LocalMulticallProvider, { children: _jsx(ChainStateProvider, Object.assign({ multicallAddresses: multicallAddressesMerged }, { children: _jsx(NotificationsProvider, { children: _jsx(TransactionProvider, { children: children }, void 0) }, void 0) }), void 0) }, void 0)] }, void 0) }, void 0));\n}\n//# sourceMappingURL=DAppProvider.js.map"]},"metadata":{},"sourceType":"module"}