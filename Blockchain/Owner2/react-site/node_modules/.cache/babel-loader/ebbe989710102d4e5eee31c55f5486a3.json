{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { parseFilterArgs } from '../core/utils';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useIsFetching(arg1, arg2) {\n  var mountedRef = React.useRef(false);\n  var queryClient = useQueryClient();\n\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n      filters = _parseFilterArgs[0];\n\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\n      isFetching = _React$useState[0],\n      setIsFetching = _React$useState[1];\n\n  var filtersRef = React.useRef(filters);\n  filtersRef.current = filters;\n  var isFetchingRef = React.useRef(isFetching);\n  isFetchingRef.current = isFetching;\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        var newIsFetching = queryClient.isFetching(filtersRef.current);\n\n        if (isFetchingRef.current !== newIsFetching) {\n          setIsFetching(newIsFetching);\n        }\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [queryClient]);\n  return isFetching;\n}","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner/react-site/node_modules/react-query/es/react/useIsFetching.js"],"names":["React","notifyManager","parseFilterArgs","useQueryClient","useIsFetching","arg1","arg2","mountedRef","useRef","queryClient","_parseFilterArgs","filters","_React$useState","useState","isFetching","setIsFetching","filtersRef","current","isFetchingRef","useEffect","unsubscribe","getQueryCache","subscribe","batchCalls","newIsFetching"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AACxC,MAAIC,UAAU,GAAGP,KAAK,CAACQ,MAAN,CAAa,KAAb,CAAjB;AACA,MAAIC,WAAW,GAAGN,cAAc,EAAhC;;AAEA,MAAIO,gBAAgB,GAAGR,eAAe,CAACG,IAAD,EAAOC,IAAP,CAAtC;AAAA,MACIK,OAAO,GAAGD,gBAAgB,CAAC,CAAD,CAD9B;;AAGA,MAAIE,eAAe,GAAGZ,KAAK,CAACa,QAAN,CAAeJ,WAAW,CAACK,UAAZ,CAAuBH,OAAvB,CAAf,CAAtB;AAAA,MACIG,UAAU,GAAGF,eAAe,CAAC,CAAD,CADhC;AAAA,MAEIG,aAAa,GAAGH,eAAe,CAAC,CAAD,CAFnC;;AAIA,MAAII,UAAU,GAAGhB,KAAK,CAACQ,MAAN,CAAaG,OAAb,CAAjB;AACAK,EAAAA,UAAU,CAACC,OAAX,GAAqBN,OAArB;AACA,MAAIO,aAAa,GAAGlB,KAAK,CAACQ,MAAN,CAAaM,UAAb,CAApB;AACAI,EAAAA,aAAa,CAACD,OAAd,GAAwBH,UAAxB;AACAd,EAAAA,KAAK,CAACmB,SAAN,CAAgB,YAAY;AAC1BZ,IAAAA,UAAU,CAACU,OAAX,GAAqB,IAArB;AACA,QAAIG,WAAW,GAAGX,WAAW,CAACY,aAAZ,GAA4BC,SAA5B,CAAsCrB,aAAa,CAACsB,UAAd,CAAyB,YAAY;AAC3F,UAAIhB,UAAU,CAACU,OAAf,EAAwB;AACtB,YAAIO,aAAa,GAAGf,WAAW,CAACK,UAAZ,CAAuBE,UAAU,CAACC,OAAlC,CAApB;;AAEA,YAAIC,aAAa,CAACD,OAAd,KAA0BO,aAA9B,EAA6C;AAC3CT,UAAAA,aAAa,CAACS,aAAD,CAAb;AACD;AACF;AACF,KARuD,CAAtC,CAAlB;AASA,WAAO,YAAY;AACjBjB,MAAAA,UAAU,CAACU,OAAX,GAAqB,KAArB;AACAG,MAAAA,WAAW;AACZ,KAHD;AAID,GAfD,EAeG,CAACX,WAAD,CAfH;AAgBA,SAAOK,UAAP;AACD","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { parseFilterArgs } from '../core/utils';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useIsFetching(arg1, arg2) {\n  var mountedRef = React.useRef(false);\n  var queryClient = useQueryClient();\n\n  var _parseFilterArgs = parseFilterArgs(arg1, arg2),\n      filters = _parseFilterArgs[0];\n\n  var _React$useState = React.useState(queryClient.isFetching(filters)),\n      isFetching = _React$useState[0],\n      setIsFetching = _React$useState[1];\n\n  var filtersRef = React.useRef(filters);\n  filtersRef.current = filters;\n  var isFetchingRef = React.useRef(isFetching);\n  isFetchingRef.current = isFetching;\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = queryClient.getQueryCache().subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        var newIsFetching = queryClient.isFetching(filtersRef.current);\n\n        if (isFetchingRef.current !== newIsFetching) {\n          setIsFetching(newIsFetching);\n        }\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [queryClient]);\n  return isFetching;\n}"]},"metadata":{},"sourceType":"module"}