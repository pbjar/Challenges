{"ast":null,"code":"import { isObject } from \"@chakra-ui/utils\";\n\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpr = function toExpr(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(toRef).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\n\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return \"calc(\" + toExpr(\"+\", ...operands) + \")\";\n};\n\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return \"calc(\" + toExpr(\"-\", ...operands) + \")\";\n};\n\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return \"calc(\" + toExpr(\"*\", ...operands) + \")\";\n};\n\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return \"calc(\" + toExpr(\"/\", ...operands) + \")\";\n};\n\nvar _negate = x => {\n  var value = toRef(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n\n  return _multiply(value, -1);\n};\n\nexport var calc = Object.assign(x => ({\n  add: function add() {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n\n    return calc(_add(x, ...operands));\n  },\n  subtract: function subtract() {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n\n    return calc(_subtract(x, ...operands));\n  },\n  multiply: function multiply() {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n\n    return calc(_multiply(x, ...operands));\n  },\n  divide: function divide() {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n\n    return calc(_divide(x, ...operands));\n  },\n  negate: () => calc(_negate(x)),\n  toString: () => x.toString()\n}), {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"sources":["../../src/css-calc.ts"],"names":["isObject","operand","String","toExpr","operands","add","subtract","multiply","divide","negate","x","value","toRef","Number","parseFloat","calc","toString"],"mappings":"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","sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}