{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { walkObject } from \"@chakra-ui/utils\";\nimport { calc } from \"./calc\";\nimport { cssVar } from \"./css-var\";\nexport function createThemeVars(target, options) {\n  var context = {\n    cssMap: {},\n    cssVars: {}\n  };\n  walkObject(target, (value, path) => {\n    var _tokenHandlerMap$firs; // firstKey will be e.g. \"space\"\n\n\n    var [firstKey] = path;\n    var handler = (_tokenHandlerMap$firs = tokenHandlerMap[firstKey]) != null ? _tokenHandlerMap$firs : tokenHandlerMap.defaultHandler;\n    var {\n      cssVars,\n      cssMap\n    } = handler(path, value, options);\n    Object.assign(context.cssVars, cssVars);\n    Object.assign(context.cssMap, cssMap);\n  });\n  return context;\n}\n/**\n * Define transformation handlers for ThemeScale\n */\n\nvar tokenHandlerMap = {\n  space: (keys, value, options) => {\n    var properties = tokenHandlerMap.defaultHandler(keys, value, options);\n    var [firstKey, ...referenceKeys] = keys;\n    var negativeLookupKey = firstKey + \".-\" + referenceKeys.join(\".\");\n    var negativeVarKey = keys.join(\"-\");\n    var {\n      variable,\n      reference\n    } = cssVar(negativeVarKey, undefined, options.cssVarPrefix);\n    var negativeValue = calc.negate(value);\n    var varRef = calc.negate(reference);\n    return {\n      cssVars: properties.cssVars,\n      cssMap: _extends({}, properties.cssMap, {\n        [negativeLookupKey]: {\n          value: \"\" + negativeValue,\n          var: \"\" + variable,\n          varRef\n        }\n      })\n    };\n  },\n  defaultHandler: (keys, value, options) => {\n    var lookupKey = keys.join(\".\");\n    var varKey = keys.join(\"-\");\n    var {\n      variable,\n      reference\n    } = cssVar(varKey, undefined, options.cssVarPrefix);\n    return {\n      cssVars: {\n        [variable]: value\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: variable,\n          varRef: reference\n        }\n      }\n    };\n  }\n};","map":{"version":3,"sources":["../../../src/create-theme-vars/create-theme-vars.ts"],"names":["context","cssMap","cssVars","walkObject","handler","tokenHandlerMap","Object","space","properties","negativeLookupKey","firstKey","referenceKeys","negativeVarKey","keys","reference","cssVar","options","negativeValue","calc","varRef","value","var","defaultHandler","lookupKey","varKey"],"mappings":"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","sourcesContent":["import { Dict, walkObject } from \"@chakra-ui/utils\"\nimport { ThemeScale } from \"./theme-tokens\"\nimport { calc, Operand } from \"./calc\"\nimport { cssVar } from \"./css-var\"\n\nexport interface CreateThemeVarsOptions {\n  cssVarPrefix?: string\n}\n\nexport interface ThemeVars {\n  cssVars: Dict\n  cssMap: Dict\n}\n\nexport function createThemeVars(target: Dict, options: CreateThemeVarsOptions) {\n  const context: ThemeVars = {\n    cssMap: {},\n    cssVars: {},\n  }\n\n  walkObject(target, (value, path) => {\n    // firstKey will be e.g. \"space\"\n    const [firstKey] = path\n\n    const handler = tokenHandlerMap[firstKey] ?? tokenHandlerMap.defaultHandler\n\n    const { cssVars, cssMap } = handler(path, value, options)\n    Object.assign(context.cssVars, cssVars)\n    Object.assign(context.cssMap, cssMap)\n  })\n\n  return context\n}\n\ntype TokenHandler = (\n  keys: string[],\n  value: unknown | { reference: string },\n  options: CreateThemeVarsOptions,\n) => ThemeVars\n\n/**\n * Define transformation handlers for ThemeScale\n */\nconst tokenHandlerMap: Partial<Record<ThemeScale, TokenHandler>> & {\n  defaultHandler: TokenHandler\n} = {\n  space: (keys, value, options) => {\n    const properties = tokenHandlerMap.defaultHandler(keys, value, options)\n    const [firstKey, ...referenceKeys] = keys\n\n    const negativeLookupKey = `${firstKey}.-${referenceKeys.join(\".\")}`\n    const negativeVarKey = keys.join(\"-\")\n    const { variable, reference } = cssVar(\n      negativeVarKey,\n      undefined,\n      options.cssVarPrefix,\n    )\n\n    const negativeValue = calc.negate(value as Operand)\n    const varRef = calc.negate(reference)\n\n    return {\n      cssVars: properties.cssVars,\n      cssMap: {\n        ...properties.cssMap,\n        [negativeLookupKey]: {\n          value: `${negativeValue}`,\n          var: `${variable}`,\n          varRef,\n        },\n      },\n    }\n  },\n  defaultHandler: (keys, value, options) => {\n    const lookupKey = keys.join(\".\")\n    const varKey = keys.join(\"-\")\n\n    const { variable, reference } = cssVar(\n      varKey,\n      undefined,\n      options.cssVarPrefix,\n    )\n\n    return {\n      cssVars: {\n        [variable]: value,\n      },\n      cssMap: {\n        [lookupKey]: {\n          value,\n          var: variable,\n          varRef: reference,\n        },\n      },\n    }\n  },\n}\n"]},"metadata":{},"sourceType":"module"}