{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, tokenToCSSVar } from \"@chakra-ui/system\";\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\n\nexport var Wrap = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"spacing\", \"children\", \"justify\", \"direction\", \"align\", \"className\", \"shouldWrapChildren\"]);\n\n  var styles = React.useMemo(() => ({\n    \"--chakra-wrap-spacing\": theme => mapResponsive(spacing, value => tokenToCSSVar(\"space\", value)(theme)),\n    \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: justify,\n    alignItems: align,\n    flexDirection: direction,\n    listStyleType: \"none\",\n    padding: \"0\",\n    margin: \"calc(var(--wrap-spacing) * -1)\",\n    \"& > *:not(style)\": {\n      margin: \"var(--wrap-spacing)\"\n    }\n  }), [spacing, justify, align, direction]);\n  var childrenToRender = shouldWrapChildren ? React.Children.map(children, (child, index) => /*#__PURE__*/React.createElement(WrapItem, {\n    key: index\n  }, child)) : children;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    className: cx(\"chakra-wrap\", className)\n  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {\n    className: \"chakra-wrap__list\",\n    __css: styles\n  }, childrenToRender));\n});\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\";\n}\n\nexport var WrapItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\"]);\n\n  return /*#__PURE__*/React.createElement(chakra.li, _extends({\n    ref: ref,\n    __css: {\n      display: \"flex\",\n      alignItems: \"flex-start\"\n    },\n    className: cx(\"chakra-wrap__listitem\", className)\n  }, rest));\n});\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\";\n}","map":{"version":3,"sources":["../../src/wrap.tsx"],"names":["Wrap","forwardRef","spacing","shouldWrapChildren","rest","styles","theme","mapResponsive","value","tokenToCSSVar","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","margin","childrenToRender","index","cx","WrapItem","className"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n  tokenToCSSVar,\n} from \"@chakra-ui/system\"\nimport { cx, Dict, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   * @type SystemProps[\"flexDirection\"]\n   */\n  direction?: SystemProps[\"flexDirection\"]\n  /**\n   * If `true`, the children will be wrapped in a `WrapItem`\n   */\n  shouldWrapChildren?: boolean\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">((props, ref) => {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const styles = React.useMemo(\n    () => ({\n      \"--chakra-wrap-spacing\": (theme: Dict) =>\n        mapResponsive(spacing, (value) => tokenToCSSVar(\"space\", value)(theme)),\n      \"--wrap-spacing\": \"calc(var(--chakra-wrap-spacing) / 2)\",\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: justify,\n      alignItems: align,\n      flexDirection: direction,\n      listStyleType: \"none\",\n      padding: \"0\",\n      margin: \"calc(var(--wrap-spacing) * -1)\",\n      \"& > *:not(style)\": {\n        margin: \"var(--wrap-spacing)\",\n      },\n    }),\n    [spacing, justify, align, direction],\n  )\n\n  const childrenToRender = shouldWrapChildren\n    ? React.Children.map(children, (child, index) => (\n        <WrapItem key={index}>{child}</WrapItem>\n      ))\n    : children\n\n  return (\n    <chakra.div ref={ref} className={cx(\"chakra-wrap\", className)} {...rest}>\n      <chakra.ul className=\"chakra-wrap__list\" __css={styles}>\n        {childrenToRender}\n      </chakra.ul>\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">((props, ref) => {\n  const { className, ...rest } = props\n  return (\n    <chakra.li\n      ref={ref}\n      __css={{ display: \"flex\", alignItems: \"flex-start\" }}\n      className={cx(\"chakra-wrap__listitem\", className)}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"]},"metadata":{},"sourceType":"module"}