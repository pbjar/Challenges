{"ast":null,"code":"// This implementation is heavily inspired by react-aria's implementation\nimport * as React from \"react\";\nvar defaultIdContext = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0\n};\nvar IdContext = /*#__PURE__*/React.createContext(defaultIdContext);\nexport var IdProvider = /*#__PURE__*/React.memo(_ref => {\n  var {\n    children\n  } = _ref;\n  var currentContext = React.useContext(IdContext);\n  var isRoot = currentContext === defaultIdContext;\n  var context = React.useMemo(() => ({\n    prefix: isRoot ? 0 : ++currentContext.prefix,\n    current: 0\n  }), [isRoot, currentContext]);\n  return /*#__PURE__*/React.createElement(IdContext.Provider, {\n    value: context\n  }, children);\n});\nexport function useId(idProp, prefix) {\n  var context = React.useContext(IdContext);\n  return React.useMemo(() => idProp || [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"), // eslint-disable-next-line react-hooks/exhaustive-deps\n  [idProp, prefix]);\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  var id = useId(idProp);\n  return React.useMemo(() => {\n    return prefixes.map(prefix => prefix + \"-\" + id);\n  }, [id, prefixes]);\n}\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\n\nexport function useOptionalPart(partId) {\n  var [id, setId] = React.useState(null);\n  var ref = React.useCallback(node => {\n    setId(node ? partId : null);\n  }, [partId]);\n  return {\n    ref,\n    id,\n    isRendered: Boolean(id)\n  };\n}","map":{"version":3,"sources":["../../src/use-id.ts"],"names":["defaultIdContext","prefix","Math","current","IdContext","React","IdProvider","children","currentContext","isRoot","context","value","idProp","prefixes","id","useId","ref","node","setId","isRendered","Boolean"],"mappings":"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","sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n\nimport * as React from \"react\"\n\ntype IdContextValue = {\n  prefix: number\n  current: number\n}\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n}\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext)\n\nexport const IdProvider: React.FC = React.memo(({ children }) => {\n  const currentContext = React.useContext(IdContext)\n  const isRoot = currentContext === defaultIdContext\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRoot ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRoot, currentContext],\n  )\n\n  return React.createElement(IdContext.Provider, { value: context }, children)\n})\n\nexport function useId(idProp?: string, prefix?: string): string {\n  const context = React.useContext(IdContext)\n  return React.useMemo(\n    () =>\n      idProp ||\n      [prefix, context.prefix, ++context.current].filter(Boolean).join(\"-\"),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [idProp, prefix],\n  )\n}\n\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\nexport function useIds(idProp?: string, ...prefixes: string[]) {\n  const id = useId(idProp)\n  return React.useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\n/**\n * Used to generate an id, and after render, check if that id is rendered so we know\n * if we can use it in places such as `aria-labelledby`.\n *\n * @param partId - The unique id for the component part\n *\n * @example\n * const { ref, id } = useOptionalPart<HTMLInputElement>(`${id}-label`)\n */\nexport function useOptionalPart<T = any>(partId: string) {\n  const [id, setId] = React.useState<string | null>(null)\n  const ref = React.useCallback(\n    (node: T) => {\n      setId(node ? partId : null)\n    },\n    [partId],\n  )\n  return { ref, id, isRendered: Boolean(id) }\n}\n"]},"metadata":{},"sourceType":"module"}