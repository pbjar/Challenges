{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Icon } from \"@chakra-ui/icon\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { Collapse } from \"@chakra-ui/transition\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { AccordionProvider, useAccordion, useAccordionContext, useAccordionItem, AccordionDescendantsProvider } from \"./use-accordion\";\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/accordion\n */\n\nexport var Accordion = /*#__PURE__*/forwardRef((_ref, ref) => {\n  var {\n    children,\n    reduceMotion\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"reduceMotion\"]);\n\n  var styles = useMultiStyleConfig(\"Accordion\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useAccordion = useAccordion(ownProps),\n      {\n    htmlProps,\n    descendants\n  } = _useAccordion,\n      context = _objectWithoutPropertiesLoose(_useAccordion, [\"htmlProps\", \"descendants\"]);\n\n  var ctx = React.useMemo(() => _extends({}, context, {\n    reduceMotion: !!reduceMotion\n  }), [context, reduceMotion]);\n  return /*#__PURE__*/React.createElement(AccordionDescendantsProvider, {\n    value: descendants\n  }, /*#__PURE__*/React.createElement(AccordionProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion\", props.className)\n  }), children))));\n});\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\n\nvar [AccordionItemProvider, useAccordionItemContext] = createContext({\n  name: \"AccordionItemContext\",\n  errorMessage: \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \"\n});\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\n\nexport var AccordionItem = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    children,\n    className\n  } = props;\n\n  var _useAccordionItem = useAccordionItem(props),\n      {\n    htmlProps\n  } = _useAccordionItem,\n      context = _objectWithoutPropertiesLoose(_useAccordionItem, [\"htmlProps\"]);\n\n  var styles = useStyles();\n\n  var containerStyles = _extends({}, styles.container, {\n    overflowAnchor: \"none\"\n  });\n\n  var ctx = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(AccordionItemProvider, {\n    value: ctx\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, htmlProps, {\n    className: cx(\"chakra-accordion__item\", className),\n    __css: containerStyles\n  }), runIfFn(children, {\n    isExpanded: !!context.isOpen,\n    isDisabled: !!context.isDisabled\n  })));\n});\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\";\n}\n/**\n * React hook to get the state and actions of an accordion item\n */\n\n\nexport function useAccordionItemState() {\n  var {\n    isOpen,\n    isDisabled,\n    onClose,\n    onOpen\n  } = useAccordionItemContext();\n  return {\n    isOpen,\n    onClose,\n    isDisabled,\n    onOpen\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\n\nexport var AccordionButton = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getButtonProps\n  } = useAccordionItemContext();\n  var buttonProps = getButtonProps(props, ref);\n  var styles = useStyles();\n\n  var buttonStyles = _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    outline: 0\n  }, styles.button);\n\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({}, buttonProps, {\n    className: cx(\"chakra-accordion__button\", props.className),\n    __css: buttonStyles\n  }));\n});\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\n\n\nexport var AccordionPanel = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    reduceMotion\n  } = useAccordionContext();\n  var {\n    getPanelProps,\n    isOpen\n  } = useAccordionItemContext(); // remove `hidden` prop, 'coz we're using height animation\n\n  var panelProps = getPanelProps(props, ref);\n\n  var _className = cx(\"chakra-accordion__panel\", props.className);\n\n  var styles = useStyles();\n\n  if (!reduceMotion) {\n    delete panelProps.hidden;\n  }\n\n  var child = /*#__PURE__*/React.createElement(chakra.div, _extends({}, panelProps, {\n    __css: styles.panel,\n    className: _className\n  }));\n\n  if (!reduceMotion) {\n    return /*#__PURE__*/React.createElement(Collapse, {\n      in: isOpen\n    }, child);\n  }\n\n  return child;\n});\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\";\n}\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\n\n\nexport var AccordionIcon = props => {\n  var {\n    isOpen,\n    isDisabled\n  } = useAccordionItemContext();\n  var {\n    reduceMotion\n  } = useAccordionContext();\n\n  var _className = cx(\"chakra-accordion__icon\", props.className);\n\n  var styles = useStyles();\n\n  var iconStyles = _extends({\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\"\n  }, styles.icon);\n\n  return /*#__PURE__*/React.createElement(Icon, _extends({\n    viewBox: \"0 0 24 24\",\n    \"aria-hidden\": true,\n    className: _className,\n    __css: iconStyles\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"currentColor\",\n    d: \"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n  }));\n};\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\";\n}","map":{"version":3,"sources":["../../src/accordion.tsx"],"names":["Accordion","forwardRef","reduceMotion","props","styles","useMultiStyleConfig","ownProps","omitThemingProps","descendants","context","useAccordion","ctx","ref","cx","createContext","name","errorMessage","AccordionItem","className","htmlProps","useAccordionItem","useStyles","containerStyles","overflowAnchor","React","runIfFn","isExpanded","isDisabled","onOpen","useAccordionItemContext","AccordionButton","getButtonProps","buttonProps","buttonStyles","display","alignItems","width","outline","AccordionPanel","useAccordionContext","isOpen","panelProps","getPanelProps","_className","child","AccordionIcon","iconStyles","opacity","transform","transition","transformOrigin"],"mappings":"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","sourcesContent":["import { Icon, IconProps } from \"@chakra-ui/icon\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { Collapse } from \"@chakra-ui/transition\"\nimport { cx, Omit, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport { createContext, MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport {\n  AccordionProvider,\n  useAccordion,\n  useAccordionContext,\n  useAccordionItem,\n  UseAccordionItemProps,\n  UseAccordionItemReturn,\n  UseAccordionProps,\n  AccordionDescendantsProvider,\n} from \"./use-accordion\"\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion - The wrapper that provides context for all accordion items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionProps\n  extends UseAccordionProps,\n    Omit<HTMLChakraProps<\"div\">, keyof UseAccordionProps>,\n    ThemingProps<\"Accordion\"> {\n  /**\n   * If `true`, height animation and transitions will be disabled.\n   */\n  reduceMotion?: boolean\n}\n\n/**\n * The wrapper that provides context and focus management\n * for all accordion items.\n *\n * It wraps all accordion items in a `div` for better grouping.\n * @see Docs https://chakra-ui.com/accordion\n */\nexport const Accordion = forwardRef<AccordionProps, \"div\">(\n  ({ children, reduceMotion, ...props }, ref) => {\n    const styles = useMultiStyleConfig(\"Accordion\", props)\n    const ownProps = omitThemingProps(props)\n\n    const { htmlProps, descendants, ...context } = useAccordion(ownProps)\n\n    const ctx = React.useMemo(\n      () => ({ ...context, reduceMotion: !!reduceMotion }),\n      [context, reduceMotion],\n    )\n\n    return (\n      <AccordionDescendantsProvider value={descendants}>\n        <AccordionProvider value={ctx}>\n          <StylesProvider value={styles}>\n            <chakra.div\n              ref={ref}\n              {...htmlProps}\n              className={cx(\"chakra-accordion\", props.className)}\n            >\n              {children}\n            </chakra.div>\n          </StylesProvider>\n        </AccordionProvider>\n      </AccordionDescendantsProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  Accordion.displayName = \"Accordion\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item\n * -----------------------------------------------------------------------------------------------*/\n\ntype AccordionItemContext = Omit<UseAccordionItemReturn, \"htmlProps\">\n\nconst [\n  AccordionItemProvider,\n  useAccordionItemContext,\n] = createContext<AccordionItemContext>({\n  name: \"AccordionItemContext\",\n  errorMessage:\n    \"useAccordionItemContext: `context` is undefined. Seems you forgot to wrap the accordion item parts in `<AccordionItem />` \",\n})\n\nexport interface AccordionItemProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof UseAccordionItemProps>,\n    UseAccordionItemProps {\n  children?: MaybeRenderProp<{\n    isExpanded: boolean\n    isDisabled: boolean\n  }>\n}\n\n/**\n * AccordionItem is a single accordion that provides the open-close\n * behavior when the accordion button is clicked.\n *\n * It also provides context for the accordion button and panel.\n */\nexport const AccordionItem = forwardRef<AccordionItemProps, \"div\">(\n  (props, ref) => {\n    const { children, className } = props\n    const { htmlProps, ...context } = useAccordionItem(props)\n\n    const styles = useStyles()\n    const containerStyles: SystemStyleObject = {\n      ...styles.container,\n      overflowAnchor: \"none\",\n    }\n\n    const ctx = React.useMemo(() => context, [context])\n\n    return (\n      <AccordionItemProvider value={ctx}>\n        <chakra.div\n          ref={ref}\n          {...htmlProps}\n          className={cx(\"chakra-accordion__item\", className)}\n          __css={containerStyles}\n        >\n          {runIfFn(children, {\n            isExpanded: !!context.isOpen,\n            isDisabled: !!context.isDisabled,\n          })}\n        </chakra.div>\n      </AccordionItemProvider>\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionItem.displayName = \"AccordionItem\"\n}\n\n/**\n * React hook to get the state and actions of an accordion item\n */\nexport function useAccordionItemState() {\n  const { isOpen, isDisabled, onClose, onOpen } = useAccordionItemContext()\n  return { isOpen, onClose, isDisabled, onOpen }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Button\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionButtonProps extends HTMLChakraProps<\"button\"> {}\n\n/**\n * AccordionButton is used expands and collapses an accordion item.\n * It must be a child of `AccordionItem`.\n *\n * Note ðŸš¨: Each accordion button must be wrapped in an heading tag,\n * that is appropriate for the information architecture of the page.\n */\nexport const AccordionButton = forwardRef<AccordionButtonProps, \"button\">(\n  (props, ref) => {\n    const { getButtonProps } = useAccordionItemContext()\n    const buttonProps = getButtonProps(props, ref)\n\n    const styles = useStyles()\n    const buttonStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.button,\n    }\n\n    return (\n      <chakra.button\n        {...buttonProps}\n        className={cx(\"chakra-accordion__button\", props.className)}\n        __css={buttonStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  AccordionButton.displayName = \"AccordionButton\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Panel\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface AccordionPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * Accordion panel that holds the content for each accordion.\n * It shows and hides based on the state login from the `AccordionItem`.\n *\n * It uses the `Collapse` component to animate its height.\n */\nexport const AccordionPanel = forwardRef<AccordionPanelProps, \"div\">(\n  (props, ref) => {\n    const { reduceMotion } = useAccordionContext()\n    const { getPanelProps, isOpen } = useAccordionItemContext()\n\n    // remove `hidden` prop, 'coz we're using height animation\n    const panelProps = getPanelProps(props, ref)\n\n    const _className = cx(\"chakra-accordion__panel\", props.className)\n    const styles = useStyles()\n\n    if (!reduceMotion) {\n      delete panelProps.hidden\n    }\n\n    const child = (\n      <chakra.div {...panelProps} __css={styles.panel} className={_className} />\n    )\n\n    if (!reduceMotion) {\n      return <Collapse in={isOpen}>{child}</Collapse>\n    }\n\n    return child\n  },\n)\n\nif (__DEV__) {\n  AccordionPanel.displayName = \"AccordionPanel\"\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Accordion Item => Icon\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * AccordionIcon that gives a visual cue of the open/close state of the accordion item.\n * It rotates `180deg` based on the open/close state.\n */\nexport const AccordionIcon: React.FC<IconProps> = (props) => {\n  const { isOpen, isDisabled } = useAccordionItemContext()\n  const { reduceMotion } = useAccordionContext()\n\n  const _className = cx(\"chakra-accordion__icon\", props.className)\n  const styles = useStyles()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: isDisabled ? 0.4 : 1,\n    transform: isOpen ? \"rotate(-180deg)\" : undefined,\n    transition: reduceMotion ? undefined : \"transform 0.2s\",\n    transformOrigin: \"center\",\n    ...styles.icon,\n  }\n\n  return (\n    <Icon\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={_className}\n      __css={iconStyles}\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n      />\n    </Icon>\n  )\n}\n\nif (__DEV__) {\n  AccordionIcon.displayName = \"AccordionIcon\"\n}\n"]},"metadata":{},"sourceType":"module"}