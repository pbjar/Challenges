{"ast":null,"code":"import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n\n    if (this._pendingBatch == null) {\n      this._pendingBatch = [];\n    }\n\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this._pendingBatch.push(inflightRequest);\n\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        // Get teh current batch and clear it, so new requests\n        // go into the next batch\n        const batch = this._pendingBatch;\n        this._pendingBatch = null;\n        this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n        const request = batch.map(inflight => inflight.request);\n        this.emit(\"debug\", {\n          action: \"requestBatch\",\n          request: deepCopy(request),\n          provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request)).then(result => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: request,\n            response: result,\n            provider: this\n          }); // For each result, feed it to the correct Promise, depending\n          // on whether it was a success or error\n\n          batch.forEach((inflightRequest, index) => {\n            const payload = result[index];\n\n            if (payload.error) {\n              const error = new Error(payload.error.message);\n              error.code = payload.error.code;\n              error.data = payload.error.data;\n              inflightRequest.reject(error);\n            } else {\n              inflightRequest.resolve(payload.result);\n            }\n          });\n        }, error => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: request,\n            provider: this\n          });\n          batch.forEach(inflightRequest => {\n            inflightRequest.reject(error);\n          });\n        });\n      }, 10);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/json-rpc-batch-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=json-rpc-batch-provider.js.map"]},"metadata":{},"sourceType":"module"}