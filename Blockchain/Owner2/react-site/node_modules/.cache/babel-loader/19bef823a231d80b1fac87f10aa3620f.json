{"ast":null,"code":"import { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { Global, ThemeContext, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport * as React from \"react\";\nexport var ThemeProvider = props => {\n  var {\n    cssVarsRoot = \":host, :root\",\n    theme,\n    children\n  } = props;\n  var computedTheme = React.useMemo(() => toCSSVar(theme), [theme]);\n  return /*#__PURE__*/React.createElement(EmotionThemeProvider, {\n    theme: computedTheme\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: theme => ({\n      [cssVarsRoot]: theme.__cssVars\n    })\n  }), children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n\n  return theme;\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = () => {\n  var {\n    colorMode\n  } = useColorMode();\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: theme => {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/providers.tsx"],"names":["memoizedGet","ThemeProvider","props","cssVarsRoot","children","computedTheme","React","toCSSVar","theme","__cssVars","Error","createContext","name","errorMessage","GlobalStyle","colorMode","useColorMode","styleObjectOrFn","get","globalStyles","runIfFn","styles","css"],"mappings":"AAAA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,GAAA,EAAA,QAAA,QAAA,0BAAA;AAMA,SAAeA,WAAW,IAA1B,GAAA,EAAA,OAAA,QAAA,kBAAA;AACA,SAAA,aAAA,QAAA,wBAAA;AACA,SAAA,MAAA,EAAA,YAAA,EAIEC,aAAa,IAJf,oBAAA,QAAA,gBAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAUA,OAAO,IAAMA,aAAa,GAAIC,KAAD,IAA+B;AAC1D,MAAM;AAAEC,IAAAA,WAAW,GAAb,cAAA;AAAA,IAAA,KAAA;AAAuCC,IAAAA;AAAvC,MAAN,KAAA;AACA,MAAMC,aAAa,GAAGC,KAAK,CAALA,OAAAA,CAAc,MAAMC,QAAQ,CAA5BD,KAA4B,CAA5BA,EAAqC,CAA3D,KAA2D,CAArCA,CAAtB;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;AAAsB,IAAA,KAAK,EAAED;AAA7B,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAQ,IAAA,MAAM,EAAGG,KAAD,KAAiB;AAAE,OAAA,WAAA,GAAeA,KAAK,CAACC;AAAvB,KAAjB;AAAhB,GAAA,CADF,EADF,QACE,CADF;AAHK,CAAA;AAWP,OAAO,SAAA,QAAA,GAA6C;AAClD,MAAMD,KAAK,GAAGF,KAAK,CAALA,UAAAA,CAAd,YAAcA,CAAd;;AAGA,MAAI,CAAJ,KAAA,EAAY;AACV,UAAMI,KAAK,CAAX,kHAAW,CAAX;AAGD;;AAED,SAAA,KAAA;AACD;AAED,IAAM,CAAA,cAAA,EAAA,SAAA,IAA8BC,aAAa,CAA0B;AACzEC,EAAAA,IAAI,EADqE,eAAA;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAKA,SAAA,cAAA,EAAA,SAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,MAAM;AAC/B,MAAM;AAAEC,IAAAA;AAAF,MAAgBC,YAAtB,EAAA;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,MAAM,EAAGR,KAAD,IAAgB;AACtB,UAAMS,eAAe,GAAGC,GAAG,CAAA,KAAA,EAA3B,eAA2B,CAA3B;AACA,UAAMC,YAAY,GAAGC,OAAO,CAAA,eAAA,EAAkB;AAAA,QAAA,KAAA;AAASL,QAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAAJ,YAAA,EAAmB,OAAA,SAAA;AACnB,UAAMM,MAAM,GAAGC,GAAG,CAAHA,YAAG,CAAHA,CAAf,KAAeA,CAAf;AACA,aAAA,MAAA;AACD;AAPH,GAAA,CADF;AAFK,CAAA","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}