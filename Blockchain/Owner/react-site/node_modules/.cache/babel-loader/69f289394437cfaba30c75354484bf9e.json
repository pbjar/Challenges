{"ast":null,"code":"import { getLastItem } from \"./array\";\nimport { isNumber, isObject } from \"./assertion\";\nimport { fromEntries } from \"./object\";\n\nfunction analyzeCSSValue(value) {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n}\n\nexport function px(value) {\n  if (value == null) return value;\n  var {\n    unitless\n  } = analyzeCSSValue(value);\n  return unitless || isNumber(value) ? value + \"px\" : value;\n}\n\nvar sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;\n\nvar sortBps = breakpoints => fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue));\n\nfunction normalize(breakpoints) {\n  var sorted = sortBps(breakpoints);\n  return Object.assign(Object.values(sorted), sorted);\n}\n\nfunction keys(breakpoints) {\n  var value = Object.keys(sortBps(breakpoints));\n  return new Set(value);\n}\n\nfunction subtract(value) {\n  var _px;\n\n  if (!value) return value;\n  value = (_px = px(value)) != null ? _px : value;\n  var factor = value.endsWith(\"px\") ? -1 : // the equivalent of 1px in em using a 16px base\n  -0.0635;\n  return isNumber(value) ? \"\" + (value + factor) : value.replace(/([0-9]+\\.?[0-9]*)/, m => \"\" + (parseFloat(m) + factor));\n}\n\nfunction queryString(min, max) {\n  var query = [];\n  if (min) query.push(\"@media screen and (min-width: \" + px(min) + \")\");\n  if (query.length > 0 && max) query.push(\"and\");\n  if (max) query.push(\"@media screen and (max-width: \" + px(max) + \")\");\n  return query.join(\" \");\n}\n\nexport function analyzeBreakpoints(breakpoints) {\n  var _breakpoints$base;\n\n  if (!breakpoints) return null;\n  breakpoints.base = (_breakpoints$base = breakpoints.base) != null ? _breakpoints$base : \"0px\";\n  var normalized = normalize(breakpoints);\n  var queries = Object.entries(breakpoints).sort(sortByBreakpointValue).map((_ref, index, entry) => {\n    var _entry;\n\n    var [breakpoint, minW] = _ref;\n    var [, maxW] = (_entry = entry[index + 1]) != null ? _entry : [];\n    maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined;\n    return {\n      breakpoint,\n      minW,\n      maxW,\n      maxWQuery: queryString(null, maxW),\n      minWQuery: queryString(minW),\n      minMaxQuery: queryString(minW, maxW)\n    };\n  });\n\n  var _keys = keys(breakpoints);\n\n  var _keysArr = Array.from(_keys.values());\n\n  return {\n    keys: _keys,\n    normalized,\n\n    isResponsive(test) {\n      var keys = Object.keys(test);\n      return keys.length > 0 && keys.every(key => _keys.has(key));\n    },\n\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map(minW => queryString(minW)).slice(1)],\n\n    toArrayValue(test) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\");\n      }\n\n      var result = _keysArr.map(bp => {\n        var _test$bp;\n\n        return (_test$bp = test[bp]) != null ? _test$bp : null;\n      });\n\n      while (getLastItem(result) === null) {\n        result.pop();\n      }\n\n      return result;\n    },\n\n    toObjectValue(test) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\");\n      }\n\n      return test.reduce((acc, value, index) => {\n        var key = _keysArr[index];\n        if (key != null && value != null) acc[key] = value;\n        return acc;\n      }, {});\n    }\n\n  };\n}","map":{"version":3,"sources":["../../src/breakpoint.ts"],"names":["num","parseFloat","value","unit","String","unitless","analyzeCSSValue","isNumber","sortByBreakpointValue","parseInt","a","b","sortBps","breakpoints","fromEntries","Object","sorted","px","factor","m","query","normalized","normalize","queries","entry","index","maxW","subtract","maxWQuery","queryString","minWQuery","minMaxQuery","_keys","keys","_keysArr","Array","isResponsive","key","asObject","asArray","details","media","minW","toArrayValue","isObject","result","bp","test","getLastItem","toObjectValue","acc"],"mappings":"AAAA,SAAA,WAAA,QAAA,SAAA;AACA,SAAA,QAAA,EAAA,QAAA,QAAA,aAAA;AACA,SAAA,WAAA,QAAA,UAAA;;AAGA,SAAA,eAAA,CAAA,KAAA,EAAiD;AAC/C,MAAMA,GAAG,GAAGC,UAAU,CAACC,KAAK,CAA5B,QAAuBA,EAAD,CAAtB;AACA,MAAMC,IAAI,GAAGD,KAAK,CAALA,QAAAA,GAAAA,OAAAA,CAAyBE,MAAM,CAA/BF,GAA+B,CAA/BA,EAAb,EAAaA,CAAb;AACA,SAAO;AAAEG,IAAAA,QAAQ,EAAE,CAAZ,IAAA;AAAmBH,IAAAA,KAAK,EAAxB,GAAA;AAA+BC,IAAAA;AAA/B,GAAP;AACD;;AAED,OAAO,SAAA,EAAA,CAAA,KAAA,EAA0D;AAC/D,MAAID,KAAK,IAAT,IAAA,EAAmB,OAAA,KAAA;AACnB,MAAM;AAAEG,IAAAA;AAAF,MAAeC,eAAe,CAApC,KAAoC,CAApC;AACA,SAAOD,QAAQ,IAAIE,QAAQ,CAApBF,KAAoB,CAApBA,GAAiCH,KAAjCG,GAAAA,IAAAA,GAAP,KAAA;AACD;;AAED,IAAMG,qBAAqB,GAAG,CAAA,CAAA,EAAA,CAAA,KAC5BC,QAAQ,CAACC,CAAC,CAAF,CAAE,CAAF,EAARD,EAAQ,CAARA,GAAqBA,QAAQ,CAACE,CAAC,CAAF,CAAE,CAAF,EAA7BF,EAA6B,CAA7BA,GAAAA,CAAAA,GAA8C,CADhD,CAAA;;AAGA,IAAMG,OAAO,GAAIC,WAAD,IACdC,WAAW,CAACC,MAAM,CAANA,OAAAA,CAAAA,WAAAA,EAAAA,IAAAA,CADd,qBACcA,CAAD,CADb;;AAGA,SAAA,SAAA,CAAA,WAAA,EAAsC;AACpC,MAAMC,MAAM,GAAGJ,OAAO,CAAtB,WAAsB,CAAtB;AACA,SAAOG,MAAM,CAANA,MAAAA,CAAcA,MAAM,CAANA,MAAAA,CAAdA,MAAcA,CAAdA,EAAP,MAAOA,CAAP;AACD;;AAED,SAAA,IAAA,CAAA,WAAA,EAAiC;AAC/B,MAAMb,KAAK,GAAGa,MAAM,CAANA,IAAAA,CAAYH,OAAO,CAAjC,WAAiC,CAAnBG,CAAd;AACA,SAAO,IAAA,GAAA,CAAP,KAAO,CAAP;AACD;;AAED,SAAA,QAAA,CAAA,KAAA,EAAiC;AAAA,MAAA,GAAA;;AAC/B,MAAI,CAAJ,KAAA,EAAY,OAAA,KAAA;AACZb,EAAAA,KAAK,GAAA,CAAA,GAAA,GAAGe,EAAE,CAAL,KAAK,CAAL,KAAA,IAAA,GAAA,GAAA,GAALf,KAAAA;AACA,MAAMgB,MAAM,GAAGhB,KAAK,CAALA,QAAAA,CAAAA,IAAAA,IACX,CADWA,CAAAA,GAEX;AACA,GAHJ,MAAA;AAIA,SAAOK,QAAQ,CAARA,KAAQ,CAARA,GAAAA,MACAL,KAAK,GADLK,MAAAA,CAAAA,GAEHL,KAAK,CAALA,OAAAA,CAAAA,mBAAAA,EAA+BiB,CAAD,IAAA,MAAUlB,UAAU,CAAVA,CAAU,CAAVA,GAF5C,MAEkC,CAA9BC,CAFJ;AAGD;;AAED,SAAA,WAAA,CAAA,GAAA,EAAA,GAAA,EAAuD;AACrD,MAAMkB,KAAK,GAAX,EAAA;AAEA,MAAA,GAAA,EAASA,KAAK,CAALA,IAAAA,CAAAA,mCAA4CH,EAAE,CAA9CG,GAA8C,CAA9CA,GAAAA,GAAAA;AACT,MAAIA,KAAK,CAALA,MAAAA,GAAAA,CAAAA,IAAJ,GAAA,EAA6BA,KAAK,CAALA,IAAAA,CAAAA,KAAAA;AAC7B,MAAA,GAAA,EAASA,KAAK,CAALA,IAAAA,CAAAA,mCAA4CH,EAAE,CAA9CG,GAA8C,CAA9CA,GAAAA,GAAAA;AAET,SAAOA,KAAK,CAALA,IAAAA,CAAP,GAAOA,CAAP;AACD;;AAED,OAAO,SAAA,kBAAA,CAAA,WAAA,EAA+C;AAAA,MAAA,iBAAA;;AACpD,MAAI,CAAJ,WAAA,EAAkB,OAAA,IAAA;AAElBP,EAAAA,WAAW,CAAXA,IAAAA,GAAAA,CAAAA,iBAAAA,GAAmBA,WAAW,CAA9BA,IAAAA,KAAAA,IAAAA,GAAAA,iBAAAA,GAAAA,KAAAA;AAEA,MAAMQ,UAAU,GAAGC,SAAS,CAA5B,WAA4B,CAA5B;AAEA,MAAMC,OAAO,GAAG,MAAM,CAAN,OAAA,CAAA,WAAA,EAAA,IAAA,CAAA,qBAAA,EAAA,GAAA,CAET,CAAA,IAAA,EAAA,KAAA,EAAA,KAAA,KAAsC;AAAA,QAAA,MAAA;;AAAA,QAArC,CAAA,UAAA,EAAA,IAAA,IAAqC,IAAA;AACzC,QAAI,GAAA,IAAA,IAAA,CAAA,MAAA,GAAWC,KAAK,CAACC,KAAK,GAAtB,CAAgB,CAAhB,KAAA,IAAA,GAAA,MAAA,GAAJ,EAAA;AACAC,IAAAA,IAAI,GAAGzB,UAAU,CAAVA,IAAU,CAAVA,GAAAA,CAAAA,GAAuB0B,QAAQ,CAA/B1B,IAA+B,CAA/BA,GAAPyB,SAAAA;AACA,WAAO;AAAA,MAAA,UAAA;AAAA,MAAA,IAAA;AAAA,MAAA,IAAA;AAILE,MAAAA,SAAS,EAAEC,WAAW,CAAA,IAAA,EAJjB,IAIiB,CAJjB;AAKLC,MAAAA,SAAS,EAAED,WAAW,CALjB,IAKiB,CALjB;AAMLE,MAAAA,WAAW,EAAEF,WAAW,CAAA,IAAA,EAAA,IAAA;AANnB,KAAP;AALJ,GAAgB,CAAhB;;AAeA,MAAMG,KAAK,GAAGC,IAAI,CAAlB,WAAkB,CAAlB;;AACA,MAAMC,QAAQ,GAAGC,KAAK,CAALA,IAAAA,CAAWH,KAAK,CAAjC,MAA4BA,EAAXG,CAAjB;;AAEA,SAAO;AACLF,IAAAA,IAAI,EADC,KAAA;AAAA,IAAA,UAAA;;AAGLG,IAAAA,YAAY,CAAA,IAAA,EAAa;AACvB,UAAMH,IAAI,GAAGlB,MAAM,CAANA,IAAAA,CAAb,IAAaA,CAAb;AACA,aAAOkB,IAAI,CAAJA,MAAAA,GAAAA,CAAAA,IAAmBA,IAAI,CAAJA,KAAAA,CAAYI,GAAD,IAASL,KAAK,CAALA,GAAAA,CAA9C,GAA8CA,CAApBC,CAA1B;AALG,KAAA;;AAOLK,IAAAA,QAAQ,EAAE1B,OAAO,CAPZ,WAOY,CAPZ;AAQL2B,IAAAA,OAAO,EAAEjB,SAAS,CARb,WAQa,CARb;AASLkB,IAAAA,OAAO,EATF,OAAA;AAULC,IAAAA,KAAK,EAAE,CAAA,IAAA,EAAO,GAAGpB,UAAU,CAAVA,GAAAA,CAAgBqB,IAAD,IAAUb,WAAW,CAApCR,IAAoC,CAApCA,EAAAA,KAAAA,CAVZ,CAUYA,CAAV,CAVF;;AAWLsB,IAAAA,YAAY,CAAA,IAAA,EAAa;AACvB,UAAI,CAACC,QAAQ,CAAb,IAAa,CAAb,EAAqB;AACnB,cAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AACD;;AACD,UAAMC,MAAM,GAAG,QAAQ,CAAR,GAAA,CAAcC,EAAD,IAAA;AAAA,YAAA,QAAA;;AAAA,eAAA,CAAA,QAAA,GAAQC,IAAI,CAAZ,EAAY,CAAZ,KAAA,IAAA,GAAA,QAAA,GAAA,IAAA;AAA5B,OAAe,CAAf;;AACA,aAAOC,WAAW,CAAXA,MAAW,CAAXA,KAAP,IAAA,EAAqC;AACnCH,QAAAA,MAAM,CAANA,GAAAA;AACD;;AACD,aAAA,MAAA;AAnBG,KAAA;;AAqBLI,IAAAA,aAAa,CAAA,IAAA,EAAc;AACzB,UAAI,CAACd,KAAK,CAALA,OAAAA,CAAL,IAAKA,CAAL,EAA0B;AACxB,cAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AACD;;AACD,aAAO,IAAI,CAAJ,MAAA,CAAY,CAAA,GAAA,EAAA,KAAA,EAAA,KAAA,KAAuB;AACxC,YAAME,GAAG,GAAGH,QAAQ,CAApB,KAAoB,CAApB;AACA,YAAIG,GAAG,IAAHA,IAAAA,IAAenC,KAAK,IAAxB,IAAA,EAAkCgD,GAAG,CAAHA,GAAG,CAAHA,GAAAA,KAAAA;AAClC,eAAA,GAAA;AAHK,OAAA,EAAP,EAAO,CAAP;AAKD;;AA9BI,GAAP;AAgCD","sourcesContent":["import { getLastItem } from \"./array\"\nimport { isNumber, isObject } from \"./assertion\"\nimport { fromEntries } from \"./object\"\nimport { Dict } from \"./types\"\n\nfunction analyzeCSSValue(value: number | string) {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nexport function px(value: number | string | null): string | null {\n  if (value == null) return value\n  const { unitless } = analyzeCSSValue(value)\n  return unitless || isNumber(value) ? `${value}px` : value\n}\n\nconst sortByBreakpointValue = (a: any[], b: any[]) =>\n  parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1\n\nconst sortBps = (breakpoints: Dict): Dict =>\n  fromEntries(Object.entries(breakpoints).sort(sortByBreakpointValue))\n\nfunction normalize(breakpoints: Dict) {\n  const sorted = sortBps(breakpoints)\n  return Object.assign(Object.values(sorted), sorted) as string[]\n}\n\nfunction keys(breakpoints: Dict) {\n  const value = Object.keys(sortBps(breakpoints))\n  return new Set(value)\n}\n\nfunction subtract(value: string) {\n  if (!value) return value\n  value = px(value) ?? value\n  const factor = value.endsWith(\"px\")\n    ? -1\n    : // the equivalent of 1px in em using a 16px base\n      -0.0635\n  return isNumber(value)\n    ? `${value + factor}`\n    : value.replace(/(\\d+\\.?\\d*)/u, (m) => `${parseFloat(m) + factor}`)\n}\n\nfunction queryString(min: string | null, max?: string) {\n  const query = []\n\n  if (min) query.push(`@media screen and (min-width: ${px(min)})`)\n  if (query.length > 0 && max) query.push(\"and\")\n  if (max) query.push(`@media screen and (max-width: ${px(max)})`)\n\n  return query.join(\" \")\n}\n\nexport function analyzeBreakpoints(breakpoints: Dict) {\n  if (!breakpoints) return null\n\n  breakpoints.base = breakpoints.base ?? \"0px\"\n\n  const normalized = normalize(breakpoints)\n\n  const queries = Object.entries(breakpoints)\n    .sort(sortByBreakpointValue)\n    .map(([breakpoint, minW], index, entry) => {\n      let [, maxW] = entry[index + 1] ?? []\n      maxW = parseFloat(maxW) > 0 ? subtract(maxW) : undefined\n      return {\n        breakpoint,\n        minW,\n        maxW,\n        maxWQuery: queryString(null, maxW),\n        minWQuery: queryString(minW),\n        minMaxQuery: queryString(minW, maxW),\n      }\n    })\n\n  const _keys = keys(breakpoints)\n  const _keysArr = Array.from(_keys.values())\n\n  return {\n    keys: _keys,\n    normalized,\n    isResponsive(test: Dict) {\n      const keys = Object.keys(test)\n      return keys.length > 0 && keys.every((key) => _keys.has(key))\n    },\n    asObject: sortBps(breakpoints),\n    asArray: normalize(breakpoints),\n    details: queries,\n    media: [null, ...normalized.map((minW) => queryString(minW)).slice(1)],\n    toArrayValue(test: Dict) {\n      if (!isObject(test)) {\n        throw new Error(\"toArrayValue: value must be an object\")\n      }\n      const result = _keysArr.map((bp) => test[bp] ?? null)\n      while (getLastItem(result) === null) {\n        result.pop()\n      }\n      return result\n    },\n    toObjectValue(test: any[]) {\n      if (!Array.isArray(test)) {\n        throw new Error(\"toObjectValue: value must be an array\")\n      }\n      return test.reduce((acc, value, index) => {\n        const key = _keysArr[index]\n        if (key != null && value != null) acc[key] = value\n        return acc\n      }, {} as Dict)\n    },\n  }\n}\n\nexport type AnalyzeBreakpointsReturn = ReturnType<typeof analyzeBreakpoints>\n"]},"metadata":{},"sourceType":"module"}