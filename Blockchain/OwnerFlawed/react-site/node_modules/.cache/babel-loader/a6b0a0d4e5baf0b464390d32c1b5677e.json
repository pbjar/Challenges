{"ast":null,"code":"import { useWeb3React } from '@web3-react/core';\nimport { useCallback } from 'react';\nimport { useConfig } from '../providers/config/context';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nexport function useEthers() {\n  const result = useWeb3React();\n  const {\n    supportedChains\n  } = useConfig();\n  const activateBrowserWallet = useCallback(async (onError, throwErrors) => {\n    const injected = new InjectedConnector({\n      supportedChainIds: supportedChains\n    });\n\n    if (onError instanceof Function) {\n      await result.activate(injected, onError, throwErrors);\n    } else {\n      await result.activate(injected, undefined, throwErrors);\n    }\n  }, [supportedChains]);\n  return Object.assign(Object.assign({}, result), {\n    activateBrowserWallet\n  });\n}","map":{"version":3,"sources":["../../../../src/hooks/useEthers.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,kBAA7B;AAGA,SAAS,WAAT,QAA4B,OAA5B;AACA,SAAS,SAAT,QAA0B,6BAA1B;AACA,SAAS,iBAAT,QAAkC,gCAAlC;AAUA,OAAM,SAAU,SAAV,GAAmB;AACvB,QAAM,MAAM,GAAG,YAAY,EAA3B;AACA,QAAM;AAAE,IAAA;AAAF,MAAsB,SAAS,EAArC;AACA,QAAM,qBAAqB,GAAG,WAAW,CACvC,OAAO,OAAP,EAAgB,WAAhB,KAA+B;AAC7B,UAAM,QAAQ,GAAG,IAAI,iBAAJ,CAAsB;AAAE,MAAA,iBAAiB,EAAE;AAArB,KAAtB,CAAjB;;AACA,QAAI,OAAO,YAAY,QAAvB,EAAiC;AAC/B,YAAM,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAA0B,OAA1B,EAAmC,WAAnC,CAAN;AACD,KAFD,MAEO;AACL,YAAM,MAAM,CAAC,QAAP,CAAgB,QAAhB,EAA0B,SAA1B,EAAqC,WAArC,CAAN;AACD;AACF,GARsC,EASvC,CAAC,eAAD,CATuC,CAAzC;AAWA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,MAAZ,CAAA,EAAkB;AAAE,IAAA;AAAF,GAAlB,CAAA;AACD","sourceRoot":"","sourcesContent":["import { useWeb3React } from '@web3-react/core';\nimport { useCallback } from 'react';\nimport { useConfig } from '../providers/config/context';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nexport function useEthers() {\n    const result = useWeb3React();\n    const { supportedChains } = useConfig();\n    const activateBrowserWallet = useCallback(async (onError, throwErrors) => {\n        const injected = new InjectedConnector({ supportedChainIds: supportedChains });\n        if (onError instanceof Function) {\n            await result.activate(injected, onError, throwErrors);\n        }\n        else {\n            await result.activate(injected, undefined, throwErrors);\n        }\n    }, [supportedChains]);\n    return Object.assign(Object.assign({}, result), { activateBrowserWallet });\n}\n//# sourceMappingURL=useEthers.js.map"]},"metadata":{},"sourceType":"module"}