{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nconst ABI = ['function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'];\nexport async function multicall(provider, address, blockNumber, requests) {\n  var _a;\n\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const [, results] = await contract.aggregate(requests.map(({\n    address,\n    data\n  }) => [address, data]), {\n    blockTag: blockNumber\n  });\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const result = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = result;\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/multicall.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,0BAAzB;AAKA,MAAM,GAAG,GAAG,CACV,0HADU,CAAZ;AAIA,OAAO,eAAe,SAAf,CACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK,EAIgB;;;AAErB,MAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,EAAP;AACD;;AACD,QAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CAAjB;AACA,QAAM,GAAG,OAAH,IAAqC,MAAM,QAAQ,CAAC,SAAT,CAC/C,QAAQ,CAAC,GAAT,CAAa,CAAC;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAAD,KAAuB,CAAC,OAAD,EAAU,IAAV,CAApC,CAD+C,EAE/C;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAF+C,CAAjD;AAIA,QAAM,KAAK,GAAe,EAA1B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,UAAM;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,QAAoB,QAAQ,CAAC,CAAD,CAAlC;AACA,UAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;AACA,UAAM,eAAe,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,OAAD,CAAR,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,EAA1C;AACA,IAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,MAAxB;AACA,IAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;AACD;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nconst ABI = [\n    'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)',\n];\nexport async function multicall(provider, address, blockNumber, requests) {\n    var _a;\n    if (requests.length === 0) {\n        return {};\n    }\n    const contract = new Contract(address, ABI, provider);\n    const [, results] = await contract.aggregate(requests.map(({ address, data }) => [address, data]), { blockTag: blockNumber });\n    const state = {};\n    for (let i = 0; i < requests.length; i++) {\n        const { address, data } = requests[i];\n        const result = results[i];\n        const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n        stateForAddress[data] = result;\n        state[address] = stateForAddress;\n    }\n    return state;\n}\n//# sourceMappingURL=multicall.js.map"]},"metadata":{},"sourceType":"module"}