{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useButtonGroup } from \"./button-group\";\nimport { ButtonSpinner } from \"./button-spinner\";\nimport { ButtonIcon } from \"./button-icon\";\nimport { useButtonType } from \"./use-button-type\";\nexport var Button = /*#__PURE__*/forwardRef((props, ref) => {\n  var group = useButtonGroup();\n  var styles = useStyleConfig(\"Button\", _extends({}, group, props));\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"isDisabled\", \"isLoading\", \"isActive\", \"isFullWidth\", \"children\", \"leftIcon\", \"rightIcon\", \"loadingText\", \"iconSpacing\", \"type\", \"spinner\", \"spinnerPlacement\", \"className\", \"as\"]);\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n\n\n  var buttonStyles = React.useMemo(() => {\n    var _styles$_focus;\n\n    var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles[\"_focus\"]) != null ? _styles$_focus : {}, {\n      zIndex: 1\n    });\n\n    return _extends({\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\"\n    }, styles, !!group && {\n      _focus\n    });\n  }, [styles, group, isFullWidth]);\n  var {\n    ref: _ref,\n    type: defaultType\n  } = useButtonType(as);\n  var contentProps = {\n    rightIcon,\n    leftIcon,\n    iconSpacing,\n    children\n  };\n  return /*#__PURE__*/React.createElement(chakra.button, _extends({\n    disabled: isDisabled || isLoading,\n    ref: mergeRefs(ref, _ref),\n    as: as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className)\n  }, rest), isLoading && spinnerPlacement === \"start\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--start\",\n    label: loadingText,\n    placement: \"start\"\n  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {\n    opacity: 0\n  }, /*#__PURE__*/React.createElement(ButtonContent, contentProps)) : /*#__PURE__*/React.createElement(ButtonContent, contentProps), isLoading && spinnerPlacement === \"end\" && /*#__PURE__*/React.createElement(ButtonSpinner, {\n    className: \"chakra-button__spinner--end\",\n    label: loadingText,\n    placement: \"end\"\n  }, spinner));\n});\n\nif (__DEV__) {\n  Button.displayName = \"Button\";\n}\n\nfunction ButtonContent(props) {\n  var {\n    leftIcon,\n    rightIcon,\n    children,\n    iconSpacing\n  } = props;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, leftIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginEnd: iconSpacing\n  }, leftIcon), children, rightIcon && /*#__PURE__*/React.createElement(ButtonIcon, {\n    marginStart: iconSpacing\n  }, rightIcon));\n}","map":{"version":3,"sources":["../../src/button.tsx"],"names":["Button","forwardRef","group","useButtonGroup","styles","useStyleConfig","isDisabled","iconSpacing","spinnerPlacement","as","rest","omitThemingProps","buttonStyles","_focus","mergeWith","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","width","isFullWidth","ref","type","defaultType","useButtonType","contentProps","children","mergeRefs","dataAttr","cx","isLoading","loadingText","leftIcon","rightIcon"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,SAAA,QAAA,wBAAA;AACA,SAAA,MAAA,EAAA,UAAA,EAAA,gBAAA,EAAA,cAAA,QAAA,mBAAA;AAUA,SAAA,EAAA,EAAA,QAAA,EAAA,SAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,gBAAA;AACA,SAAA,aAAA,QAAA,kBAAA;AACA,SAAA,UAAA,QAAA,eAAA;AACA,SAAA,aAAA,QAAA,mBAAA;AA4DA,OAAO,IAAMA,MAAM,GAAA,aAAGC,UAAU,CAAwB,CAAA,KAAA,EAAA,GAAA,KAAgB;AACtE,MAAMC,KAAK,GAAGC,cAAd,EAAA;AACA,MAAMC,MAAM,GAAGC,cAAc,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAA7B,KAA6B,CAAA,CAA7B;;AAEA,MAAA,iBAAA,GAgBIM,gBAAgB,CAhBpB,KAgBoB,CAhBpB;AAAA,MAAM;AACJL,IAAAA,UAAU,GAAGJ,KAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,KAAK,CADd,UAAA;AAAA,IAAA,SAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAA,IAAA,QAAA;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAA,IAAA,WAAA;AASJK,IAAAA,WAAW,GATP,QAAA;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAYJC,IAAAA,gBAAgB,GAZZ,OAAA;AAAA,IAAA,SAAA;AAcJC,IAAAA;AAdI,MAAN,iBAAA;AAAA,MAeKC,IAfL,GAAA,6BAAA,CAAA,iBAAA,EAAA,CAAA,YAAA,EAAA,WAAA,EAAA,UAAA,EAAA,aAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,aAAA,EAAA,aAAA,EAAA,MAAA,EAAA,SAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,IAAA,CAAA,CAAA;AAkBA;AACF;AACA;AACA;AACA;AACA;;;AACE,MAAME,YAA+B,GAAG,KAAK,CAAL,OAAA,CAAc,MAAM;AAAA,QAAA,cAAA;;AAC1D,QAAMC,MAAM,GAAGC,SAAS,CAAA,EAAA,EAAA,CAAA,cAAA,GAAKV,MAAL,IAAA,IAAKA,GAAL,KAAA,CAAKA,GAAAA,MAAM,CAAX,QAAW,CAAX,KAAA,IAAA,GAAA,cAAA,GAAA,EAAA,EAA+B;AAAEW,MAAAA,MAAM,EAAE;AAAV,KAA/B,CAAxB;;AACA,WAAA,QAAA,CAAA;AACEC,MAAAA,OAAO,EADT,aAAA;AAEEC,MAAAA,UAAU,EAFZ,MAAA;AAGEC,MAAAA,UAAU,EAHZ,QAAA;AAIEC,MAAAA,cAAc,EAJhB,QAAA;AAKEC,MAAAA,UAAU,EALZ,MAAA;AAMEC,MAAAA,QAAQ,EANV,UAAA;AAOEC,MAAAA,UAAU,EAPZ,QAAA;AAQEC,MAAAA,aAAa,EARf,QAAA;AASEC,MAAAA,OAAO,EATT,MAAA;AAUEC,MAAAA,KAAK,EAAEC,WAAW,GAAA,MAAA,GAAY;AAVhC,KAAA,EAAA,MAAA,EAYM,CAAC,CAAD,KAAA,IAAW;AAAEb,MAAAA;AAAF,KAZjB,CAAA;AAFsC,GAAA,EAgBrC,CAAA,MAAA,EAAA,KAAA,EAhBH,WAgBG,CAhBqC,CAAxC;AAkBA,MAAM;AAAEc,IAAAA,GAAG,EAAL,IAAA;AAAaC,IAAAA,IAAI,EAAEC;AAAnB,MAAmCC,aAAa,CAAtD,EAAsD,CAAtD;AAEA,MAAMC,YAAY,GAAG;AAAA,IAAA,SAAA;AAAA,IAAA,QAAA;AAAA,IAAA,WAAA;AAAoCC,IAAAA;AAApC,GAArB;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,QAAQ,EAAE1B,UAAU,IADtB,SAAA;AAEE,IAAA,GAAG,EAAE2B,SAAS,CAAA,GAAA,EAFhB,IAEgB,CAFhB;AAGE,IAAA,EAAE,EAHJ,EAAA;AAIE,IAAA,IAAI,EAAEL,IAAF,IAAA,IAAEA,GAAF,IAAEA,GAJR,WAAA;AAKE,mBAAaM,QAAQ,CALvB,QAKuB,CALvB;AAME,oBAAcA,QAAQ,CANxB,SAMwB,CANxB;AAOE,IAAA,KAAK,EAPP,YAAA;AAQE,IAAA,SAAS,EAAEC,EAAE,CAAA,eAAA,EAAA,SAAA;AARf,GAAA,EAAA,IAAA,CAAA,EAWGC,SAAS,IAAI5B,gBAAgB,KAA7B4B,OAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,IAAA,SAAS,EADX,+BAAA;AAEE,IAAA,KAAK,EAFP,WAAA;AAGE,IAAA,SAAS,EAAC;AAHZ,GAAA,EAZJ,OAYI,CAZJ,EAqBGA,SAAS,GACRC,WAAW,IAAA,aACT,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,IAAA,EAAA;AAAa,IAAA,OAAO,EAAE;AAAtB,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,aAAA,EAHI,YAGJ,CADF,CAFM,GAAA,aAOR,KAAA,CAAA,aAAA,CAAA,aAAA,EA5BJ,YA4BI,CA5BJ,EA+BGD,SAAS,IAAI5B,gBAAgB,KAA7B4B,KAAAA,IAAAA,aACC,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA;AACE,IAAA,SAAS,EADX,6BAAA;AAEE,IAAA,KAAK,EAFP,WAAA;AAGE,IAAA,SAAS,EAAC;AAHZ,GAAA,EAjCN,OAiCM,CAhCJ,CADF;AAlDK,CAAyB,CAAzB;;AA+FP,IAAA,OAAA,EAAa;AACXpC,EAAAA,MAAM,CAANA,WAAAA,GAAAA,QAAAA;AACD;;AAOD,SAAA,aAAA,CAAA,KAAA,EAAkD;AAChD,MAAM;AAAA,IAAA,QAAA;AAAA,IAAA,SAAA;AAAA,IAAA,QAAA;AAAiCO,IAAAA;AAAjC,MAAN,KAAA;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACG+B,QAAQ,IAAA,aAAI,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,SAAS,EAAE/B;AAAvB,GAAA,EADf,QACe,CADf,EAAA,QAAA,EAGGgC,SAAS,IAAA,aACR,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,WAAW,EAAEhC;AAAzB,GAAA,EALN,SAKM,CAJJ,CADF;AASD","sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n  /**\n   * It determines the placement of the spinner when isLoading is true\n   * @default \"start\"\n   */\n  spinnerPlacement?: \"start\" | \"end\"\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = React.useMemo(() => {\n    const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      width: isFullWidth ? \"100%\" : \"auto\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group, isFullWidth])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={mergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}