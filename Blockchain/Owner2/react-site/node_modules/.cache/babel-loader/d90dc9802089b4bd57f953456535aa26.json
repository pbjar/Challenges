{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = queries.map(function (options) {\n    var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions.optimisticResults = true;\n    return defaultedOptions;\n  });\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner2/react-site/node_modules/react-query/es/react/useQueries.js"],"names":["React","notifyManager","QueriesObserver","useQueryClient","useQueries","queries","mountedRef","useRef","_React$useState","useState","forceUpdate","queryClient","defaultedQueries","map","options","defaultedOptions","defaultQueryObserverOptions","optimisticResults","_React$useState2","observer","result","getOptimisticResult","useEffect","current","unsubscribe","subscribe","batchCalls","x","setQueries","listeners"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AAClC,MAAIC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAa,KAAb,CAAjB;;AAEA,MAAIC,eAAe,GAAGR,KAAK,CAACS,QAAN,CAAe,CAAf,CAAtB;AAAA,MACIC,WAAW,GAAGF,eAAe,CAAC,CAAD,CADjC;;AAGA,MAAIG,WAAW,GAAGR,cAAc,EAAhC;AACA,MAAIS,gBAAgB,GAAGP,OAAO,CAACQ,GAAR,CAAY,UAAUC,OAAV,EAAmB;AACpD,QAAIC,gBAAgB,GAAGJ,WAAW,CAACK,2BAAZ,CAAwCF,OAAxC,CAAvB,CADoD,CACqB;;AAEzEC,IAAAA,gBAAgB,CAACE,iBAAjB,GAAqC,IAArC;AACA,WAAOF,gBAAP;AACD,GALsB,CAAvB;;AAOA,MAAIG,gBAAgB,GAAGlB,KAAK,CAACS,QAAN,CAAe,YAAY;AAChD,WAAO,IAAIP,eAAJ,CAAoBS,WAApB,EAAiCC,gBAAjC,CAAP;AACD,GAFsB,CAAvB;AAAA,MAGIO,QAAQ,GAAGD,gBAAgB,CAAC,CAAD,CAH/B;;AAKA,MAAIE,MAAM,GAAGD,QAAQ,CAACE,mBAAT,CAA6BT,gBAA7B,CAAb;AACAZ,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAY;AAC1BhB,IAAAA,UAAU,CAACiB,OAAX,GAAqB,IAArB;AACA,QAAIC,WAAW,GAAGL,QAAQ,CAACM,SAAT,CAAmBxB,aAAa,CAACyB,UAAd,CAAyB,YAAY;AACxE,UAAIpB,UAAU,CAACiB,OAAf,EAAwB;AACtBb,QAAAA,WAAW,CAAC,UAAUiB,CAAV,EAAa;AACvB,iBAAOA,CAAC,GAAG,CAAX;AACD,SAFU,CAAX;AAGD;AACF,KANoC,CAAnB,CAAlB;AAOA,WAAO,YAAY;AACjBrB,MAAAA,UAAU,CAACiB,OAAX,GAAqB,KAArB;AACAC,MAAAA,WAAW;AACZ,KAHD;AAID,GAbD,EAaG,CAACL,QAAD,CAbH;AAcAnB,EAAAA,KAAK,CAACsB,SAAN,CAAgB,YAAY;AAC1B;AACA;AACAH,IAAAA,QAAQ,CAACS,UAAT,CAAoBhB,gBAApB,EAAsC;AACpCiB,MAAAA,SAAS,EAAE;AADyB,KAAtC;AAGD,GAND,EAMG,CAACjB,gBAAD,EAAmBO,QAAnB,CANH;AAOA,SAAOC,MAAP;AACD","sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { QueriesObserver } from '../core/queriesObserver';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useQueries(queries) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var defaultedQueries = queries.map(function (options) {\n    var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions.optimisticResults = true;\n    return defaultedOptions;\n  });\n\n  var _React$useState2 = React.useState(function () {\n    return new QueriesObserver(queryClient, defaultedQueries);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedQueries);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    }));\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  return result;\n}"]},"metadata":{},"sourceType":"module"}