{"ast":null,"code":"import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { isLocalChain } from '../helpers';\nimport { useEthers } from '../hooks';\nimport { useBlockNumber } from './blockNumber';\nimport { useConfig, useUpdateConfig } from './config';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n\n(function (LocalMulticallState) {\n  LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n  LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n  LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n  LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n  LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\n\nexport function LocalMulticallProvider({\n  children\n}) {\n  const updateConfig = useUpdateConfig();\n  const {\n    multicallAddresses\n  } = useConfig();\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n  const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n  const blockNumber = useBlockNumber();\n  useEffect(() => {\n    if (!library || !chainId) {\n      setLocalMulticallState(LocalMulticallState.Unknown);\n    } else if (!isLocalChain(chainId)) {\n      setLocalMulticallState(LocalMulticallState.NonLocal);\n    } else if (multicallAddresses && multicallAddresses[chainId]) {\n      setLocalMulticallState(LocalMulticallState.Deployed);\n    } else if (localMulticallState !== LocalMulticallState.Deploying) {\n      const signer = library.getSigner();\n\n      if (!signer) {\n        setLocalMulticallState(LocalMulticallState.Error);\n        return;\n      }\n\n      setLocalMulticallState(LocalMulticallState.Deploying);\n\n      const deployMulticall = async () => {\n        try {\n          const {\n            contractAddress,\n            blockNumber\n          } = await deployContract(multicallABI, signer);\n          updateConfig({\n            multicallAddresses: {\n              [chainId]: contractAddress\n            }\n          });\n          setMulticallBlockNumber(blockNumber);\n          setLocalMulticallState(LocalMulticallState.Deployed);\n        } catch (_a) {\n          setLocalMulticallState(LocalMulticallState.Error);\n        }\n      };\n\n      deployMulticall();\n    }\n  }, [library, chainId]);\n  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n\n  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {\n    return _jsx(\"div\", {\n      children: \"Deploying multicall...\"\n    }, void 0);\n  } else if (localMulticallState === LocalMulticallState.Error) {\n    return _jsx(\"div\", {\n      children: \"Error deploying multicall contract\"\n    }, void 0);\n  } else {\n    return _jsx(_Fragment, {\n      children: children\n    }, void 0);\n  }\n}","map":{"version":3,"sources":["../../../../src/providers/LocalMulticallProvider.tsx"],"names":[],"mappings":";AAAA,SAAoB,SAApB,EAA+B,QAA/B,QAA+C,OAA/C;AACA,SAAS,YAAT,QAA6B,YAA7B;AACA,SAAS,SAAT,QAA0B,UAA1B;AACA,SAAS,cAAT,QAA+B,eAA/B;AACA,SAAS,SAAT,EAAoB,eAApB,QAA2C,UAA3C;AACA,OAAO,YAAP,MAAyB,iCAAzB;AACA,SAAS,cAAT,QAA+B,qBAA/B;AAMA,IAAK,mBAAL;;AAAA,CAAA,UAAK,mBAAL,EAAwB;AACtB,EAAA,mBAAA,CAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,mBAAA,CAAA,mBAAA,CAAA,OAAA,CAAA,GAAA,CAAA,CAAA,GAAA,OAAA;AACD,CAND,EAAK,mBAAmB,KAAnB,mBAAmB,GAAA,EAAA,CAAxB;;AAQA,OAAM,SAAU,sBAAV,CAAiC;AAAE,EAAA;AAAF,CAAjC,EAAkE;AACtE,QAAM,YAAY,GAAG,eAAe,EAApC;AACA,QAAM;AAAE,IAAA;AAAF,MAAyB,SAAS,EAAxC;AACA,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAuB,SAAS,EAAtC;AACA,QAAM,CAAC,mBAAD,EAAsB,sBAAtB,IAAgD,QAAQ,CAAC,mBAAmB,CAAC,OAArB,CAA9D;AACA,QAAM,CAAC,oBAAD,EAAuB,uBAAvB,IAAkD,QAAQ,EAAhE;AACA,QAAM,WAAW,GAAG,cAAc,EAAlC;AAEA,EAAA,SAAS,CAAC,MAAK;AACb,QAAI,CAAC,OAAD,IAAY,CAAC,OAAjB,EAA0B;AACxB,MAAA,sBAAsB,CAAC,mBAAmB,CAAC,OAArB,CAAtB;AACD,KAFD,MAEO,IAAI,CAAC,YAAY,CAAC,OAAD,CAAjB,EAA4B;AACjC,MAAA,sBAAsB,CAAC,mBAAmB,CAAC,QAArB,CAAtB;AACD,KAFM,MAEA,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,OAAD,CAA5C,EAAuD;AAC5D,MAAA,sBAAsB,CAAC,mBAAmB,CAAC,QAArB,CAAtB;AACD,KAFM,MAEA,IAAI,mBAAmB,KAAK,mBAAmB,CAAC,SAAhD,EAA2D;AAChE,YAAM,MAAM,GAAG,OAAO,CAAC,SAAR,EAAf;;AACA,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,sBAAsB,CAAC,mBAAmB,CAAC,KAArB,CAAtB;AACA;AACD;;AAED,MAAA,sBAAsB,CAAC,mBAAmB,CAAC,SAArB,CAAtB;;AAEA,YAAM,eAAe,GAAG,YAAW;AACjC,YAAI;AACF,gBAAM;AAAE,YAAA,eAAF;AAAmB,YAAA;AAAnB,cAAmC,MAAM,cAAc,CAAC,YAAD,EAAe,MAAf,CAA7D;AACA,UAAA,YAAY,CAAC;AAAE,YAAA,kBAAkB,EAAE;AAAE,eAAC,OAAD,GAAW;AAAb;AAAtB,WAAD,CAAZ;AACA,UAAA,uBAAuB,CAAC,WAAD,CAAvB;AACA,UAAA,sBAAsB,CAAC,mBAAmB,CAAC,QAArB,CAAtB;AACD,SALD,CAKE,OAAA,EAAA,EAAM;AACN,UAAA,sBAAsB,CAAC,mBAAmB,CAAC,KAArB,CAAtB;AACD;AACF,OATD;;AAUA,MAAA,eAAe;AAChB;AACF,GA5BQ,EA4BN,CAAC,OAAD,EAAU,OAAV,CA5BM,CAAT;AA8BA,QAAM,sBAAsB,GAAG,oBAAoB,IAAI,WAAxB,IAAuC,WAAW,GAAG,oBAApF;;AAEA,MACE,mBAAmB,KAAK,mBAAmB,CAAC,SAA5C,IACC,mBAAmB,KAAK,mBAAmB,CAAC,QAA5C,IAAwD,sBAF3D,EAGE;AACA,WAAO,IAAA,CAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAAA,EAAA,KAAA,CAAA,CAAP;AACD,GALD,MAKO,IAAI,mBAAmB,KAAK,mBAAmB,CAAC,KAAhD,EAAuD;AAC5D,WAAO,IAAA,CAAA,KAAA,EAAA;AAAA,MAAA,QAAA,EAAA;AAAA,KAAA,EAAA,KAAA,CAAA,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAA,CAAA,SAAA,EAAA;AAAA,MAAA,QAAA,EAAG;AAAH,KAAA,EAAW,KAAA,CAAX,CAAP;AACD;AACF","sourceRoot":"","sourcesContent":["import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { isLocalChain } from '../helpers';\nimport { useEthers } from '../hooks';\nimport { useBlockNumber } from './blockNumber';\nimport { useConfig, useUpdateConfig } from './config';\nimport multicallABI from '../constants/abi/MultiCall.json';\nimport { deployContract } from '../helpers/contract';\nvar LocalMulticallState;\n(function (LocalMulticallState) {\n    LocalMulticallState[LocalMulticallState[\"Unknown\"] = 0] = \"Unknown\";\n    LocalMulticallState[LocalMulticallState[\"NonLocal\"] = 1] = \"NonLocal\";\n    LocalMulticallState[LocalMulticallState[\"Deploying\"] = 2] = \"Deploying\";\n    LocalMulticallState[LocalMulticallState[\"Deployed\"] = 3] = \"Deployed\";\n    LocalMulticallState[LocalMulticallState[\"Error\"] = 4] = \"Error\";\n})(LocalMulticallState || (LocalMulticallState = {}));\nexport function LocalMulticallProvider({ children }) {\n    const updateConfig = useUpdateConfig();\n    const { multicallAddresses } = useConfig();\n    const { library, chainId } = useEthers();\n    const [localMulticallState, setLocalMulticallState] = useState(LocalMulticallState.Unknown);\n    const [multicallBlockNumber, setMulticallBlockNumber] = useState();\n    const blockNumber = useBlockNumber();\n    useEffect(() => {\n        if (!library || !chainId) {\n            setLocalMulticallState(LocalMulticallState.Unknown);\n        }\n        else if (!isLocalChain(chainId)) {\n            setLocalMulticallState(LocalMulticallState.NonLocal);\n        }\n        else if (multicallAddresses && multicallAddresses[chainId]) {\n            setLocalMulticallState(LocalMulticallState.Deployed);\n        }\n        else if (localMulticallState !== LocalMulticallState.Deploying) {\n            const signer = library.getSigner();\n            if (!signer) {\n                setLocalMulticallState(LocalMulticallState.Error);\n                return;\n            }\n            setLocalMulticallState(LocalMulticallState.Deploying);\n            const deployMulticall = async () => {\n                try {\n                    const { contractAddress, blockNumber } = await deployContract(multicallABI, signer);\n                    updateConfig({ multicallAddresses: { [chainId]: contractAddress } });\n                    setMulticallBlockNumber(blockNumber);\n                    setLocalMulticallState(LocalMulticallState.Deployed);\n                }\n                catch (_a) {\n                    setLocalMulticallState(LocalMulticallState.Error);\n                }\n            };\n            deployMulticall();\n        }\n    }, [library, chainId]);\n    const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;\n    if (localMulticallState === LocalMulticallState.Deploying ||\n        (localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock)) {\n        return _jsx(\"div\", { children: \"Deploying multicall...\" }, void 0);\n    }\n    else if (localMulticallState === LocalMulticallState.Error) {\n        return _jsx(\"div\", { children: \"Error deploying multicall contract\" }, void 0);\n    }\n    else {\n        return _jsx(_Fragment, { children: children }, void 0);\n    }\n}\n//# sourceMappingURL=LocalMulticallProvider.js.map"]},"metadata":{},"sourceType":"module"}