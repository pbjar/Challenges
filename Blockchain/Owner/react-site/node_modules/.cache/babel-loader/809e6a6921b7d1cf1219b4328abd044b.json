{"ast":null,"code":"import { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { useRef, useState } from \"react\";\nimport { DescendantsManager } from \"./descendant\";\nimport { useSafeLayoutEffect, cast } from \"./utils\";\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\n\nfunction useDescendants() {\n  var [descendants] = useState(() => new DescendantsManager());\n  useSafeLayoutEffect(() => {\n    return () => descendants.destroy();\n  });\n  return descendants;\n}\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\n\nvar [DescendantsContextProvider, useDescendantsContext] = createContext({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n});\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\n\nfunction useDescendant(options) {\n  var descendants = useDescendantsContext();\n  var [index, setIndex] = useState(-1);\n  var ref = useRef(null);\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var dataIndex = Number(ref.current.dataset.index);\n\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\n\nexport function createDescendantContext() {\n  var ContextProvider = cast(DescendantsContextProvider);\n\n  var _useDescendantsContext = () => cast(useDescendantsContext());\n\n  var _useDescendant = options => useDescendant(options);\n\n  var _useDescendants = () => useDescendants();\n\n  return [// context provider\n  ContextProvider, // call this when you need to read from context\n  _useDescendantsContext, // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants, // descendant index information\n  _useDescendant];\n}","map":{"version":3,"sources":["../../src/use-descendant.ts"],"names":["useState","useSafeLayoutEffect","descendants","createContext","name","errorMessage","useDescendantsContext","ref","useRef","dataIndex","Number","index","setIndex","refCallback","options","cast","enabledIndex","register","mergeRefs","ContextProvider","_useDescendantsContext","_useDescendant","useDescendant","_useDescendants","useDescendants"],"mappings":"AAAA,SAAA,aAAA,EAAA,SAAA,QAAA,wBAAA;AACA,SAAA,MAAA,EAAA,QAAA,QAAA,OAAA;AACA,SAAA,kBAAA,QAAA,cAAA;AACA,SAAA,mBAAA,EAAA,IAAA,QAAA,SAAA;AAEA;AACA;AACA;AACA;;AACA,SAAA,cAAA,GAAuE;AACrE,MAAM,CAAA,WAAA,IAAgBA,QAAQ,CAAC,MAAM,IAArC,kBAAqC,EAAP,CAA9B;AACAC,EAAAA,mBAAmB,CAAC,MAAM;AACxB,WAAO,MAAMC,WAAW,CAAxB,OAAaA,EAAb;AADFD,GAAmB,CAAnBA;AAGA,SAAA,WAAA;AACD;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAM,CAAA,0BAAA,EAAA,qBAAA,IAGFE,aAAa,CAAuB;AACtCC,EAAAA,IAAI,EADkC,qBAAA;AAEtCC,EAAAA,YAAY,EAAE;AAFwB,CAAvB,CAHjB;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAA,aAAA,CAAA,OAAA,EAEE;AACA,MAAMH,WAAW,GAAGI,qBAApB,EAAA;AACA,MAAM,CAAA,KAAA,EAAA,QAAA,IAAoBN,QAAQ,CAAC,CAAnC,CAAkC,CAAlC;AACA,MAAMO,GAAG,GAAGC,MAAM,CAAlB,IAAkB,CAAlB;AAEAP,EAAAA,mBAAmB,CAAC,MAAM;AACxB,WAAO,MAAM;AACX,UAAI,CAACM,GAAG,CAAR,OAAA,EAAkB;AAClBL,MAAAA,WAAW,CAAXA,UAAAA,CAAuBK,GAAG,CAA1BL,OAAAA;AAFF,KAAA;AADiB,GAAA,EAAnBD,EAAmB,CAAnBA;AAOAA,EAAAA,mBAAmB,CAAC,MAAM;AACxB,QAAI,CAACM,GAAG,CAAR,OAAA,EAAkB;AAClB,QAAME,SAAS,GAAGC,MAAM,CAACH,GAAG,CAAHA,OAAAA,CAAAA,OAAAA,CAAzB,KAAwB,CAAxB;;AACA,QAAII,KAAK,IAALA,SAAAA,IAAsB,CAACD,MAAM,CAANA,KAAAA,CAA3B,SAA2BA,CAA3B,EAAoD;AAClDE,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;AALHX,GAAmB,CAAnBA;AAQA,MAAMY,WAAW,GAAGC,OAAO,GACvBC,IAAI,CAAiBb,WAAW,CAAXA,QAAAA,CADE,OACFA,CAAjB,CADmB,GAEvBa,IAAI,CAAiBb,WAAW,CAFpC,QAEQ,CAFR;AAIA,SAAO;AAAA,IAAA,WAAA;AAAA,IAAA,KAAA;AAGLc,IAAAA,YAAY,EAAEd,WAAW,CAAXA,cAAAA,CAA2BK,GAAG,CAHvC,OAGSL,CAHT;AAILe,IAAAA,QAAQ,EAAEC,SAAS,CAAA,WAAA,EAAA,GAAA;AAJd,GAAP;AAMD;AAED;AACA;AACA;AACA;;;AAEA,OAAO,SAAA,uBAAA,GAGH;AAEF,MAAMC,eAAe,GAAGJ,IAAI,CAA5B,0BAA4B,CAA5B;;AAEA,MAAMK,sBAAsB,GAAG,MAC7BL,IAAI,CAA2BT,qBADjC,EACM,CADN;;AAGA,MAAMe,cAAc,GAAIP,OAAD,IACrBQ,aAAa,CADf,OACe,CADf;;AAGA,MAAMC,eAAe,GAAG,MAAMC,cAA9B,EAAA;;AAEA,SAAO,CACL;AADK,EAAA,eAAA,EAGL;AAHK,EAAA,sBAAA,EAKL;AALK,EAAA,eAAA,EAOL;AAPF,EAAA,cAAO,CAAP;AAUD","sourcesContent":["import { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport { RefCallback, useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<T extends HTMLElement = HTMLElement, K = {}>() {\n  const [descendants] = useState(() => new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.destroy()\n  })\n  return descendants\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [\n  DescendantsContextProvider,\n  useDescendantsContext,\n] = createContext<UseDescendantsReturn>({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\",\n})\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<T extends HTMLElement = HTMLElement, K = {}>(\n  options?: DescendantOptions<K>,\n) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset.index)\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<RefCallback<T>>(descendants.register(options))\n    : cast<RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K = {}\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"]},"metadata":{},"sourceType":"module"}