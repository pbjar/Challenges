{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\";\nimport { PopoverTransition } from \"./popover-transition\";\nimport { usePopover } from \"./use-popover\";\nexport { usePopoverContext };\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\n\nexport var Popover = props => {\n  var styles = useMultiStyleConfig(\"Popover\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\"]);\n\n  var context = usePopover(rest);\n  return /*#__PURE__*/React.createElement(PopoverProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, runIfFn(children, {\n    isOpen: context.isOpen,\n    onClose: context.onClose,\n    forceUpdate: context.forceUpdate\n  })));\n};\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\";\n}\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\n\n\nexport var PopoverTrigger = props => {\n  // enforce a single child\n  var child = React.Children.only(props.children);\n  var {\n    getTriggerProps\n  } = usePopoverContext();\n  return /*#__PURE__*/React.cloneElement(child, getTriggerProps(child.props, child.ref));\n};\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\";\n}\n\nexport var PopoverContent = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    rootProps\n  } = props,\n      contentProps = _objectWithoutPropertiesLoose(props, [\"rootProps\"]);\n\n  var {\n    getPopoverProps,\n    getPopoverPositionerProps\n  } = usePopoverContext();\n  var styles = useStyles();\n\n  var contentStyles = _extends({\n    position: \"relative\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, styles.content);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getPopoverPositionerProps(rootProps), {\n    __css: styles.popper,\n    className: \"chakra-popover__popper\"\n  }), /*#__PURE__*/React.createElement(PopoverTransition, _extends({}, getPopoverProps(contentProps, ref), {\n    className: cx(\"chakra-popover__content\", props.className),\n    __css: contentStyles\n  })));\n});\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\";\n}\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\n\n\nexport var PopoverHeader = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getHeaderProps\n  } = usePopoverContext();\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.header, _extends({}, getHeaderProps(props, ref), {\n    className: cx(\"chakra-popover__header\", props.className),\n    __css: styles.header\n  }));\n});\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\";\n}\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\n\n\nexport var PopoverBody = /*#__PURE__*/forwardRef((props, ref) => {\n  var {\n    getBodyProps\n  } = usePopoverContext();\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getBodyProps(props, ref), {\n    className: cx(\"chakra-popover__body\", props.className),\n    __css: styles.body\n  }));\n});\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\";\n}\n\nexport var PopoverFooter = props => {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.footer, _extends({}, props, {\n    className: cx(\"chakra-popover__footer\", props.className),\n    __css: styles.footer\n  }));\n};\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\";\n}\n\nexport var PopoverCloseButton = props => {\n  var {\n    onClose\n  } = usePopoverContext();\n  return /*#__PURE__*/React.createElement(CloseButton, _extends({\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    borderRadius: \"md\",\n    top: \"0.25rem\",\n    insetEnd: \"0.5rem\",\n    padding: \"0.5rem\"\n  }, props));\n};\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\";\n}\n\nexport var PopoverArrow = props => {\n  var _ref;\n\n  var {\n    bg,\n    bgColor,\n    backgroundColor\n  } = props;\n  var {\n    getArrowProps,\n    getArrowInnerProps\n  } = usePopoverContext();\n  var styles = useStyles();\n  var arrowBg = (_ref = bg != null ? bg : bgColor) != null ? _ref : backgroundColor;\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, getArrowProps(), {\n    className: \"chakra-popover__arrow-positioner\"\n  }), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: cx(\"chakra-popover__arrow\", props.className)\n  }, getArrowInnerProps(props), {\n    __css: _extends({}, styles.arrow, {\n      \"--popper-arrow-bg\": arrowBg ? \"colors.\" + arrowBg + \", \" + arrowBg : undefined\n    })\n  })));\n};\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\";\n}","map":{"version":3,"sources":["../../src/popover.tsx"],"names":["Popover","props","styles","useMultiStyleConfig","children","rest","omitThemingProps","context","usePopover","runIfFn","isOpen","onClose","forceUpdate","PopoverTrigger","child","React","getTriggerProps","usePopoverContext","PopoverContent","forwardRef","rootProps","contentProps","getPopoverPositionerProps","useStyles","contentStyles","position","display","flexDirection","getPopoverProps","cx","PopoverHeader","getHeaderProps","header","PopoverBody","getBodyProps","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","backgroundColor","getArrowInnerProps","arrowBg","bg","getArrowProps","undefined"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, runIfFn, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { PopoverProvider, usePopoverContext } from \"./popover-context\"\nimport { PopoverTransition, PopoverTransitionProps } from \"./popover-transition\"\nimport { usePopover, UsePopoverProps } from \"./use-popover\"\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps<\"Popover\"> {\n  /**\n   * The content of the popover. It is usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n          forceUpdate: context.forceUpdate,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends PopoverTransitionProps {\n  rootProps?: HTMLChakraProps<\"div\">\n}\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  (props, ref) => {\n    const { rootProps, ...contentProps } = props\n\n    const { getPopoverProps, getPopoverPositionerProps } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    return (\n      <chakra.div\n        {...getPopoverPositionerProps(rootProps)}\n        __css={styles.popper}\n        className=\"chakra-popover__popper\"\n      >\n        <PopoverTransition\n          {...getPopoverProps(contentProps, ref)}\n          className={cx(\"chakra-popover__content\", props.className)}\n          __css={contentStyles}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it is first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  (props, ref) => {\n    const { getHeaderProps } = usePopoverContext()\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...getHeaderProps(props, ref)}\n        className={cx(\"chakra-popover__header\", props.className)}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">((props, ref) => {\n  const { getBodyProps } = usePopoverContext()\n\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getBodyProps(props, ref)}\n      className={cx(\"chakra-popover__body\", props.className)}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      insetEnd=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { bg, bgColor, backgroundColor } = props\n  const { getArrowProps, getArrowInnerProps } = usePopoverContext()\n  const styles = useStyles()\n  const arrowBg = bg ?? bgColor ?? backgroundColor\n  return (\n    <chakra.div\n      {...getArrowProps()}\n      className=\"chakra-popover__arrow-positioner\"\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowInnerProps(props)}\n        __css={{\n          ...styles.arrow,\n          \"--popper-arrow-bg\": arrowBg\n            ? `colors.${arrowBg}, ${arrowBg}`\n            : undefined,\n        }}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"]},"metadata":{},"sourceType":"module"}