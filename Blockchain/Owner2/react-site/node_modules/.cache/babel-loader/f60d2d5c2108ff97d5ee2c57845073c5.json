{"ast":null,"code":"import React from 'react';\nimport { hydrate } from '../core';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useHydrate(state, options) {\n  var queryClient = useQueryClient();\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nexport var Hydrate = function Hydrate(_ref) {\n  var children = _ref.children,\n      options = _ref.options,\n      state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner/react-site/node_modules/react-query/es/react/Hydrate.js"],"names":["React","hydrate","useQueryClient","useHydrate","state","options","queryClient","optionsRef","useRef","current","useMemo","Hydrate","_ref","children"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoC;AACzC,MAAIC,WAAW,GAAGJ,cAAc,EAAhC;AACA,MAAIK,UAAU,GAAGP,KAAK,CAACQ,MAAN,CAAaH,OAAb,CAAjB;AACAE,EAAAA,UAAU,CAACE,OAAX,GAAqBJ,OAArB,CAHyC,CAGX;AAC9B;AACA;AACA;;AAEAL,EAAAA,KAAK,CAACU,OAAN,CAAc,YAAY;AACxB,QAAIN,KAAJ,EAAW;AACTH,MAAAA,OAAO,CAACK,WAAD,EAAcF,KAAd,EAAqBG,UAAU,CAACE,OAAhC,CAAP;AACD;AACF,GAJD,EAIG,CAACH,WAAD,EAAcF,KAAd,CAJH;AAKD;AACD,OAAO,IAAIO,OAAO,GAAG,SAASA,OAAT,CAAiBC,IAAjB,EAAuB;AAC1C,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIR,OAAO,GAAGO,IAAI,CAACP,OADnB;AAAA,MAEID,KAAK,GAAGQ,IAAI,CAACR,KAFjB;AAGAD,EAAAA,UAAU,CAACC,KAAD,EAAQC,OAAR,CAAV;AACA,SAAOQ,QAAP;AACD,CANM","sourcesContent":["import React from 'react';\nimport { hydrate } from '../core';\nimport { useQueryClient } from './QueryClientProvider';\nexport function useHydrate(state, options) {\n  var queryClient = useQueryClient();\n  var optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(function () {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nexport var Hydrate = function Hydrate(_ref) {\n  var children = _ref.children,\n      options = _ref.options,\n      state = _ref.state;\n  useHydrate(state, options);\n  return children;\n};"]},"metadata":{},"sourceType":"module"}