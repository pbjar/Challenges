{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUnmountEffect, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { addItem, callAllHandlers, dataAttr, determineLazyBehavior, focus, getNextItemFromSearch, getOwnerDocument, isActiveElement, isArray, isHTMLElement, isString, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\n\nexport function useMenu(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    computePositionOnMount\n  } = props,\n      popperProps = _objectWithoutPropertiesLoose(props, [\"id\", \"closeOnSelect\", \"closeOnBlur\", \"autoSelect\", \"isLazy\", \"isOpen\", \"defaultIsOpen\", \"onClose\", \"onOpen\", \"placement\", \"lazyBehavior\", \"computePositionOnMount\"]);\n\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp\n  });\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = React.useRef(null);\n  var buttonRef = React.useRef(null);\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n\n      if (!((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper(_extends({}, popperProps, {\n    enabled: isOpen || computePositionOnMount,\n    placement\n  }));\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var descendants = useMenuDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = React.useCallback(() => {\n    onOpen();\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false\n    });\n  }, [onOpen, menuRef]);\n  var timeoutIds = React.useRef(new Set([]));\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach(id => clearTimeout(id));\n    timeoutIds.current.clear();\n  });\n  var openAndFocusFirstItem = React.useCallback(() => {\n    onOpen();\n    var id = setTimeout(() => {\n      var first = descendants.firstEnabled();\n      if (first) setFocusedIndex(first.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var openAndFocusLastItem = React.useCallback(() => {\n    onOpen();\n    var id = setTimeout(() => {\n      var last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id);\n  }, [onOpen, setFocusedIndex, descendants]);\n  var refocus = React.useCallback(() => {\n    var _menuRef$current, _descendants$item;\n\n    var doc = getOwnerDocument(menuRef.current);\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(doc.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    var node = (_descendants$item = descendants.item(focusedIndex)) == null ? void 0 : _descendants$item.node;\n\n    if (node) {\n      focus(node, {\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    }\n  }, [isOpen, focusedIndex, descendants]);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior\n  };\n}\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuButton(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu\n  } = menu;\n  var onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return _extends({}, props, {\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n\nfunction isTargetMenuItem(target) {\n  var _target$getAttribute; // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n\n\n  return isHTMLElement(target) && !!((_target$getAttribute = target.getAttribute(\"role\")) != null && _target$getAttribute.startsWith(\"menuitem\"));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\n\n\nexport function useMenuList(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>\");\n  }\n\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior\n  } = menu;\n  var descendants = useMenuDescendantsContext();\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var createTypeaheadHandler = useShortcut({\n    preventDefault: event => event.key !== \" \" && isTargetMenuItem(event.target)\n  });\n  var onKeyDown = React.useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => event.preventDefault(),\n      Escape: onClose,\n      ArrowDown: () => {\n        var next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: () => {\n        var prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    var fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n    /**\n     * Typeahead: Based on current character pressed,\n     * find the next item to be selected\n     */\n\n\n    var onTypeahead = createTypeaheadHandler(character => {\n      var nextItem = getNextItemFromSearch(descendants.values(), character, item => {\n        var _item$node$textConten, _item$node;\n\n        return (_item$node$textConten = item == null ? void 0 : (_item$node = item.node) == null ? void 0 : _item$node.textContent) != null ? _item$node$textConten : \"\";\n      }, descendants.item(focusedIndex));\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  var hasBeenOpened = React.useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen\n  });\n  return _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: \"var(--popper-transform-origin)\"\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps(_extends({}, props, {\n    style: _extends({\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }, props.style)\n  }));\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuItem(props, externalRef) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseEnter\", \"onMouseMove\", \"onMouseLeave\", \"onClick\", \"isDisabled\", \"isFocusable\", \"closeOnSelect\"]);\n\n  var menu = useMenuContext();\n  var {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId\n  } = menu;\n  var ref = React.useRef(null);\n  var id = menuId + \"-menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var {\n    index,\n    register\n  } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  var onMouseEnter = React.useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  var onMouseMove = React.useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  var onMouseLeave = React.useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  var onClick = React.useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n    /**\n     * Close menu and parent menus, allowing the MenuItem\n     * to override its parent menu's `closeOnSelect` prop.\n     */\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false,\n        preventScroll: false\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current, {\n        preventScroll: false\n      });\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  var clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, clickableProps, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOption(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var {\n    type = \"radio\",\n    isChecked\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"type\", \"isChecked\"]);\n\n  var ownProps = useMenuItem(rest, ref);\n  return _extends({}, ownProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuOptionGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  var onChange = React.useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = event => {\n      onChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["createDescendantContext","createContext","strict","name","props","closeOnSelect","closeOnBlur","autoSelect","isOpen","onClose","onOpen","placement","lazyBehavior","computePositionOnMount","popperProps","onToggle","useDisclosure","onOpenProp","menuRef","React","buttonRef","useOutsideClick","enabled","ref","handler","event","popper","usePopper","descendants","useMenuDescendants","useUpdateEffect","setFocusedIndex","useFocusOnHide","focusRef","visible","shouldFocus","useIds","openAndFocusMenu","focus","nextTick","selectTextIfInput","timeoutIds","useUnmountEffect","id","clearTimeout","openAndFocusFirstItem","setTimeout","first","openAndFocusLastItem","last","refocus","doc","getOwnerDocument","hasFocusWithin","shouldRefocus","node","preventScroll","onTransitionEnd","forceUpdate","orientation","externalRef","menu","useMenuContext","onClick","action","onKeyDown","eventKey","normalizeEventKey","keyMap","Enter","ArrowDown","ArrowUp","mergeRefs","dataAttr","callAllHandlers","isHTMLElement","target","useMenuDescendantsContext","createTypeaheadHandler","useShortcut","preventDefault","isTargetMenuItem","Tab","Escape","next","prev","fn","onTypeahead","character","nextItem","getNextItemFromSearch","item","index","hasBeenOpened","shouldRenderChildren","determineLazyBehavior","hasBeenSelected","isSelected","children","tabIndex","role","style","transformOrigin","visibility","onMouseEnter","onMouseMove","onMouseLeave","htmlProps","menuId","useId","register","useMenuDescendant","disabled","isDisabled","isFocusable","onMouseEnterProp","onMouseMoveProp","isActiveElement","onMouseLeaveProp","onClickProp","isFocused","trulyDisabled","clickableProps","useClickable","type","isChecked","rest","ownProps","useMenuItem","value","onChange","onChangeProp","isRadio","fallback","useControllableState","defaultValue","selectedValue","isString","setValue","isArray","nextValue","removeItem","addItem","validChildren","getValidChildren","clones","child"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  UseDisclosureProps,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUnmountEffect,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  addItem,\n  callAllHandlers,\n  dataAttr,\n  determineLazyBehavior,\n  focus,\n  getNextItemFromSearch,\n  getOwnerDocument,\n  isActiveElement,\n  isArray,\n  isHTMLElement,\n  isString,\n  LazyBehavior,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps extends UsePopperProps, UseDisclosureProps {\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n  })\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = React.useRef<HTMLDivElement>(null)\n  const buttonRef = React.useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n  })\n\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = React.useCallback(() => {\n    onOpen()\n    focus(menuRef.current, {\n      nextTick: true,\n      selectTextIfInput: false,\n    })\n  }, [onOpen, menuRef])\n\n  const timeoutIds = React.useRef<Set<number>>(new Set([]))\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  const openAndFocusFirstItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const first = descendants.firstEnabled()\n      if (first) setFocusedIndex(first.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const openAndFocusLastItem = React.useCallback(() => {\n    onOpen()\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [onOpen, setFocusedIndex, descendants])\n\n  const refocus = React.useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    if (node) {\n      focus(node, { selectTextIfInput: false, preventScroll: false })\n    }\n  }, [isOpen, focusedIndex, descendants])\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = React.useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = React.useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenOpened.current,\n    isLazy,\n    lazyBehavior,\n    isSelected: isOpen,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n  } = menu\n\n  const ref = React.useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = React.useCallback(\n    (event) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = React.useCallback(\n    (event) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = React.useCallback(\n    (event) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = React.useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current, {\n        nextTick: true,\n        selectTextIfInput: false,\n        preventScroll: false,\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      focus(menuRef.current, { preventScroll: false })\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = React.useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return React.cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}