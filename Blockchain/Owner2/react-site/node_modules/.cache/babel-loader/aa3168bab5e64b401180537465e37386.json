{"ast":null,"code":"export function chainStateReducer(state = {}, action) {\n  var _a, _b, _c;\n\n  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n\n  if (!current || action.blockNumber >= current) {\n    if (action.type === 'FETCH_SUCCESS') {\n      let newState = action.state;\n\n      if (action.blockNumber === current) {\n        // merge with existing state to prevent requests coming out of order\n        // from overwriting the data\n        const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n\n        for (const [address, entries] of Object.entries(oldState)) {\n          newState = Object.assign(Object.assign({}, newState), {\n            [address]: Object.assign(Object.assign({}, entries), newState[address])\n          });\n        }\n      }\n\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: {\n          blockNumber: action.blockNumber,\n          state: newState\n        }\n      });\n    } else if (action.type === 'FETCH_ERROR') {\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), {\n          blockNumber: action.blockNumber,\n          error: action.error\n        })\n      });\n    }\n  }\n\n  return state;\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/chainStateReducer.ts"],"names":[],"mappings":"AA4BA,OAAM,SAAU,iBAAV,CAA4B,KAAA,GAAe,EAA3C,EAA+C,MAA/C,EAA6D;;;AACjE,QAAM,OAAO,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,MAAM,CAAC,OAAR,CAAR,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,WAAvC;;AACA,MAAI,CAAC,OAAD,IAAY,MAAM,CAAC,WAAP,IAAsB,OAAtC,EAA+C;AAC7C,QAAI,MAAM,CAAC,IAAP,KAAgB,eAApB,EAAqC;AACnC,UAAI,QAAQ,GAAG,MAAM,CAAC,KAAtB;;AACA,UAAI,MAAM,CAAC,WAAP,KAAuB,OAA3B,EAAoC;AAClC;AACA;AACA,cAAM,QAAQ,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,MAAM,CAAC,OAAR,CAAR,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,KAAA,CAAxB,GAAwB,EAAA,CAAE,KAA1B,MAA+B,IAA/B,IAA+B,EAAA,KAAA,KAAA,CAA/B,GAA+B,EAA/B,GAAmC,EAAjD;;AACA,aAAK,MAAM,CAAC,OAAD,EAAU,OAAV,CAAX,IAAiC,MAAM,CAAC,OAAP,CAAe,QAAf,CAAjC,EAA2D;AACzD,UAAA,QAAQ,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACH,QADG,CAAA,EACK;AACX,aAAC,OAAD,GAAS,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACJ,OADI,CAAA,EAEJ,QAAQ,CAAC,OAAD,CAFJ;AADE,WADL,CAAR;AAOD;AACF;;AACD,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,SAAC,MAAM,CAAC,OAAR,GAAkB;AAAE,UAAA,WAAW,EAAE,MAAM,CAAC,WAAtB;AAAmC,UAAA,KAAK,EAAE;AAA1C;AADV,OADV,CAAA;AAID,KApBD,MAoBO,IAAI,MAAM,CAAC,IAAP,KAAgB,aAApB,EAAmC;AACxC,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,SAAC,MAAM,CAAC,OAAR,GAAgB,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAO,KAAK,CAAC,MAAM,CAAC,OAAR,CAAZ,CAAA,EAA4B;AAAE,UAAA,WAAW,EAAE,MAAM,CAAC,WAAtB;AAAmC,UAAA,KAAK,EAAE,MAAM,CAAC;AAAjD,SAA5B;AADR,OADV,CAAA;AAID;AACF;;AACD,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["export function chainStateReducer(state = {}, action) {\n    var _a, _b, _c;\n    const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;\n    if (!current || action.blockNumber >= current) {\n        if (action.type === 'FETCH_SUCCESS') {\n            let newState = action.state;\n            if (action.blockNumber === current) {\n                // merge with existing state to prevent requests coming out of order\n                // from overwriting the data\n                const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};\n                for (const [address, entries] of Object.entries(oldState)) {\n                    newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });\n                }\n            }\n            return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });\n        }\n        else if (action.type === 'FETCH_ERROR') {\n            return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });\n        }\n    }\n    return state;\n}\n//# sourceMappingURL=chainStateReducer.js.map"]},"metadata":{},"sourceType":"module"}