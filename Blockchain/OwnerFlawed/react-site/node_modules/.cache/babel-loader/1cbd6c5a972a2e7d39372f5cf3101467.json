{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { ChainStateContext } from './context';\nimport { chainStateReducer } from './chainStateReducer';\nimport { callsReducer } from './callsReducer';\nimport { multicall } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nexport function ChainStateProvider({\n  children,\n  multicallAddresses\n}) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const blockNumber = useBlockNumber();\n  const [calls, dispatchCalls] = useReducer(callsReducer, []);\n  const [state, dispatchState] = useReducer(chainStateReducer, {});\n  const [debouncedCalls, debouncedId] = useDebouncePair(calls, chainId, 50);\n  const uniqueCalls = debouncedId === chainId ? getUnique(debouncedCalls) : []; // used for deep equality in hook dependencies\n\n  const uniqueCallsJSON = JSON.stringify(uniqueCalls);\n  const multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n  useEffect(() => {\n    if (library && blockNumber !== undefined && chainId !== undefined) {\n      if (!multicallAddress) {\n        console.error(`Missing multicall address for chain id ${chainId}`);\n        return;\n      }\n\n      const start = Date.now();\n      multicall(library, multicallAddress, blockNumber, uniqueCalls).then(state => {\n        dispatchState({\n          type: 'FETCH_SUCCESS',\n          blockNumber,\n          chainId,\n          state\n        });\n        notifyDevtools({\n          type: 'MULTICALL_SUCCESS',\n          duration: Date.now() - start,\n          chainId,\n          blockNumber,\n          multicallAddress,\n          state\n        });\n      }).catch(error => {\n        console.error(error);\n        dispatchState({\n          type: 'FETCH_ERROR',\n          blockNumber,\n          chainId,\n          error\n        });\n        notifyDevtools({\n          type: 'MULTICALL_ERROR',\n          duration: Date.now() - start,\n          chainId,\n          blockNumber,\n          multicallAddress,\n          calls: uniqueCalls,\n          error\n        });\n      });\n    }\n  }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n  const value = chainId !== undefined ? state[chainId] : undefined;\n  const provided = {\n    value,\n    multicallAddress,\n    dispatchCalls\n  };\n  return _jsx(ChainStateContext.Provider, {\n    value: provided,\n    children: children\n  }, void 0);\n}\n\nfunction getUnique(requests) {\n  const unique = [];\n\n  for (const request of requests) {\n    if (!unique.find(x => x.address === request.address && x.data === request.data)) {\n      unique.push(request);\n    }\n  }\n\n  return unique;\n}","map":{"version":3,"sources":["../../../../../src/providers/chainState/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useReducer } from 'react';\nimport { useDebouncePair, useEthers } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { ChainStateContext } from './context';\nimport { chainStateReducer } from './chainStateReducer';\nimport { callsReducer } from './callsReducer';\nimport { multicall } from './multicall';\nimport { notifyDevtools } from '../devtools';\nimport { useDevtoolsReporting } from './useDevtoolsReporting';\nexport function ChainStateProvider({ children, multicallAddresses }) {\n    const { library, chainId } = useEthers();\n    const blockNumber = useBlockNumber();\n    const [calls, dispatchCalls] = useReducer(callsReducer, []);\n    const [state, dispatchState] = useReducer(chainStateReducer, {});\n    const [debouncedCalls, debouncedId] = useDebouncePair(calls, chainId, 50);\n    const uniqueCalls = debouncedId === chainId ? getUnique(debouncedCalls) : [];\n    // used for deep equality in hook dependencies\n    const uniqueCallsJSON = JSON.stringify(uniqueCalls);\n    const multicallAddress = chainId !== undefined ? multicallAddresses[chainId] : undefined;\n    useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses);\n    useEffect(() => {\n        if (library && blockNumber !== undefined && chainId !== undefined) {\n            if (!multicallAddress) {\n                console.error(`Missing multicall address for chain id ${chainId}`);\n                return;\n            }\n            const start = Date.now();\n            multicall(library, multicallAddress, blockNumber, uniqueCalls)\n                .then((state) => {\n                dispatchState({ type: 'FETCH_SUCCESS', blockNumber, chainId, state });\n                notifyDevtools({\n                    type: 'MULTICALL_SUCCESS',\n                    duration: Date.now() - start,\n                    chainId,\n                    blockNumber,\n                    multicallAddress,\n                    state,\n                });\n            })\n                .catch((error) => {\n                console.error(error);\n                dispatchState({ type: 'FETCH_ERROR', blockNumber, chainId, error });\n                notifyDevtools({\n                    type: 'MULTICALL_ERROR',\n                    duration: Date.now() - start,\n                    chainId,\n                    blockNumber,\n                    multicallAddress,\n                    calls: uniqueCalls,\n                    error,\n                });\n            });\n        }\n    }, [library, blockNumber, chainId, multicallAddress, uniqueCallsJSON]);\n    const value = chainId !== undefined ? state[chainId] : undefined;\n    const provided = { value, multicallAddress, dispatchCalls };\n    return _jsx(ChainStateContext.Provider, { value: provided, children: children }, void 0);\n}\nfunction getUnique(requests) {\n    const unique = [];\n    for (const request of requests) {\n        if (!unique.find((x) => x.address === request.address && x.data === request.data)) {\n            unique.push(request);\n        }\n    }\n    return unique;\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}