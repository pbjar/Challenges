{"ast":null,"code":"import { isCssVar, isNumber, isString } from \"@chakra-ui/utils\";\nimport { backdropFilterTemplate, filterTemplate, getRingTemplate, getTransformGpuTemplate, getTransformTemplate, flexDirectionTemplate } from \"./templates\";\nimport { gradientTransform, globalSet, isCSSFunction } from \"./parse-gradient\";\n\nvar analyzeCSSValue = value => {\n  var num = parseFloat(value.toString());\n  var unit = value.toString().replace(String(num), \"\");\n  return {\n    unitless: !unit,\n    value: num,\n    unit\n  };\n};\n\nvar wrap = str => value => str + \"(\" + value + \")\";\n\nexport var transformFunctions = {\n  filter(value) {\n    return value !== \"auto\" ? value : filterTemplate;\n  },\n\n  backdropFilter(value) {\n    return value !== \"auto\" ? value : backdropFilterTemplate;\n  },\n\n  ring(value) {\n    return getRingTemplate(transformFunctions.px(value));\n  },\n\n  bgClip(value) {\n    return value === \"text\" ? {\n      color: \"transparent\",\n      backgroundClip: \"text\"\n    } : {\n      backgroundClip: value\n    };\n  },\n\n  transform(value) {\n    if (value === \"auto\") return getTransformTemplate();\n    if (value === \"auto-gpu\") return getTransformGpuTemplate();\n    return value;\n  },\n\n  px(value) {\n    if (value == null) return value;\n    var {\n      unitless\n    } = analyzeCSSValue(value);\n    return unitless || isNumber(value) ? value + \"px\" : value;\n  },\n\n  fraction(value) {\n    return !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  },\n\n  float(value, theme) {\n    var map = {\n      left: \"right\",\n      right: \"left\"\n    };\n    return theme.direction === \"rtl\" ? map[value] : value;\n  },\n\n  degree(value) {\n    if (isCssVar(value) || value == null) return value;\n    var unitless = isString(value) && !value.endsWith(\"deg\");\n    return isNumber(value) || unitless ? value + \"deg\" : value;\n  },\n\n  gradient: gradientTransform,\n  blur: wrap(\"blur\"),\n  opacity: wrap(\"opacity\"),\n  brightness: wrap(\"brightness\"),\n  contrast: wrap(\"contrast\"),\n  dropShadow: wrap(\"drop-shadow\"),\n  grayscale: wrap(\"grayscale\"),\n  hueRotate: wrap(\"hue-rotate\"),\n  invert: wrap(\"invert\"),\n  saturate: wrap(\"saturate\"),\n  sepia: wrap(\"sepia\"),\n\n  bgImage(value) {\n    if (value == null) return value;\n    var prevent = isCSSFunction(value) || globalSet.has(value);\n    return !prevent ? \"url(\" + value + \")\" : value;\n  },\n\n  outline(value) {\n    var isNoneOrZero = String(value) === \"0\" || String(value) === \"none\";\n    return value !== null && isNoneOrZero ? {\n      outline: \"2px solid transparent\",\n      outlineOffset: \"2px\"\n    } : {\n      outline: value\n    };\n  },\n\n  flexDirection(value) {\n    var _flexDirectionTemplat;\n\n    var {\n      space,\n      divide\n    } = (_flexDirectionTemplat = flexDirectionTemplate[value]) != null ? _flexDirectionTemplat : {};\n    var result = {\n      flexDirection: value\n    };\n    if (space) result[space] = 1;\n    if (divide) result[divide] = 1;\n    return result;\n  }\n\n};","map":{"version":3,"sources":["../../../src/utils/transform-functions.ts"],"names":["analyzeCSSValue","value","num","parseFloat","unit","String","unitless","wrap","str","transformFunctions","filter","backdropFilter","ring","getRingTemplate","bgClip","color","backgroundClip","transform","getTransformTemplate","getTransformGpuTemplate","px","isNumber","fraction","float","map","left","right","theme","degree","isCssVar","isString","gradient","blur","opacity","brightness","contrast","dropShadow","grayscale","hueRotate","invert","saturate","sepia","bgImage","prevent","isCSSFunction","globalSet","outline","isNoneOrZero","outlineOffset","flexDirection","divide","flexDirectionTemplate","result"],"mappings":"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","sourcesContent":["import { Dict, isCssVar, isNumber, isString } from \"@chakra-ui/utils\"\nimport {\n  backdropFilterTemplate,\n  filterTemplate,\n  getRingTemplate,\n  getTransformGpuTemplate,\n  getTransformTemplate,\n  flexDirectionTemplate,\n} from \"./templates\"\nimport { gradientTransform, globalSet, isCSSFunction } from \"./parse-gradient\"\n\nconst analyzeCSSValue = (value: number | string) => {\n  const num = parseFloat(value.toString())\n  const unit = value.toString().replace(String(num), \"\")\n  return { unitless: !unit, value: num, unit }\n}\n\nconst wrap = (str: string) => (value: any) => `${str}(${value})`\n\nexport const transformFunctions = {\n  filter(value: any) {\n    return value !== \"auto\" ? value : filterTemplate\n  },\n  backdropFilter(value: any) {\n    return value !== \"auto\" ? value : backdropFilterTemplate\n  },\n  ring(value: string) {\n    return getRingTemplate(transformFunctions.px(value))\n  },\n  bgClip(value: string) {\n    return value === \"text\"\n      ? { color: \"transparent\", backgroundClip: \"text\" }\n      : { backgroundClip: value }\n  },\n  transform(value: any) {\n    if (value === \"auto\") return getTransformTemplate()\n    if (value === \"auto-gpu\") return getTransformGpuTemplate()\n    return value\n  },\n  px(value: number | string) {\n    if (value == null) return value\n    const { unitless } = analyzeCSSValue(value)\n    return unitless || isNumber(value) ? `${value}px` : value\n  },\n  fraction(value: any) {\n    return !isNumber(value) || value > 1 ? value : `${value * 100}%`\n  },\n  float(value: any, theme: Dict) {\n    const map = { left: \"right\", right: \"left\" }\n    return theme.direction === \"rtl\" ? map[value] : value\n  },\n  degree(value: any) {\n    if (isCssVar(value) || value == null) return value\n    const unitless = isString(value) && !value.endsWith(\"deg\")\n    return isNumber(value) || unitless ? `${value}deg` : value\n  },\n  gradient: gradientTransform,\n  blur: wrap(\"blur\"),\n  opacity: wrap(\"opacity\"),\n  brightness: wrap(\"brightness\"),\n  contrast: wrap(\"contrast\"),\n  dropShadow: wrap(\"drop-shadow\"),\n  grayscale: wrap(\"grayscale\"),\n  hueRotate: wrap(\"hue-rotate\"),\n  invert: wrap(\"invert\"),\n  saturate: wrap(\"saturate\"),\n  sepia: wrap(\"sepia\"),\n  bgImage(value: any) {\n    if (value == null) return value\n    const prevent = isCSSFunction(value) || globalSet.has(value)\n    return !prevent ? `url(${value})` : value\n  },\n  outline(value: any) {\n    const isNoneOrZero = String(value) === \"0\" || String(value) === \"none\"\n    return value !== null && isNoneOrZero\n      ? { outline: \"2px solid transparent\", outlineOffset: \"2px\" }\n      : { outline: value }\n  },\n  flexDirection(value: any) {\n    const { space, divide } = flexDirectionTemplate[value] ?? {}\n    const result = { flexDirection: value }\n    if (space) result[space] = 1\n    if (divide) result[divide] = 1\n    return result\n  },\n}\n"]},"metadata":{},"sourceType":"module"}