{"ast":null,"code":"import { ChainId } from '../../constants';\n\nfunction isChainId(chainId) {\n  return Object.values(ChainId).includes(chainId);\n}\n\nexport function transactionReducer(state, action) {\n  var _a;\n\n  switch (action.type) {\n    case 'ADD_TRANSACTION':\n      {\n        const {\n          chainId\n        } = action.payload.transaction;\n\n        if (isChainId(chainId)) {\n          return Object.assign(Object.assign({}, state), {\n            [chainId]: [action.payload, ...((_a = state[chainId]) !== null && _a !== void 0 ? _a : [])]\n          });\n        } else {\n          throw TypeError('Unsupported chain');\n        }\n      }\n\n    case 'UPDATE_TRANSACTIONS':\n      return Object.assign(Object.assign({}, state), {\n        [action.chainId]: [...action.transactions]\n      });\n  }\n}","map":{"version":3,"sources":["../../../../../src/providers/transactions/reducer.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,iBAAxB;;AAeA,SAAS,SAAT,CAAmB,OAAnB,EAAkC;AAChC,SAAO,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,QAAvB,CAAgC,OAAhC,CAAP;AACD;;AAED,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAAwD,MAAxD,EAAsE;;;AAC1E,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,iBAAL;AAAwB;AACtB,cAAM;AAAE,UAAA;AAAF,YAAc,MAAM,CAAC,OAAP,CAAe,WAAnC;;AAEA,YAAI,SAAS,CAAC,OAAD,CAAb,EAAwB;AACtB,iBAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,KADL,CAAA,EACU;AACR,aAAC,OAAD,GAAW,CAAC,MAAM,CAAC,OAAR,EAAiB,IAAG,CAAA,EAAA,GAAC,KAAK,CAAC,OAAD,CAAN,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,EAAtB,CAAjB;AADH,WADV,CAAA;AAID,SALD,MAKO;AACL,gBAAM,SAAS,CAAC,mBAAD,CAAf;AACD;AACF;;AACD,SAAK,qBAAL;AACE,aAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,KAAZ,CAAA,EAAiB;AAAE,SAAC,MAAM,CAAC,OAAR,GAAkB,CAAC,GAAG,MAAM,CAAC,YAAX;AAApB,OAAjB,CAAA;AAdJ;AAgBD","sourceRoot":"","sourcesContent":["import { ChainId } from '../../constants';\nfunction isChainId(chainId) {\n    return Object.values(ChainId).includes(chainId);\n}\nexport function transactionReducer(state, action) {\n    var _a;\n    switch (action.type) {\n        case 'ADD_TRANSACTION': {\n            const { chainId } = action.payload.transaction;\n            if (isChainId(chainId)) {\n                return Object.assign(Object.assign({}, state), { [chainId]: [action.payload, ...((_a = state[chainId]) !== null && _a !== void 0 ? _a : [])] });\n            }\n            else {\n                throw TypeError('Unsupported chain');\n            }\n        }\n        case 'UPDATE_TRANSACTIONS':\n            return Object.assign(Object.assign({}, state), { [action.chainId]: [...action.transactions] });\n    }\n}\n//# sourceMappingURL=reducer.js.map"]},"metadata":{},"sourceType":"module"}