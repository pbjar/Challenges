{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useId } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasFeedbackText, setHasFeedbackText] = React.useState(false);\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n\n  var [hasHelpText, setHasHelpText] = React.useState(false); // Track whether the form element (e.g, `input`) has focus.\n\n  var [isFocused, setFocus] = useBoolean();\n  var getHelpTextProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({\n      id: helpTextId\n    }, props, {\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasHelpText(true);\n      })\n    });\n  }, [helpTextId]);\n  var getLabelProps = React.useCallback(function (props, forwardedRef) {\n    var _props$id, _props$htmlFor;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: (_props$id = props.id) != null ? _props$id : labelId,\n      htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : id\n    });\n  }, [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId]);\n  var getErrorMessageProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({\n      id: feedbackId\n    }, props, {\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setHasFeedbackText(true);\n      }),\n      \"aria-live\": \"polite\"\n    });\n  }, [feedbackId]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, htmlProps, {\n      ref: forwardedRef,\n      role: \"group\"\n    });\n  }, [htmlProps]);\n  var getRequiredIndicatorProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\"\n    });\n  }, []);\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps\n  };\n}\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\n\n\nexport var FormControl = /*#__PURE__*/forwardRef((props, ref) => {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      {\n    getRootProps\n  } = _useFormControlProvid,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"getRootProps\", \"htmlProps\"]);\n\n  var className = cx(\"chakra-form-control\", props.className);\n  var contextValue = React.useMemo(() => context, [context]);\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({}, getRootProps({}, ref), {\n    className: className,\n    __css: styles[\"container\"]\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\n\n\nexport var FormHelperText = /*#__PURE__*/forwardRef((props, ref) => {\n  var field = useFormControlContext();\n  var styles = useStyles();\n  var className = cx(\"chakra-form__helper-text\", props.className);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, field == null ? void 0 : field.getHelpTextProps(props, ref), {\n    __css: styles.helperText,\n    className: className\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}","map":{"version":3,"sources":["../../src/form-control.tsx"],"names":["createContext","strict","name","id","isReadOnly","htmlProps","uuid","useId","idProp","labelId","feedbackId","helpTextId","React","useBoolean","getHelpTextProps","props","forwardedRef","ref","mergeRefs","node","setHasHelpText","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","setHasFeedbackText","getRootProps","role","getRequiredIndicatorProps","children","isRequired","isInvalid","isDisabled","isFocused","onFocus","setFocus","onBlur","FormControl","forwardRef","styles","useMultiStyleConfig","ownProps","omitThemingProps","context","useFormControlProvider","className","cx","contextValue","FormHelperText","field","useFormControlContext","useStyles"],"mappings":"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","sourcesContent":["import { useBoolean, useId } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\"\nimport {\n  createContext,\n  mergeRefs,\n  PropGetter,\n  PropGetterV2,\n} from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<FormControlProviderContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = React.useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = React.useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const getHelpTextProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = React.useCallback<PropGetterV2<\"label\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id ?? labelId,\n      htmlFor: props.htmlFor ?? id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = React.useCallback<PropGetterV2<\"div\">>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = React.useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { getRootProps, htmlProps: _, ...context } = useFormControlProvider(\n    ownProps,\n  )\n\n  const className = cx(\"chakra-form-control\", props.className)\n  const contextValue = React.useMemo(() => context, [context])\n\n  return (\n    <FormControlProvider value={contextValue}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          {...getRootProps({}, ref)}\n          className={className}\n          __css={styles[\"container\"]}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n  const className = cx(\"chakra-form__helper-text\", props.className)\n  return (\n    <chakra.div\n      {...field?.getHelpTextProps(props, ref)}\n      __css={styles.helperText}\n      className={className}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"]},"metadata":{},"sourceType":"module"}