{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [PinInputProvider, usePinInputContext] = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nvar toArray = value => value == null ? void 0 : value.split(\"\");\n\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\n\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange: _onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var descendants = usePinInputDescendants();\n  var [moveFocus, setMoveFocus] = React.useState(true);\n  var [focusedIndex, setFocusedIndex] = React.useState(-1);\n  var [values, setValues] = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values => _onChange == null ? void 0 : _onChange(values.join(\"\"))\n  });\n  React.useEffect(() => {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) focus(first.node, {\n        nextTick: true\n      });\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n\n  }, [descendants]);\n  var focusNext = React.useCallback(index => {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) focus(next.node, {\n      nextTick: true\n    });\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback((value, index) => {\n    var nextValues = [...values];\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== \"\");\n\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = React.useCallback(() => {\n    var values = Array(descendants.count()).fill(\"\");\n    setValues(values);\n    var first = descendants.first();\n    if (first) focus(first.node);\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback((value, eventValue) => {\n    var nextValue = eventValue;\n\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n\n    return nextValue;\n  }, []);\n  var getInputProps = React.useCallback(props => {\n    var {\n      index\n    } = props,\n        rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n    /**\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n     */\n\n\n    var onChange = event => {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter((_, index) => index < descendants.count());\n\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n\n        setMoveFocus(true);\n      }\n    };\n\n    var onKeyDown = event => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n\n          if (prevInput) {\n            setValue(\"\", index - 1);\n            focus(prevInput.node);\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n\n    var onFocus = () => {\n      setFocusedIndex(index);\n    };\n\n    var onBlur = () => {\n      setFocusedIndex(-1);\n    };\n\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\n/**\n * @internal\n */\n\nexport function usePinInputField(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var {\n    getInputProps\n  } = usePinInputContext();\n  var {\n    index,\n    register\n  } = usePinInputDescendant();\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(register, ref),\n    index\n  }));\n}","map":{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["createDescendantContext","createContext","name","errorMessage","toArray","value","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","type","props","onChange","placeholder","manageFocus","otp","id","mask","uuid","useId","idProp","descendants","usePinInputDescendants","React","useControllableState","defaultValue","values","first","nextTick","focusNext","index","next","setValue","nextValues","setValues","isComplete","inputValue","onComplete","clear","Array","focus","getNextValue","nextValue","eventValue","getInputProps","rest","event","currentValue","validate","setMoveFocus","onKeyDown","prevInput","onFocus","setFocusedIndex","onBlur","hasFocus","focusedIndex","inputType","inputMode","disabled","ariaAttr","callAllHandlers","autoComplete","ref","usePinInputContext","register","usePinInputDescendant","mergeRefs"],"mappings":"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","sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\"\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [\n  PinInputProvider,\n  usePinInputContext,\n] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) focus(first.node, { nextTick: true })\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) focus(next.node, { nextTick: true })\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    if (first) focus(first.node)\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              focus(prevInput.node)\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"]},"metadata":{},"sourceType":"module"}