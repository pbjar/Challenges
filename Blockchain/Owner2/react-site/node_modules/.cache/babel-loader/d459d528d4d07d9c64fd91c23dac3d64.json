{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(_extends({}, options, {\n      meta: {\n        refetchPage: options == null ? void 0 : options.refetchPage\n      }\n    }));\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n        data = prevResult.data;\n      } else {\n        try {\n          data = options.select(state.data);\n\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n          }\n\n          this.previousSelectError = null;\n        } catch (selectError) {\n          getLogger().error(selectError);\n          error = selectError;\n          this.previousSelectError = selectError;\n          errorUpdatedAt = Date.now();\n          status = 'error';\n        }\n      }\n    } // Use query data\n    else {\n      data = state.data;\n    } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (query.state.status !== 'error' || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner2/react-site/node_modules/react-query/es/core/queryObserver.js"],"names":["_extends","_inheritsLoose","isServer","isValidTimeout","noop","replaceEqualDeep","shallowEqualObjects","timeUntilStale","notifyManager","focusManager","Subscribable","getLogger","isCancelledError","QueryObserver","_Subscribable","client","options","_this","call","trackedProps","previousSelectError","bindMethods","setOptions","_proto","prototype","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","_shouldFetchOnReconnect","shouldFetchOnWindowFocus","_shouldFetchOnWindowFocus","clearTimers","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryObserverOptions","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","defaultedOptions","query","getQueryCache","build","createResult","getCurrentResult","currentResult","trackResult","result","_this2","trackedResult","Object","keys","forEach","key","defineProperty","configurable","enumerable","get","typedKey","includes","push","getNextResult","_this3","Promise","resolve","reject","unsubscribe","subscribe","isFetching","isError","throwOnError","error","getCurrentQuery","fetch","meta","refetchPage","fetchOptimistic","_this4","then","fetchOptions","_this5","promise","catch","_this6","clearStaleTimeout","isStale","time","dataUpdatedAt","timeout","staleTimeoutId","setTimeout","_this7","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","errorUpdatedAt","status","isPreviousData","isPlaceholderData","data","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","dataUpdateCount","isSuccess","select","structuralSharing","selectError","Date","now","placeholderData","isLoading","isIdle","failureCount","fetchFailureCount","isFetched","errorUpdateCount","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","_this$options","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","some","changed","isIncluded","x","isExcluded","defaultNotifyOptions","cache","notify","onQueryUpdate","action","type","onSuccess","onError","_this8","batch","onSettled","listener","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","isStaleByTime"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,cAAP,MAA2B,0CAA3B;AACA,SAASC,QAAT,EAAmBC,cAAnB,EAAmCC,IAAnC,EAAyCC,gBAAzC,EAA2DC,mBAA3D,EAAgFC,cAAhF,QAAsG,SAAtG;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,OAAO,IAAIC,aAAa,GAAG,aAAa,UAAUC,aAAV,EAAyB;AAC/Db,EAAAA,cAAc,CAACY,aAAD,EAAgBC,aAAhB,CAAd;;AAEA,WAASD,aAAT,CAAuBE,MAAvB,EAA+BC,OAA/B,EAAwC;AACtC,QAAIC,KAAJ;;AAEAA,IAAAA,KAAK,GAAGH,aAAa,CAACI,IAAd,CAAmB,IAAnB,KAA4B,IAApC;AACAD,IAAAA,KAAK,CAACF,MAAN,GAAeA,MAAf;AACAE,IAAAA,KAAK,CAACD,OAAN,GAAgBA,OAAhB;AACAC,IAAAA,KAAK,CAACE,YAAN,GAAqB,EAArB;AACAF,IAAAA,KAAK,CAACG,mBAAN,GAA4B,IAA5B;;AAEAH,IAAAA,KAAK,CAACI,WAAN;;AAEAJ,IAAAA,KAAK,CAACK,UAAN,CAAiBN,OAAjB;;AAEA,WAAOC,KAAP;AACD;;AAED,MAAIM,MAAM,GAAGV,aAAa,CAACW,SAA3B;;AAEAD,EAAAA,MAAM,CAACF,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,SAAKI,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaD,IAAb,CAAkB,IAAlB,CAAf;AACD,GAHD;;AAKAH,EAAAA,MAAM,CAACK,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,QAAI,KAAKC,SAAL,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,WAAKC,YAAL,CAAkBC,WAAlB,CAA8B,IAA9B;;AAEA,UAAIC,kBAAkB,CAAC,KAAKF,YAAN,EAAoB,KAAKf,OAAzB,CAAtB,EAAyD;AACvD,aAAKkB,YAAL;AACD;;AAED,WAAKC,YAAL;AACD;AACF,GAVD;;AAYAZ,EAAAA,MAAM,CAACa,aAAP,GAAuB,SAASA,aAAT,GAAyB;AAC9C,QAAI,CAAC,KAAKP,SAAL,CAAeC,MAApB,EAA4B;AAC1B,WAAKO,OAAL;AACD;AACF,GAJD;;AAMAd,EAAAA,MAAM,CAACe,sBAAP,GAAgC,SAASA,sBAAT,GAAkC;AAChE,WAAOC,uBAAuB,CAAC,KAAKR,YAAN,EAAoB,KAAKf,OAAzB,CAA9B;AACD,GAFD;;AAIAO,EAAAA,MAAM,CAACiB,wBAAP,GAAkC,SAASA,wBAAT,GAAoC;AACpE,WAAOC,yBAAyB,CAAC,KAAKV,YAAN,EAAoB,KAAKf,OAAzB,CAAhC;AACD,GAFD;;AAIAO,EAAAA,MAAM,CAACc,OAAP,GAAiB,SAASA,OAAT,GAAmB;AAClC,SAAKR,SAAL,GAAiB,EAAjB;AACA,SAAKa,WAAL;AACA,SAAKX,YAAL,CAAkBY,cAAlB,CAAiC,IAAjC;AACD,GAJD;;AAMApB,EAAAA,MAAM,CAACD,UAAP,GAAoB,SAASA,UAAT,CAAoBN,OAApB,EAA6B4B,aAA7B,EAA4C;AAC9D,QAAIC,WAAW,GAAG,KAAK7B,OAAvB;AACA,QAAI8B,SAAS,GAAG,KAAKf,YAArB;AACA,SAAKf,OAAL,GAAe,KAAKD,MAAL,CAAYgC,2BAAZ,CAAwC/B,OAAxC,CAAf;;AAEA,QAAI,OAAO,KAAKA,OAAL,CAAagC,OAApB,KAAgC,WAAhC,IAA+C,OAAO,KAAKhC,OAAL,CAAagC,OAApB,KAAgC,SAAnF,EAA8F;AAC5F,YAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD,KAP6D,CAO5D;;;AAGF,QAAI,CAAC,KAAKjC,OAAL,CAAakC,QAAlB,EAA4B;AAC1B,WAAKlC,OAAL,CAAakC,QAAb,GAAwBL,WAAW,CAACK,QAApC;AACD;;AAED,SAAKC,WAAL;AACA,QAAIC,OAAO,GAAG,KAAKC,YAAL,EAAd,CAf8D,CAe3B;;AAEnC,QAAID,OAAO,IAAIE,qBAAqB,CAAC,KAAKvB,YAAN,EAAoBe,SAApB,EAA+B,KAAK9B,OAApC,EAA6C6B,WAA7C,CAApC,EAA+F;AAC7F,WAAKX,YAAL;AACD,KAnB6D,CAmB5D;;;AAGF,SAAKqB,YAAL,CAAkBX,aAAlB,EAtB8D,CAsB5B;;AAElC,QAAIQ,OAAO,KAAK,KAAKrB,YAAL,KAAsBe,SAAtB,IAAmC,KAAK9B,OAAL,CAAagC,OAAb,KAAyBH,WAAW,CAACG,OAAxE,IAAmF,KAAKhC,OAAL,CAAawC,SAAb,KAA2BX,WAAW,CAACW,SAA/H,CAAX,EAAsJ;AACpJ,WAAKC,kBAAL;AACD,KA1B6D,CA0B5D;;;AAGF,QAAIL,OAAO,KAAK,KAAKrB,YAAL,KAAsBe,SAAtB,IAAmC,KAAK9B,OAAL,CAAagC,OAAb,KAAyBH,WAAW,CAACG,OAAxE,IAAmF,KAAKhC,OAAL,CAAa0C,eAAb,KAAiCb,WAAW,CAACa,eAArI,CAAX,EAAkK;AAChK,WAAKC,qBAAL;AACD;AACF,GAhCD;;AAkCApC,EAAAA,MAAM,CAACqC,mBAAP,GAA6B,SAASA,mBAAT,CAA6B5C,OAA7B,EAAsC;AACjE,QAAI6C,gBAAgB,GAAG,KAAK9C,MAAL,CAAYgC,2BAAZ,CAAwC/B,OAAxC,CAAvB;AACA,QAAI8C,KAAK,GAAG,KAAK/C,MAAL,CAAYgD,aAAZ,GAA4BC,KAA5B,CAAkC,KAAKjD,MAAvC,EAA+C8C,gBAA/C,CAAZ;AACA,WAAO,KAAKI,YAAL,CAAkBH,KAAlB,EAAyBD,gBAAzB,CAAP;AACD,GAJD;;AAMAtC,EAAAA,MAAM,CAAC2C,gBAAP,GAA0B,SAASA,gBAAT,GAA4B;AACpD,WAAO,KAAKC,aAAZ;AACD,GAFD;;AAIA5C,EAAAA,MAAM,CAAC6C,WAAP,GAAqB,SAASA,WAAT,CAAqBC,MAArB,EAA6B;AAChD,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAIC,aAAa,GAAG,EAApB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4B,UAAUC,GAAV,EAAe;AACzCH,MAAAA,MAAM,CAACI,cAAP,CAAsBL,aAAtB,EAAqCI,GAArC,EAA0C;AACxCE,QAAAA,YAAY,EAAE,KAD0B;AAExCC,QAAAA,UAAU,EAAE,IAF4B;AAGxCC,QAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,cAAIC,QAAQ,GAAGL,GAAf;;AAEA,cAAI,CAACL,MAAM,CAACnD,YAAP,CAAoB8D,QAApB,CAA6BD,QAA7B,CAAL,EAA6C;AAC3CV,YAAAA,MAAM,CAACnD,YAAP,CAAoB+D,IAApB,CAAyBF,QAAzB;AACD;;AAED,iBAAOX,MAAM,CAACW,QAAD,CAAb;AACD;AAXuC,OAA1C;AAaD,KAdD;AAeA,WAAOT,aAAP;AACD,GApBD;;AAsBAhD,EAAAA,MAAM,CAAC4D,aAAP,GAAuB,SAASA,aAAT,CAAuBnE,OAAvB,EAAgC;AACrD,QAAIoE,MAAM,GAAG,IAAb;;AAEA,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5C,UAAIC,WAAW,GAAGJ,MAAM,CAACK,SAAP,CAAiB,UAAUpB,MAAV,EAAkB;AACnD,YAAI,CAACA,MAAM,CAACqB,UAAZ,EAAwB;AACtBF,UAAAA,WAAW;;AAEX,cAAInB,MAAM,CAACsB,OAAP,KAAmB3E,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAAC4E,YAAtD,CAAJ,EAAyE;AACvEL,YAAAA,MAAM,CAAClB,MAAM,CAACwB,KAAR,CAAN;AACD,WAFD,MAEO;AACLP,YAAAA,OAAO,CAACjB,MAAD,CAAP;AACD;AACF;AACF,OAViB,CAAlB;AAWD,KAZM,CAAP;AAaD,GAhBD;;AAkBA9C,EAAAA,MAAM,CAACuE,eAAP,GAAyB,SAASA,eAAT,GAA2B;AAClD,WAAO,KAAK/D,YAAZ;AACD,GAFD;;AAIAR,EAAAA,MAAM,CAACE,MAAP,GAAgB,SAASA,MAAT,GAAkB;AAChC,SAAKV,MAAL,CAAYgD,aAAZ,GAA4BtC,MAA5B,CAAmC,KAAKM,YAAxC;AACD,GAFD;;AAIAR,EAAAA,MAAM,CAACI,OAAP,GAAiB,SAASA,OAAT,CAAiBX,OAAjB,EAA0B;AACzC,WAAO,KAAK+E,KAAL,CAAW/F,QAAQ,CAAC,EAAD,EAAKgB,OAAL,EAAc;AACtCgF,MAAAA,IAAI,EAAE;AACJC,QAAAA,WAAW,EAAEjF,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACiF;AAD5C;AADgC,KAAd,CAAnB,CAAP;AAKD,GAND;;AAQA1E,EAAAA,MAAM,CAAC2E,eAAP,GAAyB,SAASA,eAAT,CAAyBlF,OAAzB,EAAkC;AACzD,QAAImF,MAAM,GAAG,IAAb;;AAEA,QAAItC,gBAAgB,GAAG,KAAK9C,MAAL,CAAYgC,2BAAZ,CAAwC/B,OAAxC,CAAvB;AACA,QAAI8C,KAAK,GAAG,KAAK/C,MAAL,CAAYgD,aAAZ,GAA4BC,KAA5B,CAAkC,KAAKjD,MAAvC,EAA+C8C,gBAA/C,CAAZ;AACA,WAAOC,KAAK,CAACiC,KAAN,GAAcK,IAAd,CAAmB,YAAY;AACpC,aAAOD,MAAM,CAAClC,YAAP,CAAoBH,KAApB,EAA2BD,gBAA3B,CAAP;AACD,KAFM,CAAP;AAGD,GARD;;AAUAtC,EAAAA,MAAM,CAACwE,KAAP,GAAe,SAASA,KAAT,CAAeM,YAAf,EAA6B;AAC1C,QAAIC,MAAM,GAAG,IAAb;;AAEA,WAAO,KAAKpE,YAAL,CAAkBmE,YAAlB,EAAgCD,IAAhC,CAAqC,YAAY;AACtDE,MAAAA,MAAM,CAAC/C,YAAP;;AAEA,aAAO+C,MAAM,CAACnC,aAAd;AACD,KAJM,CAAP;AAKD,GARD;;AAUA5C,EAAAA,MAAM,CAACW,YAAP,GAAsB,SAASA,YAAT,CAAsBmE,YAAtB,EAAoC;AACxD;AACA,SAAKlD,WAAL,GAFwD,CAEpC;;AAEpB,QAAIoD,OAAO,GAAG,KAAKxE,YAAL,CAAkBgE,KAAlB,CAAwB,KAAK/E,OAA7B,EAAsCqF,YAAtC,CAAd;;AAEA,QAAI,EAAEA,YAAY,IAAI,IAAhB,GAAuB,KAAK,CAA5B,GAAgCA,YAAY,CAACT,YAA/C,CAAJ,EAAkE;AAChEW,MAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAcpG,IAAd,CAAV;AACD;;AAED,WAAOmG,OAAP;AACD,GAXD;;AAaAhF,EAAAA,MAAM,CAACkC,kBAAP,GAA4B,SAASA,kBAAT,GAA8B;AACxD,QAAIgD,MAAM,GAAG,IAAb;;AAEA,SAAKC,iBAAL;;AAEA,QAAIxG,QAAQ,IAAI,KAAKiE,aAAL,CAAmBwC,OAA/B,IAA0C,CAACxG,cAAc,CAAC,KAAKa,OAAL,CAAawC,SAAd,CAA7D,EAAuF;AACrF;AACD;;AAED,QAAIoD,IAAI,GAAGrG,cAAc,CAAC,KAAK4D,aAAL,CAAmB0C,aAApB,EAAmC,KAAK7F,OAAL,CAAawC,SAAhD,CAAzB,CATwD,CAS6B;AACrF;;AAEA,QAAIsD,OAAO,GAAGF,IAAI,GAAG,CAArB;AACA,SAAKG,cAAL,GAAsBC,UAAU,CAAC,YAAY;AAC3C,UAAI,CAACP,MAAM,CAACtC,aAAP,CAAqBwC,OAA1B,EAAmC;AACjCF,QAAAA,MAAM,CAAClD,YAAP;AACD;AACF,KAJ+B,EAI7BuD,OAJ6B,CAAhC;AAKD,GAlBD;;AAoBAvF,EAAAA,MAAM,CAACoC,qBAAP,GAA+B,SAASA,qBAAT,GAAiC;AAC9D,QAAIsD,MAAM,GAAG,IAAb;;AAEA,SAAKC,oBAAL;;AAEA,QAAIhH,QAAQ,IAAI,KAAKc,OAAL,CAAagC,OAAb,KAAyB,KAArC,IAA8C,CAAC7C,cAAc,CAAC,KAAKa,OAAL,CAAa0C,eAAd,CAAjE,EAAiG;AAC/F;AACD;;AAED,SAAKyD,iBAAL,GAAyBC,WAAW,CAAC,YAAY;AAC/C,UAAIH,MAAM,CAACjG,OAAP,CAAeqG,2BAAf,IAA8C5G,YAAY,CAAC6G,SAAb,EAAlD,EAA4E;AAC1EL,QAAAA,MAAM,CAAC/E,YAAP;AACD;AACF,KAJmC,EAIjC,KAAKlB,OAAL,CAAa0C,eAJoB,CAApC;AAKD,GAdD;;AAgBAnC,EAAAA,MAAM,CAACY,YAAP,GAAsB,SAASA,YAAT,GAAwB;AAC5C,SAAKsB,kBAAL;AACA,SAAKE,qBAAL;AACD,GAHD;;AAKApC,EAAAA,MAAM,CAACmB,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,SAAKgE,iBAAL;AACA,SAAKQ,oBAAL;AACD,GAHD;;AAKA3F,EAAAA,MAAM,CAACmF,iBAAP,GAA2B,SAASA,iBAAT,GAA6B;AACtDa,IAAAA,YAAY,CAAC,KAAKR,cAAN,CAAZ;AACA,SAAKA,cAAL,GAAsBS,SAAtB;AACD,GAHD;;AAKAjG,EAAAA,MAAM,CAAC2F,oBAAP,GAA8B,SAASA,oBAAT,GAAgC;AAC5DO,IAAAA,aAAa,CAAC,KAAKN,iBAAN,CAAb;AACA,SAAKA,iBAAL,GAAyBK,SAAzB;AACD,GAHD;;AAKAjG,EAAAA,MAAM,CAAC0C,YAAP,GAAsB,SAASA,YAAT,CAAsBH,KAAtB,EAA6B9C,OAA7B,EAAsC;AAC1D,QAAI8B,SAAS,GAAG,KAAKf,YAArB;AACA,QAAIc,WAAW,GAAG,KAAK7B,OAAvB;AACA,QAAI0G,UAAU,GAAG,KAAKvD,aAAtB;AACA,QAAIwD,eAAe,GAAG,KAAKC,kBAA3B;AACA,QAAIC,iBAAiB,GAAG,KAAKC,oBAA7B;AACA,QAAIC,WAAW,GAAGjE,KAAK,KAAKhB,SAA5B;AACA,QAAIkF,iBAAiB,GAAGD,WAAW,GAAGjE,KAAK,CAACmE,KAAT,GAAiB,KAAKC,wBAAzD;AACA,QAAIC,eAAe,GAAGJ,WAAW,GAAG,KAAK5D,aAAR,GAAwB,KAAKiE,mBAA9D;AACA,QAAIH,KAAK,GAAGnE,KAAK,CAACmE,KAAlB;AACA,QAAIpB,aAAa,GAAGoB,KAAK,CAACpB,aAA1B;AAAA,QACIhB,KAAK,GAAGoC,KAAK,CAACpC,KADlB;AAAA,QAEIwC,cAAc,GAAGJ,KAAK,CAACI,cAF3B;AAAA,QAGI3C,UAAU,GAAGuC,KAAK,CAACvC,UAHvB;AAAA,QAII4C,MAAM,GAAGL,KAAK,CAACK,MAJnB;AAKA,QAAIC,cAAc,GAAG,KAArB;AACA,QAAIC,iBAAiB,GAAG,KAAxB;AACA,QAAIC,IAAJ,CAjB0D,CAiBhD;;AAEV,QAAIzH,OAAO,CAAC0H,iBAAZ,EAA+B;AAC7B,UAAItF,OAAO,GAAG,KAAKC,YAAL,EAAd;AACA,UAAIsF,YAAY,GAAG,CAACvF,OAAD,IAAYnB,kBAAkB,CAAC6B,KAAD,EAAQ9C,OAAR,CAAjD;AACA,UAAI4H,eAAe,GAAGxF,OAAO,IAAIE,qBAAqB,CAACQ,KAAD,EAAQhB,SAAR,EAAmB9B,OAAnB,EAA4B6B,WAA5B,CAAtD;;AAEA,UAAI8F,YAAY,IAAIC,eAApB,EAAqC;AACnClD,QAAAA,UAAU,GAAG,IAAb;;AAEA,YAAI,CAACmB,aAAL,EAAoB;AAClByB,UAAAA,MAAM,GAAG,SAAT;AACD;AACF;AACF,KA/ByD,CA+BxD;;;AAGF,QAAItH,OAAO,CAAC6H,gBAAR,IAA4B,CAACZ,KAAK,CAACa,eAAnC,KAAuDX,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACY,SAA1G,KAAwHT,MAAM,KAAK,OAAvI,EAAgJ;AAC9IG,MAAAA,IAAI,GAAGN,eAAe,CAACM,IAAvB;AACA5B,MAAAA,aAAa,GAAGsB,eAAe,CAACtB,aAAhC;AACAyB,MAAAA,MAAM,GAAGH,eAAe,CAACG,MAAzB;AACAC,MAAAA,cAAc,GAAG,IAAjB;AACD,KALD,CAKE;AALF,SAMK,IAAIvH,OAAO,CAACgI,MAAR,IAAkB,OAAOf,KAAK,CAACQ,IAAb,KAAsB,WAA5C,EAAyD;AAC1D;AACA,UAAIf,UAAU,IAAIO,KAAK,CAACQ,IAAN,MAAgBd,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACc,IAAnE,CAAd,IAA0FzH,OAAO,CAACgI,MAAR,MAAoBnB,iBAAiB,IAAI,IAArB,GAA4B,KAAK,CAAjC,GAAqCA,iBAAiB,CAACmB,MAA3E,CAA1F,IAAgL,CAAC,KAAK5H,mBAA1L,EAA+M;AAC7MqH,QAAAA,IAAI,GAAGf,UAAU,CAACe,IAAlB;AACD,OAFD,MAEO;AACL,YAAI;AACFA,UAAAA,IAAI,GAAGzH,OAAO,CAACgI,MAAR,CAAef,KAAK,CAACQ,IAArB,CAAP;;AAEA,cAAIzH,OAAO,CAACiI,iBAAR,KAA8B,KAAlC,EAAyC;AACvCR,YAAAA,IAAI,GAAGpI,gBAAgB,CAACqH,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACe,IAA1C,EAAgDA,IAAhD,CAAvB;AACD;;AAED,eAAKrH,mBAAL,GAA2B,IAA3B;AACD,SARD,CAQE,OAAO8H,WAAP,EAAoB;AACpBvI,UAAAA,SAAS,GAAGkF,KAAZ,CAAkBqD,WAAlB;AACArD,UAAAA,KAAK,GAAGqD,WAAR;AACA,eAAK9H,mBAAL,GAA2B8H,WAA3B;AACAb,UAAAA,cAAc,GAAGc,IAAI,CAACC,GAAL,EAAjB;AACAd,UAAAA,MAAM,GAAG,OAAT;AACD;AACF;AACF,KArBE,CAqBD;AArBC,SAsBE;AACDG,MAAAA,IAAI,GAAGR,KAAK,CAACQ,IAAb;AACD,KAhEqD,CAgEpD;;;AAGN,QAAI,OAAOzH,OAAO,CAACqI,eAAf,KAAmC,WAAnC,IAAkD,OAAOZ,IAAP,KAAgB,WAAlE,KAAkFH,MAAM,KAAK,SAAX,IAAwBA,MAAM,KAAK,MAArH,CAAJ,EAAkI;AAChI,UAAIe,eAAJ,CADgI,CAC3G;;AAErB,UAAI,CAAC3B,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACc,iBAA1C,KAAgExH,OAAO,CAACqI,eAAR,MAA6BxB,iBAAiB,IAAI,IAArB,GAA4B,KAAK,CAAjC,GAAqCA,iBAAiB,CAACwB,eAApF,CAApE,EAA0K;AACxKA,QAAAA,eAAe,GAAG3B,UAAU,CAACe,IAA7B;AACD,OAFD,MAEO;AACLY,QAAAA,eAAe,GAAG,OAAOrI,OAAO,CAACqI,eAAf,KAAmC,UAAnC,GAAgDrI,OAAO,CAACqI,eAAR,EAAhD,GAA4ErI,OAAO,CAACqI,eAAtG;;AAEA,YAAIrI,OAAO,CAACgI,MAAR,IAAkB,OAAOK,eAAP,KAA2B,WAAjD,EAA8D;AAC5D,cAAI;AACFA,YAAAA,eAAe,GAAGrI,OAAO,CAACgI,MAAR,CAAeK,eAAf,CAAlB;;AAEA,gBAAIrI,OAAO,CAACiI,iBAAR,KAA8B,KAAlC,EAAyC;AACvCI,cAAAA,eAAe,GAAGhJ,gBAAgB,CAACqH,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACe,IAA1C,EAAgDY,eAAhD,CAAlC;AACD;;AAED,iBAAKjI,mBAAL,GAA2B,IAA3B;AACD,WARD,CAQE,OAAO8H,WAAP,EAAoB;AACpBvI,YAAAA,SAAS,GAAGkF,KAAZ,CAAkBqD,WAAlB;AACArD,YAAAA,KAAK,GAAGqD,WAAR;AACA,iBAAK9H,mBAAL,GAA2B8H,WAA3B;AACAb,YAAAA,cAAc,GAAGc,IAAI,CAACC,GAAL,EAAjB;AACAd,YAAAA,MAAM,GAAG,OAAT;AACD;AACF;AACF;;AAED,UAAI,OAAOe,eAAP,KAA2B,WAA/B,EAA4C;AAC1Cf,QAAAA,MAAM,GAAG,SAAT;AACAG,QAAAA,IAAI,GAAGY,eAAP;AACAb,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF;;AAED,QAAInE,MAAM,GAAG;AACXiE,MAAAA,MAAM,EAAEA,MADG;AAEXgB,MAAAA,SAAS,EAAEhB,MAAM,KAAK,SAFX;AAGXS,MAAAA,SAAS,EAAET,MAAM,KAAK,SAHX;AAIX3C,MAAAA,OAAO,EAAE2C,MAAM,KAAK,OAJT;AAKXiB,MAAAA,MAAM,EAAEjB,MAAM,KAAK,MALR;AAMXG,MAAAA,IAAI,EAAEA,IANK;AAOX5B,MAAAA,aAAa,EAAEA,aAPJ;AAQXhB,MAAAA,KAAK,EAAEA,KARI;AASXwC,MAAAA,cAAc,EAAEA,cATL;AAUXmB,MAAAA,YAAY,EAAEvB,KAAK,CAACwB,iBAVT;AAWXC,MAAAA,SAAS,EAAEzB,KAAK,CAACa,eAAN,GAAwB,CAAxB,IAA6Bb,KAAK,CAAC0B,gBAAN,GAAyB,CAXtD;AAYXC,MAAAA,mBAAmB,EAAE3B,KAAK,CAACa,eAAN,GAAwBd,iBAAiB,CAACc,eAA1C,IAA6Db,KAAK,CAAC0B,gBAAN,GAAyB3B,iBAAiB,CAAC2B,gBAZlH;AAaXjE,MAAAA,UAAU,EAAEA,UAbD;AAcXmE,MAAAA,cAAc,EAAEvB,MAAM,KAAK,OAAX,IAAsBL,KAAK,CAACpB,aAAN,KAAwB,CAdnD;AAeX2B,MAAAA,iBAAiB,EAAEA,iBAfR;AAgBXD,MAAAA,cAAc,EAAEA,cAhBL;AAiBXuB,MAAAA,cAAc,EAAExB,MAAM,KAAK,OAAX,IAAsBL,KAAK,CAACpB,aAAN,KAAwB,CAjBnD;AAkBXF,MAAAA,OAAO,EAAEA,OAAO,CAAC7C,KAAD,EAAQ9C,OAAR,CAlBL;AAmBXW,MAAAA,OAAO,EAAE,KAAKA,OAnBH;AAoBXF,MAAAA,MAAM,EAAE,KAAKA;AApBF,KAAb;AAsBA,WAAO4C,MAAP;AACD,GA5HD;;AA8HA9C,EAAAA,MAAM,CAACwI,qBAAP,GAA+B,SAASA,qBAAT,CAA+B1F,MAA/B,EAAuCqD,UAAvC,EAAmD;AAChF,QAAI,CAACA,UAAL,EAAiB;AACf,aAAO,IAAP;AACD;;AAED,QAAIrD,MAAM,KAAKqD,UAAf,EAA2B;AACzB,aAAO,KAAP;AACD;;AAED,QAAIsC,aAAa,GAAG,KAAKhJ,OAAzB;AAAA,QACIiJ,mBAAmB,GAAGD,aAAa,CAACC,mBADxC;AAAA,QAEIC,6BAA6B,GAAGF,aAAa,CAACE,6BAFlD;;AAIA,QAAI,CAACD,mBAAD,IAAwB,CAACC,6BAA7B,EAA4D;AAC1D,aAAO,IAAP;AACD;;AAED,QAAID,mBAAmB,KAAK,SAAxB,IAAqC,CAAC,KAAK9I,YAAL,CAAkBW,MAA5D,EAAoE;AAClE,aAAO,IAAP;AACD;;AAED,QAAIqI,aAAa,GAAGF,mBAAmB,KAAK,SAAxB,GAAoC,KAAK9I,YAAzC,GAAwD8I,mBAA5E;AACA,WAAOzF,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoB+F,IAApB,CAAyB,UAAUzF,GAAV,EAAe;AAC7C,UAAIK,QAAQ,GAAGL,GAAf;AACA,UAAI0F,OAAO,GAAGhG,MAAM,CAACW,QAAD,CAAN,KAAqB0C,UAAU,CAAC1C,QAAD,CAA7C;AACA,UAAIsF,UAAU,GAAGH,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACC,IAAd,CAAmB,UAAUG,CAAV,EAAa;AAChF,eAAOA,CAAC,KAAK5F,GAAb;AACD,OAFiD,CAAlD;AAGA,UAAI6F,UAAU,GAAGN,6BAA6B,IAAI,IAAjC,GAAwC,KAAK,CAA7C,GAAiDA,6BAA6B,CAACE,IAA9B,CAAmC,UAAUG,CAAV,EAAa;AAChH,eAAOA,CAAC,KAAK5F,GAAb;AACD,OAFiE,CAAlE;AAGA,aAAO0F,OAAO,IAAI,CAACG,UAAZ,KAA2B,CAACL,aAAD,IAAkBG,UAA7C,CAAP;AACD,KAVM,CAAP;AAWD,GAjCD;;AAmCA/I,EAAAA,MAAM,CAACgC,YAAP,GAAsB,SAASA,YAAT,CAAsBX,aAAtB,EAAqC;AACzD,QAAI8E,UAAU,GAAG,KAAKvD,aAAtB;AACA,SAAKA,aAAL,GAAqB,KAAKF,YAAL,CAAkB,KAAKlC,YAAvB,EAAqC,KAAKf,OAA1C,CAArB;AACA,SAAK4G,kBAAL,GAA0B,KAAK7F,YAAL,CAAkBkG,KAA5C;AACA,SAAKH,oBAAL,GAA4B,KAAK9G,OAAjC,CAJyD,CAIf;;AAE1C,QAAIV,mBAAmB,CAAC,KAAK6D,aAAN,EAAqBuD,UAArB,CAAvB,EAAyD;AACvD;AACD,KARwD,CAQvD;;;AAGF,QAAI+C,oBAAoB,GAAG;AACzBC,MAAAA,KAAK,EAAE;AADkB,KAA3B;;AAIA,QAAI,CAAC9H,aAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiCA,aAAa,CAACf,SAAhD,MAA+D,KAA/D,IAAwE,KAAKkI,qBAAL,CAA2B,KAAK5F,aAAhC,EAA+CuD,UAA/C,CAA5E,EAAwI;AACtI+C,MAAAA,oBAAoB,CAAC5I,SAArB,GAAiC,IAAjC;AACD;;AAED,SAAK8I,MAAL,CAAY3K,QAAQ,CAAC,EAAD,EAAKyK,oBAAL,EAA2B7H,aAA3B,CAApB;AACD,GApBD;;AAsBArB,EAAAA,MAAM,CAAC4B,WAAP,GAAqB,SAASA,WAAT,GAAuB;AAC1C,QAAIW,KAAK,GAAG,KAAK/C,MAAL,CAAYgD,aAAZ,GAA4BC,KAA5B,CAAkC,KAAKjD,MAAvC,EAA+C,KAAKC,OAApD,CAAZ;;AAEA,QAAI8C,KAAK,KAAK,KAAK/B,YAAnB,EAAiC;AAC/B;AACD;;AAED,QAAIe,SAAS,GAAG,KAAKf,YAArB;AACA,SAAKA,YAAL,GAAoB+B,KAApB;AACA,SAAKoE,wBAAL,GAAgCpE,KAAK,CAACmE,KAAtC;AACA,SAAKG,mBAAL,GAA2B,KAAKjE,aAAhC;;AAEA,QAAI,KAAKd,YAAL,EAAJ,EAAyB;AACvBP,MAAAA,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACH,cAAV,CAAyB,IAAzB,CAA7B;AACAmB,MAAAA,KAAK,CAAC9B,WAAN,CAAkB,IAAlB;AACD;AACF,GAhBD;;AAkBAT,EAAAA,MAAM,CAACqJ,aAAP,GAAuB,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AACpD,QAAIjI,aAAa,GAAG,EAApB;;AAEA,QAAIiI,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7BlI,MAAAA,aAAa,CAACmI,SAAd,GAA0B,IAA1B;AACD,KAFD,MAEO,IAAIF,MAAM,CAACC,IAAP,KAAgB,OAAhB,IAA2B,CAAClK,gBAAgB,CAACiK,MAAM,CAAChF,KAAR,CAAhD,EAAgE;AACrEjD,MAAAA,aAAa,CAACoI,OAAd,GAAwB,IAAxB;AACD;;AAED,SAAKzH,YAAL,CAAkBX,aAAlB;;AAEA,QAAI,KAAKS,YAAL,EAAJ,EAAyB;AACvB,WAAKlB,YAAL;AACD;AACF,GAdD;;AAgBAZ,EAAAA,MAAM,CAACoJ,MAAP,GAAgB,SAASA,MAAT,CAAgB/H,aAAhB,EAA+B;AAC7C,QAAIqI,MAAM,GAAG,IAAb;;AAEAzK,IAAAA,aAAa,CAAC0K,KAAd,CAAoB,YAAY;AAC9B;AACA,UAAItI,aAAa,CAACmI,SAAlB,EAA6B;AAC3BE,QAAAA,MAAM,CAACjK,OAAP,CAAe+J,SAAf,IAA4B,IAA5B,GAAmC,KAAK,CAAxC,GAA4CE,MAAM,CAACjK,OAAP,CAAe+J,SAAf,CAAyBE,MAAM,CAAC9G,aAAP,CAAqBsE,IAA9C,CAA5C;AACAwC,QAAAA,MAAM,CAACjK,OAAP,CAAemK,SAAf,IAA4B,IAA5B,GAAmC,KAAK,CAAxC,GAA4CF,MAAM,CAACjK,OAAP,CAAemK,SAAf,CAAyBF,MAAM,CAAC9G,aAAP,CAAqBsE,IAA9C,EAAoD,IAApD,CAA5C;AACD,OAHD,MAGO,IAAI7F,aAAa,CAACoI,OAAlB,EAA2B;AAChCC,QAAAA,MAAM,CAACjK,OAAP,CAAegK,OAAf,IAA0B,IAA1B,GAAiC,KAAK,CAAtC,GAA0CC,MAAM,CAACjK,OAAP,CAAegK,OAAf,CAAuBC,MAAM,CAAC9G,aAAP,CAAqB0B,KAA5C,CAA1C;AACAoF,QAAAA,MAAM,CAACjK,OAAP,CAAemK,SAAf,IAA4B,IAA5B,GAAmC,KAAK,CAAxC,GAA4CF,MAAM,CAACjK,OAAP,CAAemK,SAAf,CAAyB3D,SAAzB,EAAoCyD,MAAM,CAAC9G,aAAP,CAAqB0B,KAAzD,CAA5C;AACD,OAR6B,CAQ5B;;;AAGF,UAAIjD,aAAa,CAACf,SAAlB,EAA6B;AAC3BoJ,QAAAA,MAAM,CAACpJ,SAAP,CAAiB6C,OAAjB,CAAyB,UAAU0G,QAAV,EAAoB;AAC3CA,UAAAA,QAAQ,CAACH,MAAM,CAAC9G,aAAR,CAAR;AACD,SAFD;AAGD,OAf6B,CAe5B;;;AAGF,UAAIvB,aAAa,CAAC8H,KAAlB,EAAyB;AACvBO,QAAAA,MAAM,CAAClK,MAAP,CAAcgD,aAAd,GAA8B4G,MAA9B,CAAqC;AACnC7G,UAAAA,KAAK,EAAEmH,MAAM,CAAClJ,YADqB;AAEnC+I,UAAAA,IAAI,EAAE;AAF6B,SAArC;AAID;AACF,KAxBD;AAyBD,GA5BD;;AA8BA,SAAOjK,aAAP;AACD,CA/euC,CA+etCH,YA/esC,CAAjC;;AAifP,SAAS2K,iBAAT,CAA2BvH,KAA3B,EAAkC9C,OAAlC,EAA2C;AACzC,SAAOA,OAAO,CAACgC,OAAR,KAAoB,KAApB,IAA6B,CAACc,KAAK,CAACmE,KAAN,CAAYpB,aAA1C,IAA2D,EAAE/C,KAAK,CAACmE,KAAN,CAAYK,MAAZ,KAAuB,OAAvB,IAAkCtH,OAAO,CAACsK,YAAR,KAAyB,KAA7D,CAAlE;AACD;;AAED,SAASC,oBAAT,CAA8BzH,KAA9B,EAAqC9C,OAArC,EAA8C;AAC5C,SAAOA,OAAO,CAACgC,OAAR,KAAoB,KAApB,IAA6Bc,KAAK,CAACmE,KAAN,CAAYpB,aAAZ,GAA4B,CAAzD,KAA+D7F,OAAO,CAACwK,cAAR,KAA2B,QAA3B,IAAuCxK,OAAO,CAACwK,cAAR,KAA2B,KAA3B,IAAoC7E,OAAO,CAAC7C,KAAD,EAAQ9C,OAAR,CAAjJ,CAAP;AACD;;AAED,SAASiB,kBAAT,CAA4B6B,KAA5B,EAAmC9C,OAAnC,EAA4C;AAC1C,SAAOqK,iBAAiB,CAACvH,KAAD,EAAQ9C,OAAR,CAAjB,IAAqCuK,oBAAoB,CAACzH,KAAD,EAAQ9C,OAAR,CAAhE;AACD;;AAED,SAASuB,uBAAT,CAAiCuB,KAAjC,EAAwC9C,OAAxC,EAAiD;AAC/C,SAAOA,OAAO,CAACgC,OAAR,KAAoB,KAApB,KAA8BhC,OAAO,CAACyK,kBAAR,KAA+B,QAA/B,IAA2CzK,OAAO,CAACyK,kBAAR,KAA+B,KAA/B,IAAwC9E,OAAO,CAAC7C,KAAD,EAAQ9C,OAAR,CAAxH,CAAP;AACD;;AAED,SAASyB,yBAAT,CAAmCqB,KAAnC,EAA0C9C,OAA1C,EAAmD;AACjD,SAAOA,OAAO,CAACgC,OAAR,KAAoB,KAApB,KAA8BhC,OAAO,CAAC0K,oBAAR,KAAiC,QAAjC,IAA6C1K,OAAO,CAAC0K,oBAAR,KAAiC,KAAjC,IAA0C/E,OAAO,CAAC7C,KAAD,EAAQ9C,OAAR,CAA5H,CAAP;AACD;;AAED,SAASsC,qBAAT,CAA+BQ,KAA/B,EAAsChB,SAAtC,EAAiD9B,OAAjD,EAA0D6B,WAA1D,EAAuE;AACrE,SAAO7B,OAAO,CAACgC,OAAR,KAAoB,KAApB,KAA8Bc,KAAK,KAAKhB,SAAV,IAAuBD,WAAW,CAACG,OAAZ,KAAwB,KAA7E,MAAwFc,KAAK,CAACmE,KAAN,CAAYK,MAAZ,KAAuB,OAAvB,IAAkCzF,WAAW,CAACG,OAAZ,KAAwB,KAAlJ,KAA4J2D,OAAO,CAAC7C,KAAD,EAAQ9C,OAAR,CAA1K;AACD;;AAED,SAAS2F,OAAT,CAAiB7C,KAAjB,EAAwB9C,OAAxB,EAAiC;AAC/B,SAAO8C,KAAK,CAAC6H,aAAN,CAAoB3K,OAAO,CAACwC,SAA5B,CAAP;AACD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport { isServer, isValidTimeout, noop, replaceEqualDeep, shallowEqualObjects, timeUntilStale } from './utils';\nimport { notifyManager } from './notifyManager';\nimport { focusManager } from './focusManager';\nimport { Subscribable } from './subscribable';\nimport { getLogger } from './logger';\nimport { isCancelledError } from './retryer';\nexport var QueryObserver = /*#__PURE__*/function (_Subscribable) {\n  _inheritsLoose(QueryObserver, _Subscribable);\n\n  function QueryObserver(client, options) {\n    var _this;\n\n    _this = _Subscribable.call(this) || this;\n    _this.client = client;\n    _this.options = options;\n    _this.trackedProps = [];\n    _this.previousSelectError = null;\n\n    _this.bindMethods();\n\n    _this.setOptions(options);\n\n    return _this;\n  }\n\n  var _proto = QueryObserver.prototype;\n\n  _proto.bindMethods = function bindMethods() {\n    this.remove = this.remove.bind(this);\n    this.refetch = this.refetch.bind(this);\n  };\n\n  _proto.onSubscribe = function onSubscribe() {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this);\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch();\n      }\n\n      this.updateTimers();\n    }\n  };\n\n  _proto.onUnsubscribe = function onUnsubscribe() {\n    if (!this.listeners.length) {\n      this.destroy();\n    }\n  };\n\n  _proto.shouldFetchOnReconnect = function shouldFetchOnReconnect() {\n    return _shouldFetchOnReconnect(this.currentQuery, this.options);\n  };\n\n  _proto.shouldFetchOnWindowFocus = function shouldFetchOnWindowFocus() {\n    return _shouldFetchOnWindowFocus(this.currentQuery, this.options);\n  };\n\n  _proto.destroy = function destroy() {\n    this.listeners = [];\n    this.clearTimers();\n    this.currentQuery.removeObserver(this);\n  };\n\n  _proto.setOptions = function setOptions(options, notifyOptions) {\n    var prevOptions = this.options;\n    var prevQuery = this.currentQuery;\n    this.options = this.client.defaultQueryObserverOptions(options);\n\n    if (typeof this.options.enabled !== 'undefined' && typeof this.options.enabled !== 'boolean') {\n      throw new Error('Expected enabled to be a boolean');\n    } // Keep previous query key if the user does not supply one\n\n\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey;\n    }\n\n    this.updateQuery();\n    var mounted = this.hasListeners(); // Fetch if there are subscribers\n\n    if (mounted && shouldFetchOptionally(this.currentQuery, prevQuery, this.options, prevOptions)) {\n      this.executeFetch();\n    } // Update result\n\n\n    this.updateResult(notifyOptions); // Update stale interval if needed\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.staleTime !== prevOptions.staleTime)) {\n      this.updateStaleTimeout();\n    } // Update refetch interval if needed\n\n\n    if (mounted && (this.currentQuery !== prevQuery || this.options.enabled !== prevOptions.enabled || this.options.refetchInterval !== prevOptions.refetchInterval)) {\n      this.updateRefetchInterval();\n    }\n  };\n\n  _proto.getOptimisticResult = function getOptimisticResult(options) {\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return this.createResult(query, defaultedOptions);\n  };\n\n  _proto.getCurrentResult = function getCurrentResult() {\n    return this.currentResult;\n  };\n\n  _proto.trackResult = function trackResult(result) {\n    var _this2 = this;\n\n    var trackedResult = {};\n    Object.keys(result).forEach(function (key) {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: function get() {\n          var typedKey = key;\n\n          if (!_this2.trackedProps.includes(typedKey)) {\n            _this2.trackedProps.push(typedKey);\n          }\n\n          return result[typedKey];\n        }\n      });\n    });\n    return trackedResult;\n  };\n\n  _proto.getNextResult = function getNextResult(options) {\n    var _this3 = this;\n\n    return new Promise(function (resolve, reject) {\n      var unsubscribe = _this3.subscribe(function (result) {\n        if (!result.isFetching) {\n          unsubscribe();\n\n          if (result.isError && (options == null ? void 0 : options.throwOnError)) {\n            reject(result.error);\n          } else {\n            resolve(result);\n          }\n        }\n      });\n    });\n  };\n\n  _proto.getCurrentQuery = function getCurrentQuery() {\n    return this.currentQuery;\n  };\n\n  _proto.remove = function remove() {\n    this.client.getQueryCache().remove(this.currentQuery);\n  };\n\n  _proto.refetch = function refetch(options) {\n    return this.fetch(_extends({}, options, {\n      meta: {\n        refetchPage: options == null ? void 0 : options.refetchPage\n      }\n    }));\n  };\n\n  _proto.fetchOptimistic = function fetchOptimistic(options) {\n    var _this4 = this;\n\n    var defaultedOptions = this.client.defaultQueryObserverOptions(options);\n    var query = this.client.getQueryCache().build(this.client, defaultedOptions);\n    return query.fetch().then(function () {\n      return _this4.createResult(query, defaultedOptions);\n    });\n  };\n\n  _proto.fetch = function fetch(fetchOptions) {\n    var _this5 = this;\n\n    return this.executeFetch(fetchOptions).then(function () {\n      _this5.updateResult();\n\n      return _this5.currentResult;\n    });\n  };\n\n  _proto.executeFetch = function executeFetch(fetchOptions) {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery(); // Fetch\n\n    var promise = this.currentQuery.fetch(this.options, fetchOptions);\n\n    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {\n      promise = promise.catch(noop);\n    }\n\n    return promise;\n  };\n\n  _proto.updateStaleTimeout = function updateStaleTimeout() {\n    var _this6 = this;\n\n    this.clearStaleTimeout();\n\n    if (isServer || this.currentResult.isStale || !isValidTimeout(this.options.staleTime)) {\n      return;\n    }\n\n    var time = timeUntilStale(this.currentResult.dataUpdatedAt, this.options.staleTime); // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n\n    var timeout = time + 1;\n    this.staleTimeoutId = setTimeout(function () {\n      if (!_this6.currentResult.isStale) {\n        _this6.updateResult();\n      }\n    }, timeout);\n  };\n\n  _proto.updateRefetchInterval = function updateRefetchInterval() {\n    var _this7 = this;\n\n    this.clearRefetchInterval();\n\n    if (isServer || this.options.enabled === false || !isValidTimeout(this.options.refetchInterval)) {\n      return;\n    }\n\n    this.refetchIntervalId = setInterval(function () {\n      if (_this7.options.refetchIntervalInBackground || focusManager.isFocused()) {\n        _this7.executeFetch();\n      }\n    }, this.options.refetchInterval);\n  };\n\n  _proto.updateTimers = function updateTimers() {\n    this.updateStaleTimeout();\n    this.updateRefetchInterval();\n  };\n\n  _proto.clearTimers = function clearTimers() {\n    this.clearStaleTimeout();\n    this.clearRefetchInterval();\n  };\n\n  _proto.clearStaleTimeout = function clearStaleTimeout() {\n    clearTimeout(this.staleTimeoutId);\n    this.staleTimeoutId = undefined;\n  };\n\n  _proto.clearRefetchInterval = function clearRefetchInterval() {\n    clearInterval(this.refetchIntervalId);\n    this.refetchIntervalId = undefined;\n  };\n\n  _proto.createResult = function createResult(query, options) {\n    var prevQuery = this.currentQuery;\n    var prevOptions = this.options;\n    var prevResult = this.currentResult;\n    var prevResultState = this.currentResultState;\n    var prevResultOptions = this.currentResultOptions;\n    var queryChange = query !== prevQuery;\n    var queryInitialState = queryChange ? query.state : this.currentQueryInitialState;\n    var prevQueryResult = queryChange ? this.currentResult : this.previousQueryResult;\n    var state = query.state;\n    var dataUpdatedAt = state.dataUpdatedAt,\n        error = state.error,\n        errorUpdatedAt = state.errorUpdatedAt,\n        isFetching = state.isFetching,\n        status = state.status;\n    var isPreviousData = false;\n    var isPlaceholderData = false;\n    var data; // Optimistically set result in fetching state if needed\n\n    if (options.optimisticResults) {\n      var mounted = this.hasListeners();\n      var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n      var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true;\n\n        if (!dataUpdatedAt) {\n          status = 'loading';\n        }\n      }\n    } // Keep previous data if needed\n\n\n    if (options.keepPreviousData && !state.dataUpdateCount && (prevQueryResult == null ? void 0 : prevQueryResult.isSuccess) && status !== 'error') {\n      data = prevQueryResult.data;\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt;\n      status = prevQueryResult.status;\n      isPreviousData = true;\n    } // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n        // Memoize select result\n        if (prevResult && state.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === (prevResultOptions == null ? void 0 : prevResultOptions.select) && !this.previousSelectError) {\n          data = prevResult.data;\n        } else {\n          try {\n            data = options.select(state.data);\n\n            if (options.structuralSharing !== false) {\n              data = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, data);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      } // Use query data\n      else {\n          data = state.data;\n        } // Show placeholder data if needed\n\n\n    if (typeof options.placeholderData !== 'undefined' && typeof data === 'undefined' && (status === 'loading' || status === 'idle')) {\n      var placeholderData; // Memoize placeholder data\n\n      if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {\n        placeholderData = prevResult.data;\n      } else {\n        placeholderData = typeof options.placeholderData === 'function' ? options.placeholderData() : options.placeholderData;\n\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData);\n\n            if (options.structuralSharing !== false) {\n              placeholderData = replaceEqualDeep(prevResult == null ? void 0 : prevResult.data, placeholderData);\n            }\n\n            this.previousSelectError = null;\n          } catch (selectError) {\n            getLogger().error(selectError);\n            error = selectError;\n            this.previousSelectError = selectError;\n            errorUpdatedAt = Date.now();\n            status = 'error';\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success';\n        data = placeholderData;\n        isPlaceholderData = true;\n      }\n    }\n\n    var result = {\n      status: status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data: data,\n      dataUpdatedAt: dataUpdatedAt,\n      error: error,\n      errorUpdatedAt: errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount: state.dataUpdateCount > queryInitialState.dataUpdateCount || state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching: isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData: isPlaceholderData,\n      isPreviousData: isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove\n    };\n    return result;\n  };\n\n  _proto.shouldNotifyListeners = function shouldNotifyListeners(result, prevResult) {\n    if (!prevResult) {\n      return true;\n    }\n\n    if (result === prevResult) {\n      return false;\n    }\n\n    var _this$options = this.options,\n        notifyOnChangeProps = _this$options.notifyOnChangeProps,\n        notifyOnChangePropsExclusions = _this$options.notifyOnChangePropsExclusions;\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true;\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true;\n    }\n\n    var includedProps = notifyOnChangeProps === 'tracked' ? this.trackedProps : notifyOnChangeProps;\n    return Object.keys(result).some(function (key) {\n      var typedKey = key;\n      var changed = result[typedKey] !== prevResult[typedKey];\n      var isIncluded = includedProps == null ? void 0 : includedProps.some(function (x) {\n        return x === key;\n      });\n      var isExcluded = notifyOnChangePropsExclusions == null ? void 0 : notifyOnChangePropsExclusions.some(function (x) {\n        return x === key;\n      });\n      return changed && !isExcluded && (!includedProps || isIncluded);\n    });\n  };\n\n  _proto.updateResult = function updateResult(notifyOptions) {\n    var prevResult = this.currentResult;\n    this.currentResult = this.createResult(this.currentQuery, this.options);\n    this.currentResultState = this.currentQuery.state;\n    this.currentResultOptions = this.options; // Only notify if something has changed\n\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return;\n    } // Determine which callbacks to trigger\n\n\n    var defaultNotifyOptions = {\n      cache: true\n    };\n\n    if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && this.shouldNotifyListeners(this.currentResult, prevResult)) {\n      defaultNotifyOptions.listeners = true;\n    }\n\n    this.notify(_extends({}, defaultNotifyOptions, notifyOptions));\n  };\n\n  _proto.updateQuery = function updateQuery() {\n    var query = this.client.getQueryCache().build(this.client, this.options);\n\n    if (query === this.currentQuery) {\n      return;\n    }\n\n    var prevQuery = this.currentQuery;\n    this.currentQuery = query;\n    this.currentQueryInitialState = query.state;\n    this.previousQueryResult = this.currentResult;\n\n    if (this.hasListeners()) {\n      prevQuery == null ? void 0 : prevQuery.removeObserver(this);\n      query.addObserver(this);\n    }\n  };\n\n  _proto.onQueryUpdate = function onQueryUpdate(action) {\n    var notifyOptions = {};\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true;\n    }\n\n    this.updateResult(notifyOptions);\n\n    if (this.hasListeners()) {\n      this.updateTimers();\n    }\n  };\n\n  _proto.notify = function notify(notifyOptions) {\n    var _this8 = this;\n\n    notifyManager.batch(function () {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        _this8.options.onSuccess == null ? void 0 : _this8.options.onSuccess(_this8.currentResult.data);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(_this8.currentResult.data, null);\n      } else if (notifyOptions.onError) {\n        _this8.options.onError == null ? void 0 : _this8.options.onError(_this8.currentResult.error);\n        _this8.options.onSettled == null ? void 0 : _this8.options.onSettled(undefined, _this8.currentResult.error);\n      } // Then trigger the listeners\n\n\n      if (notifyOptions.listeners) {\n        _this8.listeners.forEach(function (listener) {\n          listener(_this8.currentResult);\n        });\n      } // Then the cache listeners\n\n\n      if (notifyOptions.cache) {\n        _this8.client.getQueryCache().notify({\n          query: _this8.currentQuery,\n          type: 'observerResultsUpdated'\n        });\n      }\n    });\n  };\n\n  return QueryObserver;\n}(Subscribable);\n\nfunction shouldLoadOnMount(query, options) {\n  return options.enabled !== false && !query.state.dataUpdatedAt && !(query.state.status === 'error' && options.retryOnMount === false);\n}\n\nfunction shouldRefetchOnMount(query, options) {\n  return options.enabled !== false && query.state.dataUpdatedAt > 0 && (options.refetchOnMount === 'always' || options.refetchOnMount !== false && isStale(query, options));\n}\n\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options);\n}\n\nfunction _shouldFetchOnReconnect(query, options) {\n  return options.enabled !== false && (options.refetchOnReconnect === 'always' || options.refetchOnReconnect !== false && isStale(query, options));\n}\n\nfunction _shouldFetchOnWindowFocus(query, options) {\n  return options.enabled !== false && (options.refetchOnWindowFocus === 'always' || options.refetchOnWindowFocus !== false && isStale(query, options));\n}\n\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return options.enabled !== false && (query !== prevQuery || prevOptions.enabled === false) && (query.state.status !== 'error' || prevOptions.enabled === false) && isStale(query, options);\n}\n\nfunction isStale(query, options) {\n  return query.isStaleByTime(options.staleTime);\n}"]},"metadata":{},"sourceType":"module"}