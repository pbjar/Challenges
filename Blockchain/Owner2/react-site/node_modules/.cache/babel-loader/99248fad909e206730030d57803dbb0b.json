{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var ButtonSpinner = props => {\n  var {\n    label,\n    placement,\n    children = /*#__PURE__*/React.createElement(Spinner, {\n      color: \"currentColor\",\n      width: \"1em\",\n      height: \"1em\"\n    }),\n    className,\n    __css\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"label\", \"placement\", \"spacing\", \"children\", \"className\", \"__css\"]);\n\n  var _className = cx(\"chakra-button__spinner\", className);\n\n  var marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  var spinnerStyles = React.useMemo(() => _extends({\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    [marginProp]: label ? \"0.5rem\" : 0,\n    fontSize: \"1em\",\n    lineHeight: \"normal\"\n  }, __css), [__css, label, marginProp]);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className\n  }, rest, {\n    __css: spinnerStyles\n  }), children);\n};\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\";\n}","map":{"version":3,"sources":["../../src/button-spinner.tsx"],"names":["ButtonSpinner","props","children","__css","rest","_className","cx","marginProp","placement","spinnerStyles","display","alignItems","position","label","fontSize","lineHeight"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,OAAA,QAAA,oBAAA;AACA,SAAA,MAAA,QAAA,mBAAA;AAMA,SAAA,EAAA,EAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAWA,OAAO,IAAMA,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAA,IAAA,KAAA;AAAA,IAAA,SAAA;AAIJC,IAAAA,QAAQ,GAAA,aAAG,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AAAS,MAAA,KAAK,EAAd,cAAA;AAA8B,MAAA,KAAK,EAAnC,KAAA;AAA0C,MAAA,MAAM,EAAC;AAAjD,KAAA,CAJP;AAAA,IAAA,SAAA;AAMJC,IAAAA;AANI,MAAN,KAAA;AAAA,MAOKC,IAPL,GAAA,6BAAA,CAAA,KAAA,EAAA,CAAA,OAAA,EAAA,WAAA,EAAA,SAAA,EAAA,UAAA,EAAA,WAAA,EAAA,OAAA,CAAA,CAAA;;AAUA,MAAMC,UAAU,GAAGC,EAAE,CAAA,wBAAA,EAArB,SAAqB,CAArB;;AAEA,MAAMC,UAAU,GAAGC,SAAS,KAATA,OAAAA,GAAAA,WAAAA,GAAnB,aAAA;AAEA,MAAMC,aAAgC,GAAG,KAAK,CAAL,OAAA,CACvC,MAAA,QAAA,CAAA;AACEC,IAAAA,OAAO,EADT,MAAA;AAEEC,IAAAA,UAAU,EAFZ,QAAA;AAGEC,IAAAA,QAAQ,EAAEC,KAAK,GAAA,UAAA,GAHjB,UAAA;AAIE,KAAA,UAAA,GAAcA,KAAK,GAAA,QAAA,GAJrB,CAAA;AAKEC,IAAAA,QAAQ,EALV,KAAA;AAMEC,IAAAA,UAAU,EAAE;AANd,GAAA,EADuC,KACvC,CADuC,EAUvC,CAAA,KAAA,EAAA,KAAA,EAVF,UAUE,CAVuC,CAAzC;AAaA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,MAAD,CAAA,GAAA,EAAA,QAAA,CAAA;AAAY,IAAA,SAAS,EAAEV;AAAvB,GAAA,EAAA,IAAA,EAAA;AAA6C,IAAA,KAAK,EAAEI;AAApD,GAAA,CAAA,EADF,QACE,CADF;AA5BK,CAAA;;AAkCP,IAAA,OAAA,EAAa;AACXT,EAAAA,aAAa,CAAbA,WAAAA,GAAAA,eAAAA;AACD","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  HTMLChakraProps,\n  SystemProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  placement?: \"start\" | \"end\"\n}\n\nexport const ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    placement,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? \"0.5rem\" : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"]},"metadata":{},"sourceType":"module"}