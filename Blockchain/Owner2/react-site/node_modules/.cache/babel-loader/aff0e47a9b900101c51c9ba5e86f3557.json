{"ast":null,"code":"import React from 'react';\nvar defaultContext = /*#__PURE__*/React.createContext(undefined);\nvar QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(contextSharing) {\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport var useQueryClient = function useQueryClient() {\n  var queryClient = React.useContext(getQueryClientContext(React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport var QueryClientProvider = function QueryClientProvider(_ref) {\n  var client = _ref.client,\n      _ref$contextSharing = _ref.contextSharing,\n      contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing,\n      children = _ref.children;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  var Context = getQueryClientContext(contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner2/react-site/node_modules/react-query/es/react/QueryClientProvider.js"],"names":["React","defaultContext","createContext","undefined","QueryClientSharingContext","getQueryClientContext","contextSharing","window","ReactQueryClientContext","useQueryClient","queryClient","useContext","Error","QueryClientProvider","_ref","client","_ref$contextSharing","children","useEffect","mount","unmount","Context","createElement","Provider","value"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAIC,cAAc,GAAG,aAAaD,KAAK,CAACE,aAAN,CAAoBC,SAApB,CAAlC;AACA,IAAIC,yBAAyB,GAAG,aAAaJ,KAAK,CAACE,aAAN,CAAoB,KAApB,CAA7C,C,CAAyE;AACzE;AACA;AACA;AACA;AACA;;AAEA,SAASG,qBAAT,CAA+BC,cAA/B,EAA+C;AAC7C,MAAIA,cAAc,IAAI,OAAOC,MAAP,KAAkB,WAAxC,EAAqD;AACnD,QAAI,CAACA,MAAM,CAACC,uBAAZ,EAAqC;AACnCD,MAAAA,MAAM,CAACC,uBAAP,GAAiCP,cAAjC;AACD;;AAED,WAAOM,MAAM,CAACC,uBAAd;AACD;;AAED,SAAOP,cAAP;AACD;;AAED,OAAO,IAAIQ,cAAc,GAAG,SAASA,cAAT,GAA0B;AACpD,MAAIC,WAAW,GAAGV,KAAK,CAACW,UAAN,CAAiBN,qBAAqB,CAACL,KAAK,CAACW,UAAN,CAAiBP,yBAAjB,CAAD,CAAtC,CAAlB;;AAEA,MAAI,CAACM,WAAL,EAAkB;AAChB,UAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AAED,SAAOF,WAAP;AACD,CARM;AASP,OAAO,IAAIG,mBAAmB,GAAG,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AAClE,MAAIC,MAAM,GAAGD,IAAI,CAACC,MAAlB;AAAA,MACIC,mBAAmB,GAAGF,IAAI,CAACR,cAD/B;AAAA,MAEIA,cAAc,GAAGU,mBAAmB,KAAK,KAAK,CAA7B,GAAiC,KAAjC,GAAyCA,mBAF9D;AAAA,MAGIC,QAAQ,GAAGH,IAAI,CAACG,QAHpB;AAIAjB,EAAAA,KAAK,CAACkB,SAAN,CAAgB,YAAY;AAC1BH,IAAAA,MAAM,CAACI,KAAP;AACA,WAAO,YAAY;AACjBJ,MAAAA,MAAM,CAACK,OAAP;AACD,KAFD;AAGD,GALD,EAKG,CAACL,MAAD,CALH;AAMA,MAAIM,OAAO,GAAGhB,qBAAqB,CAACC,cAAD,CAAnC;AACA,SAAO,aAAaN,KAAK,CAACsB,aAAN,CAAoBlB,yBAAyB,CAACmB,QAA9C,EAAwD;AAC1EC,IAAAA,KAAK,EAAElB;AADmE,GAAxD,EAEjB,aAAaN,KAAK,CAACsB,aAAN,CAAoBD,OAAO,CAACE,QAA5B,EAAsC;AACpDC,IAAAA,KAAK,EAAET;AAD6C,GAAtC,EAEbE,QAFa,CAFI,CAApB;AAKD,CAjBM","sourcesContent":["import React from 'react';\nvar defaultContext = /*#__PURE__*/React.createContext(undefined);\nvar QueryClientSharingContext = /*#__PURE__*/React.createContext(false); // if contextSharing is on, we share the first and at least one\n// instance of the context across the window\n// to ensure that if React Query is used across\n// different bundles or microfrontends they will\n// all use the same **instance** of context, regardless\n// of module scoping.\n\nfunction getQueryClientContext(contextSharing) {\n  if (contextSharing && typeof window !== 'undefined') {\n    if (!window.ReactQueryClientContext) {\n      window.ReactQueryClientContext = defaultContext;\n    }\n\n    return window.ReactQueryClientContext;\n  }\n\n  return defaultContext;\n}\n\nexport var useQueryClient = function useQueryClient() {\n  var queryClient = React.useContext(getQueryClientContext(React.useContext(QueryClientSharingContext)));\n\n  if (!queryClient) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one');\n  }\n\n  return queryClient;\n};\nexport var QueryClientProvider = function QueryClientProvider(_ref) {\n  var client = _ref.client,\n      _ref$contextSharing = _ref.contextSharing,\n      contextSharing = _ref$contextSharing === void 0 ? false : _ref$contextSharing,\n      children = _ref.children;\n  React.useEffect(function () {\n    client.mount();\n    return function () {\n      client.unmount();\n    };\n  }, [client]);\n  var Context = getQueryClientContext(contextSharing);\n  return /*#__PURE__*/React.createElement(QueryClientSharingContext.Provider, {\n    value: contextSharing\n  }, /*#__PURE__*/React.createElement(Context.Provider, {\n    value: client\n  }, children));\n};"]},"metadata":{},"sourceType":"module"}