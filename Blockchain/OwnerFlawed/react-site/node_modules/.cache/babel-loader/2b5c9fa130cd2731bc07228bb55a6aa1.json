{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function connectContractToSigner(contract, options, library) {\n  if (contract.signer) {\n    return contract;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.signer) {\n    return contract.connect(options.signer);\n  }\n\n  if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n    return contract.connect(library.getSigner());\n  }\n\n  throw new TypeError('No signer available in contract, options or library');\n}\nexport function useContractFunction(contract, functionName, options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state\n  } = usePromiseTransaction(chainId, options);\n  const [events, setEvents] = useState(undefined);\n  const send = useCallback(async (...args) => {\n    const contractWithSigner = connectContractToSigner(contract, options, library);\n    const receipt = await promiseTransaction(contractWithSigner[functionName](...args));\n\n    if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n      const events = receipt.logs.filter(log => log.address === contract.address).map(log => contract.interface.parseLog(log));\n      setEvents(events);\n    }\n  }, [contract, functionName, options, library]);\n  return {\n    send,\n    state,\n    events\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useContractFunction.ts"],"names":[],"mappings":"AAGA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AAGA,OAAM,SAAU,uBAAV,CAAkC,QAAlC,EAAsD,OAAtD,EAAoF,OAApF,EAA0G;AAC9G,MAAI,QAAQ,CAAC,MAAb,EAAqB;AACnB,WAAO,QAAP;AACD;;AAED,MAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAb,EAAqB;AACnB,WAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,MAAzB,CAAP;AACD;;AAED,MAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAAJ,EAA0B;AACxB,WAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,SAAR,EAAjB,CAAP;AACD;;AAED,QAAM,IAAI,SAAJ,CAAc,qDAAd,CAAN;AACD;AAED,OAAM,SAAU,mBAAV,CAA8B,QAA9B,EAAkD,YAAlD,EAAwE,OAAxE,EAAoG;AACxG,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAuB,SAAS,EAAtC;AACA,QAAM;AAAE,IAAA,kBAAF;AAAsB,IAAA;AAAtB,MAAgC,qBAAqB,CAAC,OAAD,EAAU,OAAV,CAA3D;AACA,QAAM,CAAC,MAAD,EAAS,SAAT,IAAsB,QAAQ,CAA+B,SAA/B,CAApC;AAEA,QAAM,IAAI,GAAG,WAAW,CACtB,OAAO,GAAG,IAAV,KAAyB;AACvB,UAAM,kBAAkB,GAAG,uBAAuB,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,CAAlD;AACA,UAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,kBAAkB,CAAC,YAAD,CAAlB,CAAiC,GAAG,IAApC,CAAD,CAAxC;;AACA,QAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAb,EAAmB;AACjB,YAAM,MAAM,GAAG,OAAO,CAAC,IAAR,CACZ,MADY,CACJ,GAAD,IAAS,GAAG,CAAC,OAAJ,KAAgB,QAAQ,CAAC,OAD7B,EAEZ,GAFY,CAEP,GAAD,IAAS,QAAQ,CAAC,SAAT,CAAmB,QAAnB,CAA4B,GAA5B,CAFD,CAAf;AAGA,MAAA,SAAS,CAAC,MAAD,CAAT;AACD;AACF,GAVqB,EAWtB,CAAC,QAAD,EAAW,YAAX,EAAyB,OAAzB,EAAkC,OAAlC,CAXsB,CAAxB;AAcA,SAAO;AAAE,IAAA,IAAF;AAAQ,IAAA,KAAR;AAAe,IAAA;AAAf,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from 'react';\nimport { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function connectContractToSigner(contract, options, library) {\n    if (contract.signer) {\n        return contract;\n    }\n    if (options === null || options === void 0 ? void 0 : options.signer) {\n        return contract.connect(options.signer);\n    }\n    if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n        return contract.connect(library.getSigner());\n    }\n    throw new TypeError('No signer available in contract, options or library');\n}\nexport function useContractFunction(contract, functionName, options) {\n    const { library, chainId } = useEthers();\n    const { promiseTransaction, state } = usePromiseTransaction(chainId, options);\n    const [events, setEvents] = useState(undefined);\n    const send = useCallback(async (...args) => {\n        const contractWithSigner = connectContractToSigner(contract, options, library);\n        const receipt = await promiseTransaction(contractWithSigner[functionName](...args));\n        if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {\n            const events = receipt.logs\n                .filter((log) => log.address === contract.address)\n                .map((log) => contract.interface.parseLog(log));\n            setEvents(events);\n        }\n    }, [contract, functionName, options, library]);\n    return { send, state, events };\n}\n//# sourceMappingURL=useContractFunction.js.map"]},"metadata":{},"sourceType":"module"}