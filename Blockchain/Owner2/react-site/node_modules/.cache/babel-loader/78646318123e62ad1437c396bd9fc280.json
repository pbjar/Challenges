{"ast":null,"code":"import Badge from \"./badge\";\nvar parts = [\"container\", \"label\", \"closeButton\"];\nvar baseStyleContainer = {\n  fontWeight: \"medium\",\n  lineHeight: 1.2,\n  outline: 0,\n  _focus: {\n    boxShadow: \"outline\"\n  }\n};\nvar baseStyleLabel = {\n  lineHeight: 1.2\n};\nvar baseStyleCloseButton = {\n  fontSize: \"18px\",\n  w: \"1.25rem\",\n  h: \"1.25rem\",\n  transitionProperty: \"common\",\n  transitionDuration: \"normal\",\n  borderRadius: \"full\",\n  marginStart: \"0.375rem\",\n  marginEnd: \"-1\",\n  opacity: 0.5,\n  _disabled: {\n    opacity: 0.4\n  },\n  _focus: {\n    boxShadow: \"outline\",\n    bg: \"rgba(0, 0, 0, 0.14)\"\n  },\n  _hover: {\n    opacity: 0.8\n  },\n  _active: {\n    opacity: 1\n  }\n};\nvar baseStyle = {\n  container: baseStyleContainer,\n  label: baseStyleLabel,\n  closeButton: baseStyleCloseButton\n};\nvar sizes = {\n  sm: {\n    container: {\n      minH: \"1.25rem\",\n      minW: \"1.25rem\",\n      fontSize: \"xs\",\n      px: 2,\n      borderRadius: \"md\"\n    },\n    closeButton: {\n      marginEnd: \"-2px\",\n      marginStart: \"0.35rem\"\n    }\n  },\n  md: {\n    container: {\n      minH: \"1.5rem\",\n      minW: \"1.5rem\",\n      fontSize: \"sm\",\n      borderRadius: \"md\",\n      px: 2\n    }\n  },\n  lg: {\n    container: {\n      minH: 8,\n      minW: 8,\n      fontSize: \"md\",\n      borderRadius: \"md\",\n      px: 3\n    }\n  }\n};\nvar variants = {\n  subtle: props => ({\n    container: Badge.variants.subtle(props)\n  }),\n  solid: props => ({\n    container: Badge.variants.solid(props)\n  }),\n  outline: props => ({\n    container: Badge.variants.outline(props)\n  })\n};\nvar defaultProps = {\n  size: \"md\",\n  variant: \"subtle\",\n  colorScheme: \"gray\"\n};\nexport default {\n  parts,\n  variants,\n  baseStyle,\n  sizes,\n  defaultProps\n};","map":{"version":3,"sources":["../../../src/components/tag.ts"],"names":["parts","baseStyleContainer","fontWeight","lineHeight","outline","_focus","boxShadow","baseStyleLabel","baseStyleCloseButton","fontSize","w","h","transitionProperty","transitionDuration","borderRadius","marginStart","marginEnd","opacity","_disabled","bg","_hover","_active","baseStyle","container","label","closeButton","sizes","sm","minH","minW","px","md","lg","variants","subtle","props","Badge","solid","defaultProps","size","variant","colorScheme"],"mappings":"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","sourcesContent":["import Badge from \"./badge\"\n\nconst parts = [\"container\", \"label\", \"closeButton\"]\n\ntype Dict = Record<string, any>\n\nconst baseStyleContainer = {\n  fontWeight: \"medium\",\n  lineHeight: 1.2,\n  outline: 0,\n  _focus: {\n    boxShadow: \"outline\",\n  },\n}\n\nconst baseStyleLabel = {\n  lineHeight: 1.2,\n}\n\nconst baseStyleCloseButton = {\n  fontSize: \"18px\",\n  w: \"1.25rem\",\n  h: \"1.25rem\",\n  transitionProperty: \"common\",\n  transitionDuration: \"normal\",\n  borderRadius: \"full\",\n  marginStart: \"0.375rem\",\n  marginEnd: \"-1\",\n  opacity: 0.5,\n  _disabled: {\n    opacity: 0.4,\n  },\n  _focus: {\n    boxShadow: \"outline\",\n    bg: \"rgba(0, 0, 0, 0.14)\",\n  },\n  _hover: { opacity: 0.8 },\n  _active: { opacity: 1 },\n}\n\nconst baseStyle = {\n  container: baseStyleContainer,\n  label: baseStyleLabel,\n  closeButton: baseStyleCloseButton,\n}\n\nconst sizes = {\n  sm: {\n    container: {\n      minH: \"1.25rem\",\n      minW: \"1.25rem\",\n      fontSize: \"xs\",\n      px: 2,\n      borderRadius: \"md\",\n    },\n    closeButton: {\n      marginEnd: \"-2px\",\n      marginStart: \"0.35rem\",\n    },\n  },\n  md: {\n    container: {\n      minH: \"1.5rem\",\n      minW: \"1.5rem\",\n      fontSize: \"sm\",\n      borderRadius: \"md\",\n      px: 2,\n    },\n  },\n  lg: {\n    container: {\n      minH: 8,\n      minW: 8,\n      fontSize: \"md\",\n      borderRadius: \"md\",\n      px: 3,\n    },\n  },\n}\n\nconst variants = {\n  subtle: (props: Dict) => ({\n    container: Badge.variants.subtle(props),\n  }),\n  solid: (props: Dict) => ({\n    container: Badge.variants.solid(props),\n  }),\n  outline: (props: Dict) => ({\n    container: Badge.variants.outline(props),\n  }),\n}\n\nconst defaultProps = {\n  size: \"md\",\n  variant: \"subtle\",\n  colorScheme: \"gray\",\n}\n\nexport default {\n  parts,\n  variants,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"]},"metadata":{},"sourceType":"module"}