{"ast":null,"code":"import { scheduleMicrotask } from './utils'; // TYPES\n// CLASS\n\nvar NotifyManager = /*#__PURE__*/function () {\n  function NotifyManager() {\n    this.queue = [];\n    this.transactions = 0;\n\n    this.notifyFn = function (callback) {\n      callback();\n    };\n\n    this.batchNotifyFn = function (callback) {\n      callback();\n    };\n  }\n\n  var _proto = NotifyManager.prototype;\n\n  _proto.batch = function batch(callback) {\n    this.transactions++;\n    var result = callback();\n    this.transactions--;\n\n    if (!this.transactions) {\n      this.flush();\n    }\n\n    return result;\n  };\n\n  _proto.schedule = function schedule(callback) {\n    var _this = this;\n\n    if (this.transactions) {\n      this.queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        _this.notifyFn(callback);\n      });\n    }\n  }\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  ;\n\n  _proto.batchCalls = function batchCalls(callback) {\n    var _this2 = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2.schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n\n  _proto.flush = function flush() {\n    var _this3 = this;\n\n    var queue = this.queue;\n    this.queue = [];\n\n    if (queue.length) {\n      scheduleMicrotask(function () {\n        _this3.batchNotifyFn(function () {\n          queue.forEach(function (callback) {\n            _this3.notifyFn(callback);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  ;\n\n  _proto.setNotifyFunction = function setNotifyFunction(fn) {\n    this.notifyFn = fn;\n  }\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  ;\n\n  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    this.batchNotifyFn = fn;\n  };\n\n  return NotifyManager;\n}(); // SINGLETON\n\n\nexport var notifyManager = new NotifyManager();","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner/react-site/node_modules/react-query/es/core/notifyManager.js"],"names":["scheduleMicrotask","NotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","_proto","prototype","batch","result","flush","schedule","_this","push","batchCalls","_this2","_len","arguments","length","args","Array","_key","apply","_this3","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,SAAlC,C,CAA6C;AAE7C;;AACA,IAAIC,aAAa,GAAG,aAAa,YAAY;AAC3C,WAASA,aAAT,GAAyB;AACvB,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,YAAL,GAAoB,CAApB;;AAEA,SAAKC,QAAL,GAAgB,UAAUC,QAAV,EAAoB;AAClCA,MAAAA,QAAQ;AACT,KAFD;;AAIA,SAAKC,aAAL,GAAqB,UAAUD,QAAV,EAAoB;AACvCA,MAAAA,QAAQ;AACT,KAFD;AAGD;;AAED,MAAIE,MAAM,GAAGN,aAAa,CAACO,SAA3B;;AAEAD,EAAAA,MAAM,CAACE,KAAP,GAAe,SAASA,KAAT,CAAeJ,QAAf,EAAyB;AACtC,SAAKF,YAAL;AACA,QAAIO,MAAM,GAAGL,QAAQ,EAArB;AACA,SAAKF,YAAL;;AAEA,QAAI,CAAC,KAAKA,YAAV,EAAwB;AACtB,WAAKQ,KAAL;AACD;;AAED,WAAOD,MAAP;AACD,GAVD;;AAYAH,EAAAA,MAAM,CAACK,QAAP,GAAkB,SAASA,QAAT,CAAkBP,QAAlB,EAA4B;AAC5C,QAAIQ,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKV,YAAT,EAAuB;AACrB,WAAKD,KAAL,CAAWY,IAAX,CAAgBT,QAAhB;AACD,KAFD,MAEO;AACLL,MAAAA,iBAAiB,CAAC,YAAY;AAC5Ba,QAAAA,KAAK,CAACT,QAAN,CAAeC,QAAf;AACD,OAFgB,CAAjB;AAGD;AACF;AACD;AACF;AACA;AAbE;;AAgBAE,EAAAA,MAAM,CAACQ,UAAP,GAAoB,SAASA,UAAT,CAAoBV,QAApB,EAA8B;AAChD,QAAIW,MAAM,GAAG,IAAb;;AAEA,WAAO,YAAY;AACjB,WAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,QAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAEDN,MAAAA,MAAM,CAACJ,QAAP,CAAgB,YAAY;AAC1BP,QAAAA,QAAQ,CAACkB,KAAT,CAAe,KAAK,CAApB,EAAuBH,IAAvB;AACD,OAFD;AAGD,KARD;AASD,GAZD;;AAcAb,EAAAA,MAAM,CAACI,KAAP,GAAe,SAASA,KAAT,GAAiB;AAC9B,QAAIa,MAAM,GAAG,IAAb;;AAEA,QAAItB,KAAK,GAAG,KAAKA,KAAjB;AACA,SAAKA,KAAL,GAAa,EAAb;;AAEA,QAAIA,KAAK,CAACiB,MAAV,EAAkB;AAChBnB,MAAAA,iBAAiB,CAAC,YAAY;AAC5BwB,QAAAA,MAAM,CAAClB,aAAP,CAAqB,YAAY;AAC/BJ,UAAAA,KAAK,CAACuB,OAAN,CAAc,UAAUpB,QAAV,EAAoB;AAChCmB,YAAAA,MAAM,CAACpB,QAAP,CAAgBC,QAAhB;AACD,WAFD;AAGD,SAJD;AAKD,OANgB,CAAjB;AAOD;AACF;AACD;AACF;AACA;AACA;AAnBE;;AAsBAE,EAAAA,MAAM,CAACmB,iBAAP,GAA2B,SAASA,iBAAT,CAA2BC,EAA3B,EAA+B;AACxD,SAAKvB,QAAL,GAAgBuB,EAAhB;AACD;AACD;AACF;AACA;AACA;AANE;;AASApB,EAAAA,MAAM,CAACqB,sBAAP,GAAgC,SAASA,sBAAT,CAAgCD,EAAhC,EAAoC;AAClE,SAAKrB,aAAL,GAAqBqB,EAArB;AACD,GAFD;;AAIA,SAAO1B,aAAP;AACD,CA9FgC,EAAjC,C,CA8FK;;;AAGL,OAAO,IAAI4B,aAAa,GAAG,IAAI5B,aAAJ,EAApB","sourcesContent":["import { scheduleMicrotask } from './utils'; // TYPES\n\n// CLASS\nvar NotifyManager = /*#__PURE__*/function () {\n  function NotifyManager() {\n    this.queue = [];\n    this.transactions = 0;\n\n    this.notifyFn = function (callback) {\n      callback();\n    };\n\n    this.batchNotifyFn = function (callback) {\n      callback();\n    };\n  }\n\n  var _proto = NotifyManager.prototype;\n\n  _proto.batch = function batch(callback) {\n    this.transactions++;\n    var result = callback();\n    this.transactions--;\n\n    if (!this.transactions) {\n      this.flush();\n    }\n\n    return result;\n  };\n\n  _proto.schedule = function schedule(callback) {\n    var _this = this;\n\n    if (this.transactions) {\n      this.queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        _this.notifyFn(callback);\n      });\n    }\n  }\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  ;\n\n  _proto.batchCalls = function batchCalls(callback) {\n    var _this2 = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2.schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n\n  _proto.flush = function flush() {\n    var _this3 = this;\n\n    var queue = this.queue;\n    this.queue = [];\n\n    if (queue.length) {\n      scheduleMicrotask(function () {\n        _this3.batchNotifyFn(function () {\n          queue.forEach(function (callback) {\n            _this3.notifyFn(callback);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  ;\n\n  _proto.setNotifyFunction = function setNotifyFunction(fn) {\n    this.notifyFn = fn;\n  }\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  ;\n\n  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    this.batchNotifyFn = fn;\n  };\n\n  return NotifyManager;\n}(); // SINGLETON\n\n\nexport var notifyManager = new NotifyManager();"]},"metadata":{},"sourceType":"module"}