{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers, useLocalStorage } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { useNotificationsContext } from '../notifications/context';\nimport { TransactionsContext } from './context';\nimport { DEFAULT_STORED_TRANSACTIONS } from './model';\nimport { transactionReducer } from './reducer';\nexport function TransactionProvider({\n  children\n}) {\n  const {\n    chainId,\n    library\n  } = useEthers();\n  const blockNumber = useBlockNumber();\n  const [storage, setStorage] = useLocalStorage('transactions');\n  const [transactions, dispatch] = useReducer(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS);\n  const {\n    addNotification\n  } = useNotificationsContext();\n  useEffect(() => {\n    setStorage(transactions);\n  }, [transactions]);\n  const addTransaction = useCallback(payload => {\n    dispatch({\n      type: 'ADD_TRANSACTION',\n      payload\n    });\n    addNotification({\n      notification: {\n        type: 'transactionStarted',\n        transaction: payload.transaction,\n        submittedAt: payload.submittedAt,\n        transactionName: payload.transactionName\n      },\n      chainId: payload.transaction.chainId\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    const updateTransactions = async () => {\n      var _a;\n\n      if (!chainId || !library || !blockNumber) {\n        return;\n      }\n\n      const checkTransaction = async tx => {\n        if (tx.receipt || !shouldCheck(blockNumber, tx)) {\n          return tx;\n        }\n\n        try {\n          const receipt = await library.getTransactionReceipt(tx.transaction.hash);\n\n          if (receipt) {\n            const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed';\n            addNotification({\n              notification: {\n                type,\n                submittedAt: Date.now(),\n                transaction: tx.transaction,\n                receipt,\n                transactionName: tx.transactionName\n              },\n              chainId\n            });\n            return Object.assign(Object.assign({}, tx), {\n              receipt\n            });\n          } else {\n            return Object.assign(Object.assign({}, tx), {\n              lastCheckedBlockNumber: blockNumber\n            });\n          }\n        } catch (error) {\n          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error);\n        }\n\n        return tx;\n      };\n\n      const chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];\n      const newTransactions = [];\n\n      for (const tx of chainTransactions) {\n        const newTransaction = await checkTransaction(tx);\n        newTransactions.push(newTransaction);\n      }\n\n      dispatch({\n        type: 'UPDATE_TRANSACTIONS',\n        chainId,\n        transactions: newTransactions\n      });\n    };\n\n    updateTransactions();\n  }, [chainId, library, blockNumber]);\n  return _jsx(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      addTransaction\n    },\n    children: children\n  }, void 0);\n}\n\nfunction shouldCheck(blockNumber, tx) {\n  if (tx.receipt) {\n    return false;\n  }\n\n  if (!tx.lastCheckedBlockNumber) {\n    return true;\n  }\n\n  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;\n\n  if (blocksSinceCheck < 1) {\n    return false;\n  }\n\n  const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}","map":{"version":3,"sources":["../../../../../src/providers/transactions/provider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useReducer } from 'react';\nimport { useEthers, useLocalStorage } from '../../hooks';\nimport { useBlockNumber } from '../blockNumber/context';\nimport { useNotificationsContext } from '../notifications/context';\nimport { TransactionsContext } from './context';\nimport { DEFAULT_STORED_TRANSACTIONS } from './model';\nimport { transactionReducer } from './reducer';\nexport function TransactionProvider({ children }) {\n    const { chainId, library } = useEthers();\n    const blockNumber = useBlockNumber();\n    const [storage, setStorage] = useLocalStorage('transactions');\n    const [transactions, dispatch] = useReducer(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS);\n    const { addNotification } = useNotificationsContext();\n    useEffect(() => {\n        setStorage(transactions);\n    }, [transactions]);\n    const addTransaction = useCallback((payload) => {\n        dispatch({\n            type: 'ADD_TRANSACTION',\n            payload,\n        });\n        addNotification({\n            notification: {\n                type: 'transactionStarted',\n                transaction: payload.transaction,\n                submittedAt: payload.submittedAt,\n                transactionName: payload.transactionName,\n            },\n            chainId: payload.transaction.chainId,\n        });\n    }, [dispatch]);\n    useEffect(() => {\n        const updateTransactions = async () => {\n            var _a;\n            if (!chainId || !library || !blockNumber) {\n                return;\n            }\n            const checkTransaction = async (tx) => {\n                if (tx.receipt || !shouldCheck(blockNumber, tx)) {\n                    return tx;\n                }\n                try {\n                    const receipt = await library.getTransactionReceipt(tx.transaction.hash);\n                    if (receipt) {\n                        const type = receipt.status === 0 ? 'transactionFailed' : 'transactionSucceed';\n                        addNotification({\n                            notification: {\n                                type,\n                                submittedAt: Date.now(),\n                                transaction: tx.transaction,\n                                receipt,\n                                transactionName: tx.transactionName,\n                            },\n                            chainId,\n                        });\n                        return Object.assign(Object.assign({}, tx), { receipt });\n                    }\n                    else {\n                        return Object.assign(Object.assign({}, tx), { lastCheckedBlockNumber: blockNumber });\n                    }\n                }\n                catch (error) {\n                    console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error);\n                }\n                return tx;\n            };\n            const chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];\n            const newTransactions = [];\n            for (const tx of chainTransactions) {\n                const newTransaction = await checkTransaction(tx);\n                newTransactions.push(newTransaction);\n            }\n            dispatch({ type: 'UPDATE_TRANSACTIONS', chainId, transactions: newTransactions });\n        };\n        updateTransactions();\n    }, [chainId, library, blockNumber]);\n    return _jsx(TransactionsContext.Provider, { value: { transactions, addTransaction }, children: children }, void 0);\n}\nfunction shouldCheck(blockNumber, tx) {\n    if (tx.receipt) {\n        return false;\n    }\n    if (!tx.lastCheckedBlockNumber) {\n        return true;\n    }\n    const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;\n    if (blocksSinceCheck < 1) {\n        return false;\n    }\n    const minutesPending = (Date.now() - tx.submittedAt) / 1000 / 60;\n    if (minutesPending > 60) {\n        // every 10 blocks if pending for longer than an hour\n        return blocksSinceCheck > 9;\n    }\n    if (minutesPending > 5) {\n        // every 3 blocks if pending more than 5 minutes\n        return blocksSinceCheck > 2;\n    }\n    // otherwise every block\n    return true;\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}