{"ast":null,"code":"import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function connectContractToSigner(contract, options, library) {\n  if (contract.signer) {\n    return contract;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.signer) {\n    return contract.connect(options.signer);\n  }\n\n  if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n    return contract.connect(library.getSigner());\n  }\n\n  throw new TypeError('No signer available in contract, options or library');\n}\nexport function useContractFunction(contract, functionName, options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state\n  } = usePromiseTransaction(chainId, options);\n\n  const send = async (...args) => {\n    const contractWithSigner = connectContractToSigner(contract, options, library);\n    await promiseTransaction(contractWithSigner[functionName](...args));\n  };\n\n  return {\n    send,\n    state\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useContractFunction.ts"],"names":[],"mappings":"AAGA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AAEA,OAAM,SAAU,uBAAV,CAAkC,QAAlC,EAAsD,OAAtD,EAAoF,OAApF,EAA0G;AAC9G,MAAI,QAAQ,CAAC,MAAb,EAAqB;AACnB,WAAO,QAAP;AACD;;AAED,MAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAb,EAAqB;AACnB,WAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,MAAzB,CAAP;AACD;;AAED,MAAI,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAAJ,EAA0B;AACxB,WAAO,QAAQ,CAAC,OAAT,CAAiB,OAAO,CAAC,SAAR,EAAjB,CAAP;AACD;;AAED,QAAM,IAAI,SAAJ,CAAc,qDAAd,CAAN;AACD;AAED,OAAM,SAAU,mBAAV,CAA8B,QAA9B,EAAkD,YAAlD,EAAwE,OAAxE,EAAoG;AACxG,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAuB,SAAS,EAAtC;AACA,QAAM;AAAE,IAAA,kBAAF;AAAsB,IAAA;AAAtB,MAAgC,qBAAqB,CAAC,OAAD,EAAU,OAAV,CAA3D;;AAEA,QAAM,IAAI,GAAG,OAAO,GAAG,IAAV,KAAyB;AACpC,UAAM,kBAAkB,GAAG,uBAAuB,CAAC,QAAD,EAAW,OAAX,EAAoB,OAApB,CAAlD;AACA,UAAM,kBAAkB,CAAC,kBAAkB,CAAC,YAAD,CAAlB,CAAiC,GAAG,IAApC,CAAD,CAAxB;AACD,GAHD;;AAKA,SAAO;AAAE,IAAA,IAAF;AAAQ,IAAA;AAAR,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function connectContractToSigner(contract, options, library) {\n    if (contract.signer) {\n        return contract;\n    }\n    if (options === null || options === void 0 ? void 0 : options.signer) {\n        return contract.connect(options.signer);\n    }\n    if (library === null || library === void 0 ? void 0 : library.getSigner()) {\n        return contract.connect(library.getSigner());\n    }\n    throw new TypeError('No signer available in contract, options or library');\n}\nexport function useContractFunction(contract, functionName, options) {\n    const { library, chainId } = useEthers();\n    const { promiseTransaction, state } = usePromiseTransaction(chainId, options);\n    const send = async (...args) => {\n        const contractWithSigner = connectContractToSigner(contract, options, library);\n        await promiseTransaction(contractWithSigner[functionName](...args));\n    };\n    return { send, state };\n}\n//# sourceMappingURL=useContractFunction.js.map"]},"metadata":{},"sourceType":"module"}