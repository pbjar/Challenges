{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\"; // The transaction has already been sanitized by the calls in Provider\n\nfunction getTransactionPostData(transaction) {\n  const result = {};\n\n  for (let key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    let value = transaction[key];\n\n    if (key === \"type\" && value === 0) {\n      continue;\n    } // Quantity-types require no leading zero, unless 0\n\n\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(set => {\n        return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n\n    result[key] = value;\n  }\n\n  return result;\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != \"OK\") {\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    const error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    const error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    throw error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    const error = new Error(result.error.message || \"unknown error\");\n\n    if (result.error.code) {\n      error.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      error.data = result.error.data;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    const e = error.error; // Etherscan keeps changing their string\n\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      let data = e.data;\n\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n\n      if (isHexString(data)) {\n        return data;\n      }\n\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error,\n        data: \"0x\"\n      });\n    }\n  } // Get the message from any nested error structure\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n\n  message = (message || \"\").toLowerCase(); // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"Transaction with the same hash was already imported.\"\n\n\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider {\n  constructor(network, apiKey) {\n    logger.checkNew(new.target, EtherscanProvider);\n    super(network);\n    defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n    defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n  }\n\n  getBaseUrl() {\n    switch (this.network ? this.network.name : \"invalid\") {\n      case \"homestead\":\n        return \"https:/\\/api.etherscan.io\";\n\n      case \"ropsten\":\n        return \"https:/\\/api-ropsten.etherscan.io\";\n\n      case \"rinkeby\":\n        return \"https:/\\/api-rinkeby.etherscan.io\";\n\n      case \"kovan\":\n        return \"https:/\\/api-kovan.etherscan.io\";\n\n      case \"goerli\":\n        return \"https:/\\/api-goerli.etherscan.io\";\n\n      default:\n    }\n\n    return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n  }\n\n  getUrl(module, params) {\n    const query = Object.keys(params).reduce((accum, key) => {\n      const value = params[key];\n\n      if (value != null) {\n        accum += `&${key}=${value}`;\n      }\n\n      return accum;\n    }, \"\");\n    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : \"\";\n    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n  }\n\n  getPostUrl() {\n    return `${this.baseUrl}/api`;\n  }\n\n  getPostData(module, params) {\n    params.module = module;\n    params.apikey = this.apiKey;\n    return params;\n  }\n\n  fetch(module, params, post) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = post ? this.getPostUrl() : this.getUrl(module, params);\n      const payload = post ? this.getPostData(module, params) : null;\n      const procFunc = module === \"proxy\" ? getJsonResult : getResult;\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: url,\n        provider: this\n      });\n      const connection = {\n        url: url,\n        throttleSlotInterval: 1000,\n        throttleCallback: (attempt, url) => {\n          if (this.isCommunityResource()) {\n            showThrottleMessage();\n          }\n\n          return Promise.resolve(true);\n        }\n      };\n      let payloadStr = null;\n\n      if (payload) {\n        connection.headers = {\n          \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n        };\n        payloadStr = Object.keys(payload).map(key => {\n          return `${key}=${payload[key]}`;\n        }).join(\"&\");\n      }\n\n      const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: url,\n        response: deepCopy(result),\n        provider: this\n      });\n      return result;\n    });\n  }\n\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.network;\n    });\n  }\n\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (method) {\n        case \"getBlockNumber\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_blockNumber\"\n          });\n\n        case \"getGasPrice\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_gasPrice\"\n          });\n\n        case \"getBalance\":\n          // Returns base-10 result\n          return this.fetch(\"account\", {\n            action: \"balance\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getTransactionCount\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionCount\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getCode\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getCode\",\n            address: params.address,\n            tag: params.blockTag\n          });\n\n        case \"getStorageAt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getStorageAt\",\n            address: params.address,\n            position: params.position,\n            tag: params.blockTag\n          });\n\n        case \"sendTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_sendRawTransaction\",\n            hex: params.signedTransaction\n          }, true).catch(error => {\n            return checkError(\"sendTransaction\", error, params.signedTransaction);\n          });\n\n        case \"getBlock\":\n          if (params.blockTag) {\n            return this.fetch(\"proxy\", {\n              action: \"eth_getBlockByNumber\",\n              tag: params.blockTag,\n              boolean: params.includeTransactions ? \"true\" : \"false\"\n            });\n          }\n\n          throw new Error(\"getBlock by blockHash not implemented\");\n\n        case \"getTransaction\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionByHash\",\n            txhash: params.transactionHash\n          });\n\n        case \"getTransactionReceipt\":\n          return this.fetch(\"proxy\", {\n            action: \"eth_getTransactionReceipt\",\n            txhash: params.transactionHash\n          });\n\n        case \"call\":\n          {\n            if (params.blockTag !== \"latest\") {\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            }\n\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_call\";\n\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"call\", error, params.transaction);\n            }\n          }\n\n        case \"estimateGas\":\n          {\n            const postData = getTransactionPostData(params.transaction);\n            postData.module = \"proxy\";\n            postData.action = \"eth_estimateGas\";\n\n            try {\n              return yield this.fetch(\"proxy\", postData, true);\n            } catch (error) {\n              return checkError(\"estimateGas\", error, params.transaction);\n            }\n          }\n\n        case \"getLogs\":\n          {\n            const args = {\n              action: \"getLogs\"\n            };\n\n            if (params.filter.fromBlock) {\n              args.fromBlock = checkLogTag(params.filter.fromBlock);\n            }\n\n            if (params.filter.toBlock) {\n              args.toBlock = checkLogTag(params.filter.toBlock);\n            }\n\n            if (params.filter.address) {\n              args.address = params.filter.address;\n            } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n            if (params.filter.topics && params.filter.topics.length > 0) {\n              if (params.filter.topics.length > 1) {\n                logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  topics: params.filter.topics\n                });\n              }\n\n              if (params.filter.topics.length === 1) {\n                const topic0 = params.filter.topics[0];\n\n                if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                  logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topic0: topic0\n                  });\n                }\n\n                args.topic0 = topic0;\n              }\n            }\n\n            const logs = yield this.fetch(\"logs\", args); // Cache txHash => blockHash\n\n            let blocks = {}; // Add any missing blockHash to the logs\n\n            for (let i = 0; i < logs.length; i++) {\n              const log = logs[i];\n\n              if (log.blockHash != null) {\n                continue;\n              }\n\n              if (blocks[log.blockNumber] == null) {\n                const block = yield this.getBlock(log.blockNumber);\n\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n              }\n\n              log.blockHash = blocks[log.blockNumber];\n            }\n\n            return logs;\n          }\n\n        case \"getEtherPrice\":\n          if (this.network.name !== \"homestead\") {\n            return 0.0;\n          }\n\n          return parseFloat((yield this.fetch(\"stats\", {\n            action: \"ethprice\"\n          })).ethusd);\n\n        default:\n          break;\n      }\n\n      return _super.perform.call(this, method, params);\n    });\n  } // Note: The `page` page parameter only allows pagination within the\n  //       10,000 window abailable without a page and offset parameter\n  //       Error: Result window is too large, PageNo x Offset size must\n  //              be less than or equal to 10000\n\n\n  getHistory(addressOrName, startBlock, endBlock) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const params = {\n        action: \"txlist\",\n        address: yield this.resolveName(addressOrName),\n        startblock: startBlock == null ? 0 : startBlock,\n        endblock: endBlock == null ? 99999999 : endBlock,\n        sort: \"asc\"\n      };\n      const result = yield this.fetch(\"account\", params);\n      return result.map(tx => {\n        [\"contractAddress\", \"to\"].forEach(function (key) {\n          if (tx[key] == \"\") {\n            delete tx[key];\n          }\n        });\n\n        if (tx.creates == null && tx.contractAddress != null) {\n          tx.creates = tx.contractAddress;\n        }\n\n        const item = this.formatter.transactionResponse(tx);\n\n        if (tx.timeStamp) {\n          item.timestamp = parseInt(tx.timeStamp);\n        }\n\n        return item;\n      });\n    });\n  }\n\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n}","map":{"version":3,"sources":["../src.ts/etherscan-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n    const result = {};\n    for (let key in transaction) {\n        if (transaction[key] == null) {\n            continue;\n        }\n        let value = transaction[key];\n        if (key === \"type\" && value === 0) {\n            continue;\n        }\n        // Quantity-types require no leading zero, unless 0\n        if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {\n            value = hexValue(hexlify(value));\n        }\n        else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${set.address}\",storageKeys:[\"${set.storageKeys.join('\",\"')}\"]}`;\n            }).join(\",\") + \"]\";\n        }\n        else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\nfunction getResult(result) {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n    if (result.status != 1 || result.message != \"OK\") {\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n    return result.result;\n}\nfunction getJsonResult(result) {\n    // This response indicates we are being throttled\n    if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n    if (result.error) {\n        // @TODO: not any\n        const error = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) {\n            error.code = result.error.code;\n        }\n        if (result.error.data) {\n            error.data = result.error.data;\n        }\n        throw error;\n    }\n    return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n    if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n    }\n    if (blockTag === \"latest\") {\n        return blockTag;\n    }\n    return parseInt(blockTag.substring(2), 16);\n}\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nfunction checkError(method, error, transaction) {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) {\n                data = \"0x\" + data.replace(/^.*0x/i, \"\");\n            }\n            if (isHexString(data)) {\n                return data;\n            }\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof (error.error.message) === \"string\") {\n            message = error.error.message;\n        }\n        else if (typeof (error.body) === \"string\") {\n            message = error.body;\n        }\n        else if (typeof (error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nexport class EtherscanProvider extends BaseProvider {\n    constructor(network, apiKey) {\n        logger.checkNew(new.target, EtherscanProvider);\n        super(network);\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n    getBaseUrl() {\n        switch (this.network ? this.network.name : \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n    getUrl(module, params) {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${key}=${value}`;\n            }\n            return accum;\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${this.apiKey}` : \"\");\n        return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;\n    }\n    getPostUrl() {\n        return `${this.baseUrl}/api`;\n    }\n    getPostData(module, params) {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n    fetch(module, params, post) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = (post ? this.getPostUrl() : this.getUrl(module, params));\n            const payload = (post ? this.getPostData(module, params) : null);\n            const procFunc = (module === \"proxy\") ? getJsonResult : getResult;\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n            });\n            const connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: (attempt, url) => {\n                    if (this.isCommunityResource()) {\n                        showThrottleMessage();\n                    }\n                    return Promise.resolve(true);\n                }\n            };\n            let payloadStr = null;\n            if (payload) {\n                connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n                payloadStr = Object.keys(payload).map((key) => {\n                    return `${key}=${payload[key]}`;\n                }).join(\"&\");\n            }\n            const result = yield fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n            });\n            return result;\n        });\n    }\n    detectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.network;\n        });\n    }\n    perform(method, params) {\n        const _super = Object.create(null, {\n            perform: { get: () => super.perform }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (method) {\n                case \"getBlockNumber\":\n                    return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n                case \"getGasPrice\":\n                    return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n                case \"getBalance\":\n                    // Returns base-10 result\n                    return this.fetch(\"account\", {\n                        action: \"balance\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getTransactionCount\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionCount\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getCode\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getCode\",\n                        address: params.address,\n                        tag: params.blockTag\n                    });\n                case \"getStorageAt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getStorageAt\",\n                        address: params.address,\n                        position: params.position,\n                        tag: params.blockTag\n                    });\n                case \"sendTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_sendRawTransaction\",\n                        hex: params.signedTransaction\n                    }, true).catch((error) => {\n                        return checkError(\"sendTransaction\", error, params.signedTransaction);\n                    });\n                case \"getBlock\":\n                    if (params.blockTag) {\n                        return this.fetch(\"proxy\", {\n                            action: \"eth_getBlockByNumber\",\n                            tag: params.blockTag,\n                            boolean: (params.includeTransactions ? \"true\" : \"false\")\n                        });\n                    }\n                    throw new Error(\"getBlock by blockHash not implemented\");\n                case \"getTransaction\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionByHash\",\n                        txhash: params.transactionHash\n                    });\n                case \"getTransactionReceipt\":\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getTransactionReceipt\",\n                        txhash: params.transactionHash\n                    });\n                case \"call\": {\n                    if (params.blockTag !== \"latest\") {\n                        throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                    }\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_call\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"call\", error, params.transaction);\n                    }\n                }\n                case \"estimateGas\": {\n                    const postData = getTransactionPostData(params.transaction);\n                    postData.module = \"proxy\";\n                    postData.action = \"eth_estimateGas\";\n                    try {\n                        return yield this.fetch(\"proxy\", postData, true);\n                    }\n                    catch (error) {\n                        return checkError(\"estimateGas\", error, params.transaction);\n                    }\n                }\n                case \"getLogs\": {\n                    const args = { action: \"getLogs\" };\n                    if (params.filter.fromBlock) {\n                        args.fromBlock = checkLogTag(params.filter.fromBlock);\n                    }\n                    if (params.filter.toBlock) {\n                        args.toBlock = checkLogTag(params.filter.toBlock);\n                    }\n                    if (params.filter.address) {\n                        args.address = params.filter.address;\n                    }\n                    // @TODO: We can handle slightly more complicated logs using the logs API\n                    if (params.filter.topics && params.filter.topics.length > 0) {\n                        if (params.filter.topics.length > 1) {\n                            logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                        }\n                        if (params.filter.topics.length === 1) {\n                            const topic0 = params.filter.topics[0];\n                            if (typeof (topic0) !== \"string\" || topic0.length !== 66) {\n                                logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                            }\n                            args.topic0 = topic0;\n                        }\n                    }\n                    const logs = yield this.fetch(\"logs\", args);\n                    // Cache txHash => blockHash\n                    let blocks = {};\n                    // Add any missing blockHash to the logs\n                    for (let i = 0; i < logs.length; i++) {\n                        const log = logs[i];\n                        if (log.blockHash != null) {\n                            continue;\n                        }\n                        if (blocks[log.blockNumber] == null) {\n                            const block = yield this.getBlock(log.blockNumber);\n                            if (block) {\n                                blocks[log.blockNumber] = block.hash;\n                            }\n                        }\n                        log.blockHash = blocks[log.blockNumber];\n                    }\n                    return logs;\n                }\n                case \"getEtherPrice\":\n                    if (this.network.name !== \"homestead\") {\n                        return 0.0;\n                    }\n                    return parseFloat((yield this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n                default:\n                    break;\n            }\n            return _super.perform.call(this, method, params);\n        });\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window abailable without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    getHistory(addressOrName, startBlock, endBlock) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const params = {\n                action: \"txlist\",\n                address: (yield this.resolveName(addressOrName)),\n                startblock: ((startBlock == null) ? 0 : startBlock),\n                endblock: ((endBlock == null) ? 99999999 : endBlock),\n                sort: \"asc\"\n            };\n            const result = yield this.fetch(\"account\", params);\n            return result.map((tx) => {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                        delete tx[key];\n                    }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                }\n                const item = this.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n            });\n        });\n    }\n    isCommunityResource() {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n//# sourceMappingURL=etherscan-provider.js.map"]},"metadata":{},"sourceType":"module"}