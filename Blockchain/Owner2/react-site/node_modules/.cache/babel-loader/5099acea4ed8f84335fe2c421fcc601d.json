{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\";\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\n\nexport class DescendantsManager {\n  constructor() {\n    var _this = this;\n\n    _defineProperty(this, \"descendants\", new Map());\n\n    _defineProperty(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n\n    _defineProperty(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      var sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n\n    _defineProperty(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n\n    _defineProperty(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        var index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset.index = descendant.index.toString();\n      });\n    });\n\n    _defineProperty(this, \"count\", () => this.descendants.size);\n\n    _defineProperty(this, \"enabledCount\", () => this.enabledValues().length);\n\n    _defineProperty(this, \"values\", () => {\n      var values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n\n    _defineProperty(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n\n    _defineProperty(this, \"item\", index => {\n      if (this.count() === 0) return undefined;\n      return this.values()[index];\n    });\n\n    _defineProperty(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return undefined;\n      return this.enabledValues()[index];\n    });\n\n    _defineProperty(this, \"first\", () => this.item(0));\n\n    _defineProperty(this, \"firstEnabled\", () => this.enabledItem(0));\n\n    _defineProperty(this, \"last\", () => this.item(this.descendants.size - 1));\n\n    _defineProperty(this, \"lastEnabled\", () => {\n      var lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n\n    _defineProperty(this, \"indexOf\", node => {\n      var _this$descendants$get, _this$descendants$get2;\n\n      if (!node) return -1;\n      return (_this$descendants$get = (_this$descendants$get2 = this.descendants.get(node)) == null ? void 0 : _this$descendants$get2.index) != null ? _this$descendants$get : -1;\n    });\n\n    _defineProperty(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n\n    _defineProperty(this, \"next\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n\n      var next = getNextIndex(index, _this.count(), loop);\n      return _this.item(next);\n    });\n\n    _defineProperty(this, \"nextEnabled\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n\n      var item = _this.item(index);\n\n      if (!item) return;\n\n      var enabledIndex = _this.enabledIndexOf(item.node);\n\n      var nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);\n      return _this.enabledItem(nextEnabledIndex);\n    });\n\n    _defineProperty(this, \"prev\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n\n      var prev = getPrevIndex(index, _this.count() - 1, loop);\n      return _this.item(prev);\n    });\n\n    _defineProperty(this, \"prevEnabled\", function (index, loop) {\n      if (loop === void 0) {\n        loop = true;\n      }\n\n      var item = _this.item(index);\n\n      if (!item) return;\n\n      var enabledIndex = _this.enabledIndexOf(item.node);\n\n      var prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);\n      return _this.enabledItem(prevEnabledIndex);\n    });\n\n    _defineProperty(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      var keys = Array.from(this.descendants.keys()).concat(node);\n      var sorted = sortNodes(keys);\n\n      if (options != null && options.disabled) {\n        options.disabled = !!options.disabled;\n      }\n\n      var descendant = _extends({\n        node,\n        index: -1\n      }, options);\n\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/descendant.ts"],"names":["nodeOrOptions","isElement","node","sorted","sortNodes","Array","descendants","descendant","index","values","a","b","lastIndex","i","loop","next","getNextIndex","item","enabledIndex","nextEnabledIndex","prev","getPrevIndex","prevEnabledIndex","keys","options"],"mappings":"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","sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {}\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset.index = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}