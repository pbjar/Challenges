{"ast":null,"code":"import { runIfFn } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCallbackRef } from \"./use-callback-ref\";\nexport function useControllableProp(prop, state) {\n  var isControlled = prop !== undefined;\n  var value = isControlled && typeof prop !== \"undefined\" ? prop : state;\n  return [isControlled, value];\n}\n/**\n * React hook for using controlling component state.\n * @param props\n */\n\nexport function useControllableState(props) {\n  var {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  var onChangeProp = useCallbackRef(onChange);\n  var shouldUpdateProp = useCallbackRef(shouldUpdate);\n  var [valueState, setValue] = React.useState(defaultValue);\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(next => {\n    var nextValue = runIfFn(next, value);\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [isControlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, updateValue];\n}","map":{"version":3,"sources":["../../src/use-controllable.ts"],"names":["isControlled","prop","value","shouldUpdate","prev","next","onChangeProp","useCallbackRef","shouldUpdateProp","React","valueProp","updateValue","nextValue","runIfFn","setValue"],"mappings":"AAAA,SAAA,OAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,cAAA,QAAA,oBAAA;AAEA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;AACpE,MAAMA,YAAY,GAAGC,IAAI,KAAzB,SAAA;AACA,MAAMC,KAAK,GAAGF,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;AACA,SAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AACD;AAqBD;AACA;AACA;AACA;;AACA,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;AAC3E,MAAM;AACJE,IAAAA,KAAK,EADD,SAAA;AAAA,IAAA,YAAA;AAAA,IAAA,QAAA;AAIJC,IAAAA,YAAY,GAAG,CAAA,IAAA,EAAA,IAAA,KAAgBC,IAAI,KAAKC;AAJpC,MAAN,KAAA;AAMA,MAAMC,YAAY,GAAGC,cAAc,CAAnC,QAAmC,CAAnC;AACA,MAAMC,gBAAgB,GAAGD,cAAc,CAAvC,YAAuC,CAAvC;AAEA,MAAM,CAAA,UAAA,EAAA,QAAA,IAAyBE,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B;AAEA,MAAMT,YAAY,GAAGU,SAAS,KAA9B,SAAA;AACA,MAAMR,KAAK,GAAGF,YAAY,GAAA,SAAA,GAA1B,UAAA;AAEA,MAAMW,WAAW,GAAG,KAAK,CAAL,WAAA,CACjBN,IAAD,IAAmC;AACjC,QAAMO,SAAS,GAAGC,OAAO,CAAA,IAAA,EAAzB,KAAyB,CAAzB;;AAEA,QAAI,CAACL,gBAAgB,CAAA,KAAA,EAArB,SAAqB,CAArB,EAAyC;AACvC;AACD;;AAED,QAAI,CAAJ,YAAA,EAAmB;AACjBM,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;;AAEDR,IAAAA,YAAY,CAAZA,SAAY,CAAZA;AAZgB,GAAA,EAclB,CAAA,YAAA,EAAA,YAAA,EAAA,KAAA,EAdF,gBAcE,CAdkB,CAApB;AAiBA,SAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD","sourcesContent":["import { runIfFn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const isControlled = prop !== undefined\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The function that determines if the state should be updated\n   */\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n\n  const isControlled = valueProp !== undefined\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [isControlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}