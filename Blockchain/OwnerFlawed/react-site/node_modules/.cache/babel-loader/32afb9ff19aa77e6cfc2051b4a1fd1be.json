{"ast":null,"code":"import defaultTheme, { isChakraTheme } from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith, pipe } from \"@chakra-ui/utils\";\n/**\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\n\nexport function extendTheme() {\n  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {\n    extensions[_key] = arguments[_key];\n  }\n\n  var overrides = [...extensions];\n  var baseTheme = extensions[extensions.length - 1];\n\n  if (isChakraTheme(baseTheme) && // this ensures backward compatibility\n  // previously only `extendTheme(override, baseTheme?)` was allowed\n  overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = defaultTheme;\n  }\n\n  return pipe(...overrides.map(extension => prevTheme => isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)))(baseTheme);\n}\nexport function mergeThemeOverride() {\n  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    overrides[_key2] = arguments[_key2];\n  }\n\n  return mergeWith({}, ...overrides, mergeThemeCustomizer);\n}\n\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source(...arguments) : source;\n      var overrideValue = isFunction(override) ? override(...arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  } // fallback to default behaviour\n\n\n  return undefined;\n}","map":{"version":3,"sources":["../../src/extend-theme.ts"],"names":["extensions","overrides","baseTheme","isChakraTheme","pipe","extension","prevTheme","isFunction","mergeThemeOverride","mergeWith","Object","sourceValue","source","overrideValue","override"],"mappings":"AAAA,OAAA,YAAA,IAAA,aAAA,QAAA,kBAAA;AAKA,SAAA,UAAA,EAAA,SAAA,EAAA,IAAA,QAAA,kBAAA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAA,WAAA,GAO2B;AAAA,OAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAA7BA,UAA6B,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAA7BA,IAAAA,UAA6B,CAAA,IAAA,CAA7BA,GAA6B,SAAA,CAAA,IAAA,CAA7BA;AAA6B;;AAChC,MAAIC,SAAS,GAAG,CAAC,GAAjB,UAAgB,CAAhB;AACA,MAAIC,SAAS,GAAGF,UAAU,CAACA,UAAU,CAAVA,MAAAA,GAA3B,CAA0B,CAA1B;;AAEA,MACEG,aAAa,CAAbA,SAAa,CAAbA,IACA;AACA;AACAF,EAAAA,SAAS,CAATA,MAAAA,GAJF,CAAA,EAKE;AACAA,IAAAA,SAAS,GAAGA,SAAS,CAATA,KAAAA,CAAAA,CAAAA,EAAmBA,SAAS,CAATA,MAAAA,GAA/BA,CAAYA,CAAZA;AANF,GAAA,MAOO;AACLC,IAAAA,SAAS,GAATA,YAAAA;AACD;;AAED,SAAOE,IAAI,CACT,GAAGH,SAAS,CAATA,GAAAA,CACAI,SAAD,IACEC,SADa,IAGbC,UAAU,CAAVA,SAAU,CAAVA,GACKF,SAAD,CADJE,SACI,CADJA,GAEIC,kBAAkB,CAAA,SAAA,EAPrBJ,SAOqB,CANvBH,CADM,CAAJG,CAAP,SAAOA,CAAP;AAUD;AAED,OAAO,SAAA,kBAAA,GAEqB;AAAA,OAAA,IAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EADvBH,SACuB,GAAA,IAAA,KAAA,CAAA,KAAA,CAAA,EAAA,KAAA,GAAA,CAAA,EAAA,KAAA,GAAA,KAAA,EAAA,KAAA,EAAA,EAAA;AADvBA,IAAAA,SACuB,CAAA,KAAA,CADvBA,GACuB,SAAA,CAAA,KAAA,CADvBA;AACuB;;AAC1B,SAAOQ,SAAS,CAAA,EAAA,EAAK,GAAL,SAAA,EAAhB,oBAAgB,CAAhB;AACD;;AAED,SAAA,oBAAA,CAAA,MAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAKE;AACA,MACE,CAACF,UAAU,CAAVA,MAAU,CAAVA,IAAsBA,UAAU,CAAjC,QAAiC,CAAjC,KACAG,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAFF,GAEEA,CAFF,EAGE;AACA,WAAO,YAAwB;AAC7B,UAAMC,WAAW,GAAGJ,UAAU,CAAVA,MAAU,CAAVA,GAAqBK,MAAM,CAAC,GAA5BL,SAA2B,CAA3BA,GAApB,MAAA;AAEA,UAAMM,aAAa,GAAGN,UAAU,CAAVA,QAAU,CAAVA,GAAuBO,QAAQ,CAAC,GAAhCP,SAA+B,CAA/BA,GAAtB,QAAA;AAEA,aAAOE,SAAS,CAAA,EAAA,EAAA,WAAA,EAAA,aAAA,EAAhB,oBAAgB,CAAhB;AALF,KAAA;AALF,GAAA,CAcA;;;AACA,SAAA,SAAA;AACD","sourcesContent":["import defaultTheme, {\n  ChakraTheme,\n  isChakraTheme,\n  Theme,\n} from \"@chakra-ui/theme\"\nimport {\n  AnyFunction,\n  Dict,\n  isFunction,\n  mergeWith,\n  pipe,\n} from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        DeepPartial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport declare type ThemeOverride<\n  BaseTheme = Theme\n> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict\n\nexport type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (\n  themeOverride: Override,\n) => Override\n\nexport type BaseThemeWithExtensions<\n  BaseTheme extends ChakraTheme,\n  Extensions extends readonly [...any]\n> = BaseTheme &\n  (Extensions extends [infer L, ...infer R]\n    ? L extends AnyFunction\n      ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R>\n      : L & BaseThemeWithExtensions<BaseTheme, R>\n    : Extensions)\n/**\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\nexport function extendTheme<\n  BaseTheme extends ChakraTheme = Theme,\n  Extensions extends (\n    | BaseTheme\n    | ThemeOverride<BaseTheme>\n    | ThemeExtension<ThemeOverride<BaseTheme>>\n  )[] = (ThemeOverride<BaseTheme> | ThemeExtension<ThemeOverride<BaseTheme>>)[]\n>(...extensions: [...Extensions]) {\n  let overrides = [...extensions]\n  let baseTheme = extensions[extensions.length - 1]\n\n  if (\n    isChakraTheme(baseTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, baseTheme?)` was allowed\n    overrides.length > 1\n  ) {\n    overrides = overrides.slice(0, overrides.length - 1)\n  } else {\n    baseTheme = (defaultTheme as unknown) as BaseTheme\n  }\n\n  return pipe(\n    ...overrides.map(\n      (extension) => (\n        prevTheme: BaseThemeWithExtensions<BaseTheme, Extensions>,\n      ) =>\n        isFunction(extension)\n          ? (extension as any)(prevTheme)\n          : mergeThemeOverride(prevTheme, extension),\n    ),\n  )(baseTheme as BaseThemeWithExtensions<BaseTheme, Extensions>)\n}\n\nexport function mergeThemeOverride<BaseTheme extends ChakraTheme = ChakraTheme>(\n  ...overrides: ThemeOverride<BaseTheme>[]\n): ThemeOverride<BaseTheme> {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer)\n}\n\nfunction mergeThemeCustomizer(\n  source: unknown,\n  override: unknown,\n  key: string,\n  object: any,\n) {\n  if (\n    (isFunction(source) || isFunction(override)) &&\n    Object.prototype.hasOwnProperty.call(object, key)\n  ) {\n    return (...args: unknown[]) => {\n      const sourceValue = isFunction(source) ? source(...args) : source\n\n      const overrideValue = isFunction(override) ? override(...args) : override\n\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer)\n    }\n  }\n\n  // fallback to default behaviour\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}