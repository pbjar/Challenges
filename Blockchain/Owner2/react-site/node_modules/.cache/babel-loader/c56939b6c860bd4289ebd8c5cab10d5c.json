{"ast":null,"code":"import { MultiCallABI } from '../constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useChainCall } from './useChainCalls';\nimport { useMulticallAddress } from './useMulticallAddress';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\nexport function useBlockMeta() {\n  const address = useMulticallAddress();\n  const timestamp = useChainCall(address && {\n    address,\n    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL\n  });\n  const difficulty = useChainCall(address && {\n    address,\n    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL\n  });\n  return {\n    timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp).mul(1000).toNumber()) : undefined,\n    difficulty: difficulty !== undefined ? BigNumber.from(difficulty) : undefined\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useBlockMeta.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,cAA7B;AACA,SAAS,SAAT,QAA0B,0BAA1B;AACA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,MAAM,gCAAgC,GAAG,YAAY,CAAC,kBAAb,CAAgC,0BAAhC,EAA4D,EAA5D,CAAzC;AACA,MAAM,iCAAiC,GAAG,YAAY,CAAC,kBAAb,CAAgC,2BAAhC,EAA6D,EAA7D,CAA1C;AAEA,OAAM,SAAU,YAAV,GAAsB;AAC1B,QAAM,OAAO,GAAG,mBAAmB,EAAnC;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,OAAO,IAAI;AAAE,IAAA,OAAF;AAAW,IAAA,IAAI,EAAE;AAAjB,GAAZ,CAA9B;AACA,QAAM,UAAU,GAAG,YAAY,CAAC,OAAO,IAAI;AAAE,IAAA,OAAF;AAAW,IAAA,IAAI,EAAE;AAAjB,GAAZ,CAA/B;AAEA,SAAO;AACL,IAAA,SAAS,EAAE,SAAS,KAAK,SAAd,GAA0B,IAAI,IAAJ,CAAS,SAAS,CAAC,IAAV,CAAe,SAAf,EAA0B,GAA1B,CAA8B,IAA9B,EAAoC,QAApC,EAAT,CAA1B,GAAqF,SAD3F;AAEL,IAAA,UAAU,EAAE,UAAU,KAAK,SAAf,GAA2B,SAAS,CAAC,IAAV,CAAe,UAAf,CAA3B,GAAwD;AAF/D,GAAP;AAID","sourceRoot":"","sourcesContent":["import { MultiCallABI } from '../constants';\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useChainCall } from './useChainCalls';\nimport { useMulticallAddress } from './useMulticallAddress';\nconst GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockTimestamp', []);\nconst GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData('getCurrentBlockDifficulty', []);\nexport function useBlockMeta() {\n    const address = useMulticallAddress();\n    const timestamp = useChainCall(address && { address, data: GET_CURRENT_BLOCK_TIMESTAMP_CALL });\n    const difficulty = useChainCall(address && { address, data: GET_CURRENT_BLOCK_DIFFICULTY_CALL });\n    return {\n        timestamp: timestamp !== undefined ? new Date(BigNumber.from(timestamp).mul(1000).toNumber()) : undefined,\n        difficulty: difficulty !== undefined ? BigNumber.from(difficulty) : undefined,\n    };\n}\n//# sourceMappingURL=useBlockMeta.js.map"]},"metadata":{},"sourceType":"module"}