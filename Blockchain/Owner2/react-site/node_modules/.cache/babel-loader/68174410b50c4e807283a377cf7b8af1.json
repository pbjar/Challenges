{"ast":null,"code":"import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../providers/config/context';\n\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n  const timeFromCreation = creationTime => Date.now() - creationTime;\n\n  return notifications.filter(notification => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\n\nexport function useNotifications() {\n  const {\n    chainId,\n    account\n  } = useEthers();\n  const {\n    addNotification,\n    notifications,\n    removeNotification\n  } = useNotificationsContext();\n  const {\n    notifications: {\n      checkInterval,\n      expirationPeriod\n    }\n  } = useConfig();\n  const chainNotifications = useMemo(() => {\n    var _a;\n\n    if (chainId === undefined || !account) {\n      return [];\n    }\n\n    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n  }, [notifications, chainId, account]);\n  useInterval(() => {\n    if (!chainId) {\n      return;\n    }\n\n    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n\n    for (const notification of expiredNotification) {\n      removeNotification({\n        notificationId: notification.id,\n        chainId\n      });\n    }\n  }, checkInterval);\n  return {\n    notifications: chainNotifications,\n    addNotification,\n    removeNotification\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/useNotifications.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AACA,SAAuB,uBAAvB,QAAsD,cAAtD;AACA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,6BAA1B;;AAEA,SAAS,uBAAT,CAAiC,aAAjC,EAAgE,gBAAhE,EAAwF;AACtF,QAAM,gBAAgB,GAAI,YAAD,IAA0B,IAAI,CAAC,GAAL,KAAa,YAAhE;;AAEA,SAAO,aAAa,CAAC,MAAd,CAAsB,YAAD,IAAkB,gBAAgB,CAAC,YAAY,CAAC,WAAd,CAAhB,IAA8C,gBAArF,CAAP;AACD;;AAED,OAAM,SAAU,gBAAV,GAA0B;AAC9B,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAuB,SAAS,EAAtC;AACA,QAAM;AAAE,IAAA,eAAF;AAAmB,IAAA,aAAnB;AAAkC,IAAA;AAAlC,MAAyD,uBAAuB,EAAtF;AACA,QAAM;AACJ,IAAA,aAAa,EAAE;AAAE,MAAA,aAAF;AAAiB,MAAA;AAAjB;AADX,MAEF,SAAS,EAFb;AAIA,QAAM,kBAAkB,GAAG,OAAO,CAAC,MAAK;;;AACtC,QAAI,OAAO,KAAK,SAAZ,IAAyB,CAAC,OAA9B,EAAuC;AACrC,aAAO,EAAP;AACD;;AACD,WAAA,CAAA,EAAA,GAAO,aAAa,CAAC,OAAD,CAApB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,EAA7B,GAAiC,EAAjC;AACD,GALiC,EAK/B,CAAC,aAAD,EAAgB,OAAhB,EAAyB,OAAzB,CAL+B,CAAlC;AAOA,EAAA,WAAW,CAAC,MAAK;AACf,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,UAAM,mBAAmB,GAAG,uBAAuB,CAAC,kBAAD,EAAqB,gBAArB,CAAnD;;AACA,SAAK,MAAM,YAAX,IAA2B,mBAA3B,EAAgD;AAC9C,MAAA,kBAAkB,CAAC;AAAE,QAAA,cAAc,EAAE,YAAY,CAAC,EAA/B;AAAmC,QAAA;AAAnC,OAAD,CAAlB;AACD;AACF,GATU,EASR,aATQ,CAAX;AAWA,SAAO;AACL,IAAA,aAAa,EAAE,kBADV;AAEL,IAAA,eAFK;AAGL,IAAA;AAHK,GAAP;AAKD","sourceRoot":"","sourcesContent":["import { useMemo } from 'react';\nimport { useNotificationsContext } from '../providers';\nimport { useEthers } from './useEthers';\nimport { useInterval } from './useInterval';\nimport { useConfig } from '../providers/config/context';\nfunction getExpiredNotifications(notifications, expirationPeriod) {\n    const timeFromCreation = (creationTime) => Date.now() - creationTime;\n    return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod);\n}\nexport function useNotifications() {\n    const { chainId, account } = useEthers();\n    const { addNotification, notifications, removeNotification } = useNotificationsContext();\n    const { notifications: { checkInterval, expirationPeriod }, } = useConfig();\n    const chainNotifications = useMemo(() => {\n        var _a;\n        if (chainId === undefined || !account) {\n            return [];\n        }\n        return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];\n    }, [notifications, chainId, account]);\n    useInterval(() => {\n        if (!chainId) {\n            return;\n        }\n        const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);\n        for (const notification of expiredNotification) {\n            removeNotification({ notificationId: notification.id, chainId });\n        }\n    }, checkInterval);\n    return {\n        notifications: chainNotifications,\n        addNotification,\n        removeNotification,\n    };\n}\n//# sourceMappingURL=useNotifications.js.map"]},"metadata":{},"sourceType":"module"}