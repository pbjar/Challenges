{"ast":null,"code":"import { isCancelable } from './retryer';\nexport function infiniteQueryBehavior() {\n  return {\n    onFetch: function onFetch(context) {\n      context.fetchFn = function () {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        var newPageParams = oldPageParams;\n        var cancelled = false; // Get query function\n\n        var queryFn = context.options.queryFn || function () {\n          return Promise.reject('Missing queryFn');\n        };\n\n        var buildNewPages = function buildNewPages(pages, param, page, previous) {\n          newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);\n          return previous ? [page].concat(pages) : [].concat(pages, [page]);\n        }; // Create function to fetch a page\n\n\n        var fetchPage = function fetchPage(pages, manual, param, previous) {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          var queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param\n          };\n          var queryFnResult = queryFn(queryFnContext);\n          var promise = Promise.resolve(queryFnResult).then(function (page) {\n            return buildNewPages(pages, param, page, previous);\n          });\n\n          if (isCancelable(queryFnResult)) {\n            var promiseAsAny = promise;\n            promiseAsAny.cancel = queryFnResult.cancel;\n          }\n\n          return promise;\n        };\n\n        var promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n          var manual = typeof pageParam !== 'undefined';\n          var param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n          promise = fetchPage(oldPages, manual, param);\n        } // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          var _manual = typeof pageParam !== 'undefined';\n\n          var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n\n          promise = fetchPage(oldPages, _manual, _param, true);\n        } // Refetch pages\n        else {\n          (function () {\n            newPageParams = [];\n            var manual = typeof context.options.getNextPageParam === 'undefined';\n            var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n            promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n            var _loop = function _loop(i) {\n              promise = promise.then(function (pages) {\n                var shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n                if (shouldFetchNextPage) {\n                  var _param2 = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n\n                  return fetchPage(pages, manual, _param2);\n                }\n\n                return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n              });\n            };\n\n            for (var i = 1; i < oldPages.length; i++) {\n              _loop(i);\n            }\n          })();\n        }\n\n        var finalPromise = promise.then(function (pages) {\n          return {\n            pages: pages,\n            pageParams: newPageParams\n          };\n        });\n        var finalPromiseAsAny = finalPromise;\n\n        finalPromiseAsAny.cancel = function () {\n          cancelled = true;\n\n          if (isCancelable(promise)) {\n            promise.cancel();\n          }\n        };\n\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    var nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    var previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner/react-site/node_modules/react-query/es/core/infiniteQueryBehavior.js"],"names":["isCancelable","infiniteQueryBehavior","onFetch","context","fetchFn","_context$fetchOptions","_context$fetchOptions2","_context$fetchOptions3","_context$fetchOptions4","_context$state$data","_context$state$data2","refetchPage","fetchOptions","meta","fetchMore","pageParam","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","state","data","pages","oldPageParams","pageParams","newPageParams","cancelled","queryFn","options","Promise","reject","buildNewPages","param","page","previous","concat","fetchPage","manual","length","resolve","queryFnContext","queryKey","queryFnResult","promise","then","promiseAsAny","cancel","getNextPageParam","_manual","_param","getPreviousPageParam","shouldFetchFirstPage","_loop","i","shouldFetchNextPage","_param2","finalPromise","finalPromiseAsAny","hasNextPage","Array","isArray","nextPageParam","hasPreviousPage","previousPageParam"],"mappings":"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","sourcesContent":["import { isCancelable } from './retryer';\nexport function infiniteQueryBehavior() {\n  return {\n    onFetch: function onFetch(context) {\n      context.fetchFn = function () {\n        var _context$fetchOptions, _context$fetchOptions2, _context$fetchOptions3, _context$fetchOptions4, _context$state$data, _context$state$data2;\n\n        var refetchPage = (_context$fetchOptions = context.fetchOptions) == null ? void 0 : (_context$fetchOptions2 = _context$fetchOptions.meta) == null ? void 0 : _context$fetchOptions2.refetchPage;\n        var fetchMore = (_context$fetchOptions3 = context.fetchOptions) == null ? void 0 : (_context$fetchOptions4 = _context$fetchOptions3.meta) == null ? void 0 : _context$fetchOptions4.fetchMore;\n        var pageParam = fetchMore == null ? void 0 : fetchMore.pageParam;\n        var isFetchingNextPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'forward';\n        var isFetchingPreviousPage = (fetchMore == null ? void 0 : fetchMore.direction) === 'backward';\n        var oldPages = ((_context$state$data = context.state.data) == null ? void 0 : _context$state$data.pages) || [];\n        var oldPageParams = ((_context$state$data2 = context.state.data) == null ? void 0 : _context$state$data2.pageParams) || [];\n        var newPageParams = oldPageParams;\n        var cancelled = false; // Get query function\n\n        var queryFn = context.options.queryFn || function () {\n          return Promise.reject('Missing queryFn');\n        };\n\n        var buildNewPages = function buildNewPages(pages, param, page, previous) {\n          newPageParams = previous ? [param].concat(newPageParams) : [].concat(newPageParams, [param]);\n          return previous ? [page].concat(pages) : [].concat(pages, [page]);\n        }; // Create function to fetch a page\n\n\n        var fetchPage = function fetchPage(pages, manual, param, previous) {\n          if (cancelled) {\n            return Promise.reject('Cancelled');\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages);\n          }\n\n          var queryFnContext = {\n            queryKey: context.queryKey,\n            pageParam: param\n          };\n          var queryFnResult = queryFn(queryFnContext);\n          var promise = Promise.resolve(queryFnResult).then(function (page) {\n            return buildNewPages(pages, param, page, previous);\n          });\n\n          if (isCancelable(queryFnResult)) {\n            var promiseAsAny = promise;\n            promiseAsAny.cancel = queryFnResult.cancel;\n          }\n\n          return promise;\n        };\n\n        var promise; // Fetch first page?\n\n        if (!oldPages.length) {\n          promise = fetchPage([]);\n        } // Fetch next page?\n        else if (isFetchingNextPage) {\n            var manual = typeof pageParam !== 'undefined';\n            var param = manual ? pageParam : getNextPageParam(context.options, oldPages);\n            promise = fetchPage(oldPages, manual, param);\n          } // Fetch previous page?\n          else if (isFetchingPreviousPage) {\n              var _manual = typeof pageParam !== 'undefined';\n\n              var _param = _manual ? pageParam : getPreviousPageParam(context.options, oldPages);\n\n              promise = fetchPage(oldPages, _manual, _param, true);\n            } // Refetch pages\n            else {\n                (function () {\n                  newPageParams = [];\n                  var manual = typeof context.options.getNextPageParam === 'undefined';\n                  var shouldFetchFirstPage = refetchPage && oldPages[0] ? refetchPage(oldPages[0], 0, oldPages) : true; // Fetch first page\n\n                  promise = shouldFetchFirstPage ? fetchPage([], manual, oldPageParams[0]) : Promise.resolve(buildNewPages([], oldPageParams[0], oldPages[0])); // Fetch remaining pages\n\n                  var _loop = function _loop(i) {\n                    promise = promise.then(function (pages) {\n                      var shouldFetchNextPage = refetchPage && oldPages[i] ? refetchPage(oldPages[i], i, oldPages) : true;\n\n                      if (shouldFetchNextPage) {\n                        var _param2 = manual ? oldPageParams[i] : getNextPageParam(context.options, pages);\n\n                        return fetchPage(pages, manual, _param2);\n                      }\n\n                      return Promise.resolve(buildNewPages(pages, oldPageParams[i], oldPages[i]));\n                    });\n                  };\n\n                  for (var i = 1; i < oldPages.length; i++) {\n                    _loop(i);\n                  }\n                })();\n              }\n\n        var finalPromise = promise.then(function (pages) {\n          return {\n            pages: pages,\n            pageParams: newPageParams\n          };\n        });\n        var finalPromiseAsAny = finalPromise;\n\n        finalPromiseAsAny.cancel = function () {\n          cancelled = true;\n\n          if (isCancelable(promise)) {\n            promise.cancel();\n          }\n        };\n\n        return finalPromise;\n      };\n    }\n  };\n}\nexport function getNextPageParam(options, pages) {\n  return options.getNextPageParam == null ? void 0 : options.getNextPageParam(pages[pages.length - 1], pages);\n}\nexport function getPreviousPageParam(options, pages) {\n  return options.getPreviousPageParam == null ? void 0 : options.getPreviousPageParam(pages[0], pages);\n}\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasNextPage(options, pages) {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    var nextPageParam = getNextPageParam(options, pages);\n    return typeof nextPageParam !== 'undefined' && nextPageParam !== null && nextPageParam !== false;\n  }\n}\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\n\nexport function hasPreviousPage(options, pages) {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    var previousPageParam = getPreviousPageParam(options, pages);\n    return typeof previousPageParam !== 'undefined' && previousPageParam !== null && previousPageParam !== false;\n  }\n}"]},"metadata":{},"sourceType":"module"}