{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, getValidChildren, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, determineLazyBehavior, focus, isUndefined, normalizeEventKey } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport var [TabsDescendantsProvider, useTabsDescendantsContext, useTabsDescendants, useTabsDescendant] = createDescendantContext();\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\n\nexport function useTabs(props) {\n  var {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\"\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIndex\", \"onChange\", \"index\", \"isManual\", \"isLazy\", \"lazyBehavior\", \"orientation\", \"direction\"]);\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n\n\n  var [focusedIndex, setFocusedIndex] = React.useState(defaultIndex != null ? defaultIndex : 0);\n  var [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex != null ? defaultIndex : 0,\n    value: index,\n    onChange\n  });\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n\n  React.useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index);\n    }\n  }, [index]);\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n\n  var descendants = useTabsDescendants();\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n\n  var id = useId(props.id, \"tabs\");\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps\n  };\n}\nexport var [TabsProvider, useTabsContext] = createContext({\n  name: \"TabsContext\",\n  errorMessage: \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\"\n});\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\n\nexport function useTabList(props) {\n  var {\n    focusedIndex,\n    orientation,\n    direction\n  } = useTabsContext();\n  var descendants = useTabsDescendantsContext();\n  var onKeyDown = React.useCallback(event => {\n    var nextTab = () => {\n      var next = descendants.nextEnabled(focusedIndex);\n      if (next) focus(next.node);\n    };\n\n    var prevTab = () => {\n      var prev = descendants.prevEnabled(focusedIndex);\n      if (prev) focus(prev.node);\n    };\n\n    var firstTab = () => {\n      var first = descendants.firstEnabled();\n      if (first) focus(first.node);\n    };\n\n    var lastTab = () => {\n      var last = descendants.lastEnabled();\n      if (last) focus(last.node);\n    };\n\n    var isHorizontal = orientation === \"horizontal\";\n    var isVertical = orientation === \"vertical\";\n    var eventKey = normalizeEventKey(event);\n    var ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\";\n    var ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\";\n    var keyMap = {\n      [ArrowStart]: () => isHorizontal && prevTab(),\n      [ArrowEnd]: () => isHorizontal && nextTab(),\n      ArrowDown: () => isVertical && nextTab(),\n      ArrowUp: () => isVertical && prevTab(),\n      Home: firstTab,\n      End: lastTab\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, focusedIndex, orientation, direction]);\n  return _extends({}, props, {\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n}\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\n\nexport function useTab(props) {\n  var {\n    isDisabled,\n    isFocusable\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\"]);\n\n  var {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex\n  } = useTabsContext();\n  var {\n    index,\n    register\n  } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  var isSelected = index === selectedIndex;\n\n  var onClick = () => {\n    setSelectedIndex(index);\n  };\n\n  var onFocus = () => {\n    setFocusedIndex(index);\n    var isDisabledButFocusable = isDisabled && isFocusable;\n    var shouldSelect = !isManual && !isDisabledButFocusable;\n\n    if (shouldSelect) {\n      setSelectedIndex(index);\n    }\n  };\n\n  var clickableProps = useClickable(_extends({}, htmlProps, {\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick)\n  }));\n  var type = \"button\";\n  return _extends({}, clickableProps, {\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus)\n  });\n}\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\n\nexport function useTabPanels(props) {\n  var context = useTabsContext();\n  var {\n    id,\n    selectedIndex\n  } = context;\n  var validChildren = getValidChildren(props.children);\n  var children = validChildren.map((child, index) => /*#__PURE__*/React.cloneElement(child, {\n    isSelected: index === selectedIndex,\n    id: makeTabPanelId(id, index),\n    // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n    \"aria-labelledby\": makeTabId(id, index)\n  }));\n  return _extends({}, props, {\n    children\n  });\n}\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\n\nexport function useTabPanel(props) {\n  var {\n    isSelected,\n    id,\n    children\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isSelected\", \"id\", \"children\"]);\n\n  var {\n    isLazy,\n    lazyBehavior\n  } = useTabsContext();\n  var hasBeenSelected = React.useRef(false);\n\n  if (isSelected) {\n    hasBeenSelected.current = true;\n  }\n\n  var shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior\n  });\n  return _extends({\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0\n  }, htmlProps, {\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id\n  });\n}\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\n\nexport function useTabIndicator() {\n  var context = useTabsContext();\n  var descendants = useTabsDescendantsContext();\n  var {\n    selectedIndex,\n    orientation\n  } = context;\n  var isHorizontal = orientation === \"horizontal\";\n  var isVertical = orientation === \"vertical\"; // Get the clientRect of the selected tab\n\n  var [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return {\n      left: 0,\n      width: 0\n    };\n    if (isVertical) return {\n      top: 0,\n      height: 0\n    };\n    return undefined;\n  });\n  var [hasMeasured, setHasMeasured] = React.useState(false); // Update the selected tab rect when the selectedIndex changes\n\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined;\n    var tab = descendants.item(selectedIndex);\n    if (isUndefined(tab)) return undefined; // Horizontal Tab: Calculate width and left distance\n\n    if (isHorizontal) {\n      setRect({\n        left: tab.node.offsetLeft,\n        width: tab.node.offsetWidth\n      });\n    } // Vertical Tab: Calculate height and top distance\n\n\n    if (isVertical) {\n      setRect({\n        top: tab.node.offsetTop,\n        height: tab.node.offsetHeight\n      });\n    } // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n\n\n    var id = requestAnimationFrame(() => {\n      setHasMeasured(true);\n    });\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  }, [selectedIndex, isHorizontal, isVertical, descendants]);\n  return _extends({\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\"\n  }, rect);\n}\n\nfunction makeTabId(id, index) {\n  return id + \"--tab-\" + index;\n}\n\nfunction makeTabPanelId(id, index) {\n  return id + \"--tabpanel-\" + index;\n}","map":{"version":3,"sources":["../../src/use-tabs.ts"],"names":["createDescendantContext","lazyBehavior","orientation","direction","htmlProps","React","defaultIndex","useControllableState","defaultValue","value","onChange","index","setFocusedIndex","descendants","useTabsDescendants","id","useId","props","createContext","name","errorMessage","useTabsContext","useTabsDescendantsContext","onKeyDown","event","nextTab","next","focus","prevTab","prev","firstTab","first","lastTab","last","isHorizontal","isVertical","eventKey","normalizeEventKey","ArrowStart","ArrowEnd","keyMap","ArrowDown","ArrowUp","Home","End","action","role","callAllHandlers","isFocusable","selectedIndex","register","useTabsDescendant","disabled","isDisabled","isSelected","onClick","setSelectedIndex","onFocus","isDisabledButFocusable","shouldSelect","clickableProps","useClickable","ref","mergeRefs","type","makeTabId","tabIndex","makeTabPanelId","context","validChildren","getValidChildren","children","hasBeenSelected","shouldRenderChildren","determineLazyBehavior","hidden","left","width","top","height","useSafeLayoutEffect","isUndefined","tab","setRect","offsetWidth","offsetHeight","requestAnimationFrame","setHasMeasured","cancelAnimationFrame","position","transitionProperty","transitionDuration","hasMeasured","transitionTimingFunction"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  createContext,\n  EventKeyMap,\n  getValidChildren,\n  mergeRefs,\n} from \"@chakra-ui/react-utils\"\nimport {\n  callAllHandlers,\n  determineLazyBehavior,\n  Dict,\n  focus,\n  isUndefined,\n  LazyBehavior,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  TabsDescendantsProvider,\n  useTabsDescendantsContext,\n  useTabsDescendants,\n  useTabsDescendant,\n] = createDescendantContext<HTMLButtonElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * useTabs - The root react hook that manages all tab items\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, rendering of the tab panel's will be deferred until it is selected.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of tab panels' content when not active.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The content of inactive tab panels are always unmounted.\n   * - \"keepMounted\": The content of inactive tab panels is initially unmounted,\n   * but stays mounted when selected.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyBehavior\n  /**\n   * The writing mode direction.\n   *\n   * - When in RTL, the left and right navigation is flipped\n   */\n  direction?: \"rtl\" | \"ltr\"\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    orientation = \"horizontal\",\n    direction = \"ltr\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (index != null) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   */\n  const descendants = useTabsDescendants()\n\n  /**\n   * Generate a unique id or use user-provided id for the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    lazyBehavior,\n    orientation,\n    descendants,\n    direction,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<\n  ReturnType<typeof useTabs>,\n  \"htmlProps\" | \"descendants\"\n>\n\nexport const [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const { focusedIndex, orientation, direction } = useTabsContext()\n\n  const descendants = useTabsDescendantsContext()\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => {\n        const next = descendants.nextEnabled(focusedIndex)\n        if (next) focus(next.node)\n      }\n      const prevTab = () => {\n        const prev = descendants.prevEnabled(focusedIndex)\n        if (prev) focus(prev.node)\n      }\n      const firstTab = () => {\n        const first = descendants.firstEnabled()\n        if (first) focus(first.node)\n      }\n      const lastTab = () => {\n        const last = descendants.lastEnabled()\n        if (last) focus(last.node)\n      }\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n\n      const ArrowStart = direction === \"ltr\" ? \"ArrowLeft\" : \"ArrowRight\"\n      const ArrowEnd = direction === \"ltr\" ? \"ArrowRight\" : \"ArrowLeft\"\n\n      const keyMap: EventKeyMap = {\n        [ArrowStart]: () => isHorizontal && prevTab(),\n        [ArrowEnd]: () => isHorizontal && nextTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [descendants, focusedIndex, orientation, direction],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    selectedIndex,\n  } = useTabsContext()\n\n  const { index, register } = useTabsDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    setFocusedIndex(index)\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(register, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      // Refers to the associated tab element, and also provides an accessible name to the tab panel.\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy, lazyBehavior } = useTabsContext()\n\n  const hasBeenSelected = React.useRef(false)\n  if (isSelected) {\n    hasBeenSelected.current = true\n  }\n\n  const shouldRenderChildren = determineLazyBehavior({\n    hasBeenSelected: hasBeenSelected.current,\n    isSelected,\n    isLazy,\n    lazyBehavior,\n  })\n\n  return {\n    // Puts the tabpanel in the page `Tab` sequence.\n    tabIndex: 0,\n    ...htmlProps,\n    children: shouldRenderChildren ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n  const descendants = useTabsDescendantsContext()\n\n  const { selectedIndex, orientation } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = descendants.item(selectedIndex)\n    if (isUndefined(tab)) return undefined\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal) {\n      setRect({ left: tab.node.offsetLeft, width: tab.node.offsetWidth })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical) {\n      setRect({ top: tab.node.offsetTop, height: tab.node.offsetHeight })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, descendants])\n\n  return {\n    position: \"absolute\",\n    transitionProperty: \"left, right, top, bottom\",\n    transitionDuration: hasMeasured ? \"200ms\" : \"0ms\",\n    transitionTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"]},"metadata":{},"sourceType":"module"}