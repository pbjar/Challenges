{"ast":null,"code":"import { useState } from 'react';\nimport { useTransactionsContext } from '../providers';\nexport function usePromiseTransaction(chainId, options) {\n  const [state, setState] = useState({\n    status: 'None'\n  });\n  const {\n    addTransaction\n  } = useTransactionsContext();\n\n  const promiseTransaction = async transactionPromise => {\n    var _a;\n\n    if (!chainId) return;\n    let transaction = undefined;\n\n    try {\n      transaction = await transactionPromise;\n      setState({\n        transaction,\n        status: 'Mining',\n        chainId\n      });\n      addTransaction({\n        transaction,\n        submittedAt: Date.now(),\n        transactionName: options === null || options === void 0 ? void 0 : options.transactionName\n      });\n      const receipt = await transaction.wait();\n      setState({\n        receipt,\n        transaction,\n        status: 'Success',\n        chainId\n      });\n    } catch (e) {\n      const errorMessage = (_a = e.reason) !== null && _a !== void 0 ? _a : e.message;\n\n      if (transaction) {\n        setState({\n          status: 'Fail',\n          transaction,\n          receipt: e.receipt,\n          errorMessage,\n          chainId\n        });\n      } else {\n        setState({\n          status: 'Exception',\n          errorMessage,\n          chainId\n        });\n      }\n    }\n  };\n\n  return {\n    promiseTransaction,\n    state\n  };\n}","map":{"version":3,"sources":["../../../../src/hooks/usePromiseTransaction.ts"],"names":[],"mappings":"AACA,SAAS,QAAT,QAAyB,OAAzB;AACA,SAAS,sBAAT,QAAuC,cAAvC;AAGA,OAAM,SAAU,qBAAV,CAAgC,OAAhC,EAA6D,OAA7D,EAAyF;AAC7F,QAAM,CAAC,KAAD,EAAQ,QAAR,IAAoB,QAAQ,CAAoB;AAAE,IAAA,MAAM,EAAE;AAAV,GAApB,CAAlC;AACA,QAAM;AAAE,IAAA;AAAF,MAAqB,sBAAsB,EAAjD;;AAEA,QAAM,kBAAkB,GAAG,MAAO,kBAAP,IAA2D;;;AACpF,QAAI,CAAC,OAAL,EAAc;AACd,QAAI,WAAW,GAAoC,SAAnD;;AACA,QAAI;AACF,MAAA,WAAW,GAAG,MAAM,kBAApB;AAEA,MAAA,QAAQ,CAAC;AAAE,QAAA,WAAF;AAAe,QAAA,MAAM,EAAE,QAAvB;AAAiC,QAAA;AAAjC,OAAD,CAAR;AACA,MAAA,cAAc,CAAC;AACb,QAAA,WADa;AAEb,QAAA,WAAW,EAAE,IAAI,CAAC,GAAL,EAFA;AAGb,QAAA,eAAe,EAAE,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE;AAHb,OAAD,CAAd;AAKA,YAAM,OAAO,GAAG,MAAM,WAAW,CAAC,IAAZ,EAAtB;AAEA,MAAA,QAAQ,CAAC;AAAE,QAAA,OAAF;AAAW,QAAA,WAAX;AAAwB,QAAA,MAAM,EAAE,SAAhC;AAA2C,QAAA;AAA3C,OAAD,CAAR;AACD,KAZD,CAYE,OAAO,CAAP,EAAU;AACV,YAAM,YAAY,GAAA,CAAA,EAAA,GAAG,CAAC,CAAC,MAAL,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,EAAX,GAAe,CAAC,CAAC,OAAnC;;AACA,UAAI,WAAJ,EAAiB;AACf,QAAA,QAAQ,CAAC;AAAE,UAAA,MAAM,EAAE,MAAV;AAAkB,UAAA,WAAlB;AAA+B,UAAA,OAAO,EAAE,CAAC,CAAC,OAA1C;AAAmD,UAAA,YAAnD;AAAiE,UAAA;AAAjE,SAAD,CAAR;AACD,OAFD,MAEO;AACL,QAAA,QAAQ,CAAC;AAAE,UAAA,MAAM,EAAE,WAAV;AAAuB,UAAA,YAAvB;AAAqC,UAAA;AAArC,SAAD,CAAR;AACD;AACF;AACF,GAvBD;;AAwBA,SAAO;AAAE,IAAA,kBAAF;AAAsB,IAAA;AAAtB,GAAP;AACD","sourceRoot":"","sourcesContent":["import { useState } from 'react';\nimport { useTransactionsContext } from '../providers';\nexport function usePromiseTransaction(chainId, options) {\n    const [state, setState] = useState({ status: 'None' });\n    const { addTransaction } = useTransactionsContext();\n    const promiseTransaction = async (transactionPromise) => {\n        var _a;\n        if (!chainId)\n            return;\n        let transaction = undefined;\n        try {\n            transaction = await transactionPromise;\n            setState({ transaction, status: 'Mining', chainId });\n            addTransaction({\n                transaction,\n                submittedAt: Date.now(),\n                transactionName: options === null || options === void 0 ? void 0 : options.transactionName,\n            });\n            const receipt = await transaction.wait();\n            setState({ receipt, transaction, status: 'Success', chainId });\n        }\n        catch (e) {\n            const errorMessage = (_a = e.reason) !== null && _a !== void 0 ? _a : e.message;\n            if (transaction) {\n                setState({ status: 'Fail', transaction, receipt: e.receipt, errorMessage, chainId });\n            }\n            else {\n                setState({ status: 'Exception', errorMessage, chainId });\n            }\n        }\n    };\n    return { promiseTransaction, state };\n}\n//# sourceMappingURL=usePromiseTransaction.js.map"]},"metadata":{},"sourceType":"module"}