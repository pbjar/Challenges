{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nvar RequestError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(RequestError, _Error);\n\n  function RequestError(message, code, data) {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.code = code;\n    _this.data = data;\n    _this.name = _this.constructor.name;\n    _this.message = message;\n    return _this;\n  }\n\n  return RequestError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar MiniRpcProvider = function MiniRpcProvider(chainId, url) {\n  var _this3 = this;\n\n  var _this2 = this;\n\n  this.isMetaMask = false;\n\n  this.sendAsync = function (request, callback) {\n    console.log('sendAsync', request.method, request.params);\n\n    _this2.request(request.method, request.params).then(function (result) {\n      return callback(null, {\n        jsonrpc: '2.0',\n        id: request.id,\n        result: result\n      });\n    })[\"catch\"](function (error) {\n      return callback(error, null);\n    });\n  };\n\n  this.request = function (method, params) {\n    try {\n      if (typeof method !== 'string') {\n        params = method.params;\n        method = method.method;\n      }\n\n      return Promise.resolve(fetch(_this3.url, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          id: 1,\n          method: method,\n          params: params\n        })\n      })).then(function (response) {\n        if (!response.ok) throw new RequestError(response.status + \": \" + response.statusText, -32000);\n        return Promise.resolve(response.json()).then(function (body) {\n          if ('error' in body) {\n            var _body$error, _body$error2, _body$error3;\n\n            throw new RequestError(body == null ? void 0 : (_body$error = body.error) == null ? void 0 : _body$error.message, body == null ? void 0 : (_body$error2 = body.error) == null ? void 0 : _body$error2.code, body == null ? void 0 : (_body$error3 = body.error) == null ? void 0 : _body$error3.data);\n          } else if ('result' in body) {\n            return body.result;\n          } else {\n            throw new RequestError(\"Received unexpected JSON-RPC response to \" + method + \" request.\", -32000, body);\n          }\n        });\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  this.chainId = chainId;\n  this.url = url;\n  var parsed = new URL(url);\n  this.host = parsed.host;\n  this.path = parsed.pathname;\n};\n\nvar NetworkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(NetworkConnector, _AbstractConnector);\n\n  function NetworkConnector(_ref) {\n    var _this4;\n\n    var urls = _ref.urls,\n        defaultChainId = _ref.defaultChainId;\n    !(defaultChainId || Object.keys(urls).length === 1) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'defaultChainId is a required argument with >1 url') : invariant(false) : void 0;\n    _this4 = _AbstractConnector.call(this, {\n      supportedChainIds: Object.keys(urls).map(function (k) {\n        return Number(k);\n      })\n    }) || this;\n    _this4.currentChainId = defaultChainId || Number(Object.keys(urls)[0]);\n    _this4.providers = Object.keys(urls).reduce(function (accumulator, chainId) {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)]);\n      return accumulator;\n    }, {});\n    return _this4;\n  }\n\n  var _proto = NetworkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _this6 = this;\n\n      return Promise.resolve({\n        provider: _this6.providers[_this6.currentChainId],\n        chainId: _this6.currentChainId,\n        account: null\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.providers[_this8.currentChainId]);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this10 = this;\n\n      return Promise.resolve(_this10.currentChainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    return Promise.resolve(null);\n  };\n\n  _proto.deactivate = function deactivate() {\n    return;\n  };\n\n  _proto.changeChainId = function changeChainId(chainId) {\n    !Object.keys(this.providers).includes(chainId.toString()) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"No url found for chainId \" + chainId) : invariant(false) : void 0;\n    this.currentChainId = chainId;\n    this.emitUpdate({\n      provider: this.providers[this.currentChainId],\n      chainId: chainId\n    });\n  };\n\n  return NetworkConnector;\n}(AbstractConnector);\n\nexport { NetworkConnector, RequestError };","map":{"version":3,"sources":["../src/index.ts"],"names":["RequestError","MiniRpcProvider","parsed","console","request","callback","jsonrpc","id","result","params","method","response","fetch","body","NetworkConnector","urls","defaultChainId","Object","supportedChainIds","Number","accumulator","provider","chainId","account","deactivate","changeChainId"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\n// taken from ethers.js, compatible interface with web3 provider\ntype AsyncSendable = {\n  isMetaMask?: boolean\n  host?: string\n  path?: string\n  sendAsync?: (request: any, callback: (error: any, response: any) => void) => void\n  send?: (request: any, callback: (error: any, response: any) => void) => void\n}\n\nexport class RequestError extends Error {\n  constructor(message: string, public code: number, public data?: unknown) {\n    super()\n    this.name = this.constructor.name\n    this.message = message\n  }\n}\n\nclass MiniRpcProvider implements AsyncSendable {\n  public readonly isMetaMask: false = false\n  public readonly chainId: number\n  public readonly url: string\n  public readonly host: string\n  public readonly path: string\n\n  constructor(chainId: number, url: string) {\n    this.chainId = chainId\n    this.url = url\n    const parsed = new URL(url)\n    this.host = parsed.host\n    this.path = parsed.pathname\n  }\n\n  public readonly sendAsync = (\n    request: { jsonrpc: '2.0'; id: number | string | null; method: string; params?: unknown[] | object },\n    callback: (error: any, response: any) => void\n  ): void => {\n    console.log('sendAsync', request.method, request.params)\n    this.request(request.method, request.params)\n      .then(result => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch(error => callback(error, null))\n  }\n\n  public readonly request = async (\n    method: string | { method: string; params?: unknown[] | object },\n    params?: unknown[] | object\n  ): Promise<unknown> => {\n    if (typeof method !== 'string') {\n      params = (method as any).params\n      method = method.method\n    }\n\n    const response = await fetch(this.url, {\n      method: 'POST',\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        id: 1,\n        method,\n        params\n      })\n    })\n    if (!response.ok) throw new RequestError(`${response.status}: ${response.statusText}`, -32000)\n    const body = await response.json()\n    if ('error' in body) {\n      throw new RequestError(body?.error?.message, body?.error?.code, body?.error?.data)\n    } else if ('result' in body) {\n      return body.result\n    } else {\n      throw new RequestError(`Received unexpected JSON-RPC response to ${method} request.`, -32000, body)\n    }\n  }\n}\n\ninterface NetworkConnectorArguments {\n  urls: { [chainId: number]: string }\n  defaultChainId?: number\n}\n\nexport class NetworkConnector extends AbstractConnector {\n  private readonly providers: { [chainId: number]: MiniRpcProvider }\n  private currentChainId: number\n\n  constructor({ urls, defaultChainId }: NetworkConnectorArguments) {\n    invariant(defaultChainId || Object.keys(urls).length === 1, 'defaultChainId is a required argument with >1 url')\n    super({ supportedChainIds: Object.keys(urls).map((k): number => Number(k)) })\n\n    this.currentChainId = defaultChainId || Number(Object.keys(urls)[0])\n    this.providers = Object.keys(urls).reduce<{ [chainId: number]: MiniRpcProvider }>((accumulator, chainId) => {\n      accumulator[Number(chainId)] = new MiniRpcProvider(Number(chainId), urls[Number(chainId)])\n      return accumulator\n    }, {})\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    return { provider: this.providers[this.currentChainId], chainId: this.currentChainId, account: null }\n  }\n\n  public async getProvider(): Promise<MiniRpcProvider> {\n    return this.providers[this.currentChainId]\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.currentChainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return null\n  }\n\n  public deactivate() {\n    return\n  }\n\n  public changeChainId(chainId: number) {\n    invariant(Object.keys(this.providers).includes(chainId.toString()), `No url found for chainId ${chainId}`)\n    this.currentChainId = chainId\n    this.emitUpdate({ provider: this.providers[this.currentChainId], chainId })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}