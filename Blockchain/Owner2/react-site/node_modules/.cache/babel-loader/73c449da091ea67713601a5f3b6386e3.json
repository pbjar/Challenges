{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\"; // TYPES\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client, options) {\n  var _options, _options2;\n\n  options = options || {};\n  var mutations = [];\n  var queries = [];\n\n  if (((_options = options) == null ? void 0 : _options.dehydrateMutations) !== false) {\n    var shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(function (mutation) {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (((_options2 = options) == null ? void 0 : _options2.dehydrateQueries) !== false) {\n    var shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(function (query) {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations: mutations,\n    queries: queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  var mutationCache = client.getMutationCache();\n  var queryCache = client.getQueryCache();\n  var mutations = dehydratedState.mutations || [];\n  var queries = dehydratedState.queries || [];\n  mutations.forEach(function (dehydratedMutation) {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, _extends({}, options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations, {\n      mutationKey: dehydratedMutation.mutationKey\n    }), dehydratedMutation.state);\n  });\n  queries.forEach(function (dehydratedQuery) {\n    var _options$defaultOptio2;\n\n    var query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, _extends({}, options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries, {\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }), dehydratedQuery.state);\n  });\n}","map":{"version":3,"sources":["/home/mark/Desktop/Challenges/Blockchain/Owner/react-site/node_modules/react-query/es/core/hydration.js"],"names":["_extends","dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","_options","_options2","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","_options$defaultOptio","build","defaultOptions","dehydratedQuery","_options$defaultOptio2","get","dataUpdatedAt","setState"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n\n// TYPES\n// FUNCTIONS\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state\n  };\n} // Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\n\n\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash\n  };\n}\n\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\n\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === 'success';\n}\n\nexport function dehydrate(client, options) {\n  var _options, _options2;\n\n  options = options || {};\n  var mutations = [];\n  var queries = [];\n\n  if (((_options = options) == null ? void 0 : _options.dehydrateMutations) !== false) {\n    var shouldDehydrateMutation = options.shouldDehydrateMutation || defaultShouldDehydrateMutation;\n    client.getMutationCache().getAll().forEach(function (mutation) {\n      if (shouldDehydrateMutation(mutation)) {\n        mutations.push(dehydrateMutation(mutation));\n      }\n    });\n  }\n\n  if (((_options2 = options) == null ? void 0 : _options2.dehydrateQueries) !== false) {\n    var shouldDehydrateQuery = options.shouldDehydrateQuery || defaultShouldDehydrateQuery;\n    client.getQueryCache().getAll().forEach(function (query) {\n      if (shouldDehydrateQuery(query)) {\n        queries.push(dehydrateQuery(query));\n      }\n    });\n  }\n\n  return {\n    mutations: mutations,\n    queries: queries\n  };\n}\nexport function hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return;\n  }\n\n  var mutationCache = client.getMutationCache();\n  var queryCache = client.getQueryCache();\n  var mutations = dehydratedState.mutations || [];\n  var queries = dehydratedState.queries || [];\n  mutations.forEach(function (dehydratedMutation) {\n    var _options$defaultOptio;\n\n    mutationCache.build(client, _extends({}, options == null ? void 0 : (_options$defaultOptio = options.defaultOptions) == null ? void 0 : _options$defaultOptio.mutations, {\n      mutationKey: dehydratedMutation.mutationKey\n    }), dehydratedMutation.state);\n  });\n  queries.forEach(function (dehydratedQuery) {\n    var _options$defaultOptio2;\n\n    var query = queryCache.get(dehydratedQuery.queryHash); // Do not hydrate if an existing query exists with newer data\n\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state);\n      }\n\n      return;\n    } // Restore query\n\n\n    queryCache.build(client, _extends({}, options == null ? void 0 : (_options$defaultOptio2 = options.defaultOptions) == null ? void 0 : _options$defaultOptio2.queries, {\n      queryKey: dehydratedQuery.queryKey,\n      queryHash: dehydratedQuery.queryHash\n    }), dehydratedQuery.state);\n  });\n}"]},"metadata":{},"sourceType":"module"}